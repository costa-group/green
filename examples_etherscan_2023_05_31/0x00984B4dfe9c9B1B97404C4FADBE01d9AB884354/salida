Green Main
*************************************************************
Compilation time: 0.33410149096744135s
*************************************************************
File: HONGKONG
Build CFG: 0.462588207970839s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis HONGKONG
Memory accesess analysis finished!


MEMRES: NOT Found read (potential optimization) -> <slot56,0> 1293:6 --> 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol HONGKONG--delBots(address[])
GASOL: Useless accesses found: {'1293': [6]}
Free memory analyss finished


SLOTS Contract HONGKONG: 92
Memory read accesses ContractHONGKONG: 322
Memory write accesses ContractHONGKONG: 588
********************************** INIT
GASOL: Adding block useless 1293
CONTEXT: Detected context equality 2 <slot2,0> 7 <slot2,0>
CONTEXT: Detected context equality 2 <slot2,0> 7 <slot2,0>
CONTEXT: Detected context equality 17 <slot18,0> 19 <slot18,0>
CONTEXT: Detected context equality 17 <slot18,0> 20 <slot18,0>
CONTEXT: Detected context equality 17 <slot18,0> 20 <slot18,0>
CONTEXT: Detected context equality 17 <slot23,0> 19 <slot23,0>
CONTEXT: Detected context equality 17 <slot23,0> 20 <slot23,0>
CONTEXT: Detected context equality 17 <slot23,0> 20 <slot23,0>
CONTEXT: Detected context equality 13 <slot26,0> 15 <slot26,0>
CONTEXT: Detected context equality 13 <slot26,0> 15 <slot26,0>
CONTEXT: Detected context equality 13 <slot26,0> 19 <slot26,0>
CONTEXT: Detected context equality 13 <slot26,0> 19 <slot26,0>
CONTEXT: Detected context equality 17 <slot34,0> 19 <slot34,0>
CONTEXT: Detected context equality 17 <slot34,0> 20 <slot34,0>
CONTEXT: Detected context equality 17 <slot34,0> 20 <slot34,0>
CONTEXT: Detected context equality 18 <slot36,0> 20 <slot36,0>
CONTEXT: Detected context equality 18 <slot36,0> 21 <slot36,0>
CONTEXT: Detected context equality 18 <slot36,0> 21 <slot36,0>
CONTEXT: Detected context equality 20 <slot39,0> 22 <slot39,0>
CONTEXT: Detected context equality 20 <slot39,0> 23 <slot39,0>
CONTEXT: Detected context equality 20 <slot39,0> 23 <slot39,0>
CONTEXT: Detected context equality 5 <slot49,0> 7 <slot49,0>
CONTEXT: Detected context equality 5 <slot49,0> 7 <slot49,0>
CONTEXT: Detected context equality 5 <slot49,0> 11 <slot49,0>
CONTEXT: Detected context equality 5 <slot49,0> 11 <slot49,0>
CONTEXT: Detected context equality 2 <slot55,0> 7 <slot55,0>
CONTEXT: Detected context equality 2 <slot55,0> 7 <slot55,0>
CONTEXT: Detected context equality 18 <slot61,0> 20 <slot61,0>
CONTEXT: Detected context equality 18 <slot61,0> 21 <slot61,0>
CONTEXT: Detected context equality 18 <slot61,0> 21 <slot61,0>
CONTEXT: Detected context equality 18 <slot66,0> 20 <slot66,0>
CONTEXT: Detected context equality 18 <slot66,0> 21 <slot66,0>
CONTEXT: Detected context equality 18 <slot66,0> 21 <slot66,0>
CONTEXT: Detected context equality 14 <slot69,0> 16 <slot69,0>
CONTEXT: Detected context equality 14 <slot69,0> 16 <slot69,0>
CONTEXT: Detected context equality 14 <slot69,0> 20 <slot69,0>
CONTEXT: Detected context equality 14 <slot69,0> 20 <slot69,0>
CONTEXT: Detected context equality 18 <slot77,0> 20 <slot77,0>
CONTEXT: Detected context equality 18 <slot77,0> 21 <slot77,0>
CONTEXT: Detected context equality 18 <slot77,0> 21 <slot77,0>
CONTEXT: Detected context equality 19 <slot79,0> 21 <slot79,0>
CONTEXT: Detected context equality 19 <slot79,0> 22 <slot79,0>
CONTEXT: Detected context equality 19 <slot79,0> 22 <slot79,0>
CONTEXT: Detected context equality 21 <slot82,0> 23 <slot82,0>
CONTEXT: Detected context equality 21 <slot82,0> 24 <slot82,0>
CONTEXT: Detected context equality 21 <slot82,0> 24 <slot82,0>
CONTEXT: Detected context equality 12 <slot84,0> 14 <slot84,0>
CONTEXT: Detected context equality 12 <slot84,0> 15 <slot84,0>
CONTEXT: Detected context equality 12 <slot84,0> 15 <slot84,0>
COMPACT CLONES: True
CONTRACT: HONGKONG
-----
Block: 1046
1046Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x02', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
1046-Stack size: 4 
1046-Equals Mem:<< [<12,27>, <17,31>]>> 
1046-NonEquals Mem: << [<12,17>, <12,31>, <17,27>, <27,31>]>> 
1046-Equals Sto:<< []>> 
1046-NonEquals Sto: << []>> 
1046-Useless: []
1046-Constancy: []
1046-ContextAliasing: []

.....
-----
Block: 472_0
472_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
472_0-Stack size: 2 
472_0-Equals Mem:<< []>> 
472_0-NonEquals Mem: << [<5,2>]>> 
472_0-Equals Sto:<< []>> 
472_0-NonEquals Sto: << []>> 
472_0-Useless: []
472_0-Constancy: []
472_0-ContextAliasing: []

.....
-----
Block: 5940_2
5940_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5940_2-Stack size: 11 
5940_2-Equals Mem:<< []>> 
5940_2-NonEquals Mem: << [<5,8>]>> 
5940_2-Equals Sto:<< []>> 
5940_2-NonEquals Sto: << []>> 
5940_2-Useless: []
5940_2-Constancy: [(5, 0), (4, 32)]
5940_2-ContextAliasing: []

.....
-----
Block: 5940_1
5940_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5940_1-Stack size: 14 
5940_1-Equals Mem:<< []>> 
5940_1-NonEquals Mem: << [<5,8>]>> 
5940_1-Equals Sto:<< []>> 
5940_1-NonEquals Sto: << []>> 
5940_1-Useless: []
5940_1-Constancy: [(8, 0), (7, 32)]
5940_1-ContextAliasing: []

.....
-----
Block: 6074_0
6074_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x17d7', 'JUMPI']>> 
6074_0-Stack size: 13 
6074_0-Equals Mem:<< []>> 
6074_0-NonEquals Mem: << [<2,5>]>> 
6074_0-Equals Sto:<< []>> 
6074_0-NonEquals Sto: << []>> 
6074_0-Useless: []
6074_0-Constancy: [(7, 0), (6, 32)]
6074_0-ContextAliasing: []

.....
-----
Block: 2774
2774Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
2774-Stack size: 3 
2774-Equals Mem:<< []>> 
2774-NonEquals Mem: << [<6,1>]>> 
2774-Equals Sto:<< []>> 
2774-NonEquals Sto: << []>> 
2774-Useless: []
2774-Constancy: []
2774-ContextAliasing: []

.....
-----
Block: 6591_6
6591_6Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591_6-Stack size: 10 
6591_6-Equals Mem:<< []>> 
6591_6-NonEquals Mem: << [<5,8>]>> 
6591_6-Equals Sto:<< []>> 
6591_6-NonEquals Sto: << []>> 
6591_6-Useless: []
6591_6-Constancy: [(3, 0)]
6591_6-ContextAliasing: [(7, 7)]

.....
-----
Block: 2831
2831Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x0b4a', 'DUP2', 'PUSH2 0x19d3', 'JUMP']>> 
2831-Stack size: 9 
2831-Equals Mem:<< []>> 
2831-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
2831-Equals Sto:<< [<31,43>]>> 
2831-NonEquals Sto: << []>> 
2831-Useless: []
2831-Constancy: [(2, 0)]
2831-ContextAliasing: [(6, 7)]

.....
-----
Block: 6257_39
6257_39Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_39-Stack size: 9 
6257_39-Equals Mem:<< []>> 
6257_39-NonEquals Mem: << [<5,8>]>> 
6257_39-Equals Sto:<< []>> 
6257_39-NonEquals Sto: << []>> 
6257_39-Useless: []
6257_39-Constancy: [(1, 0)]
6257_39-ContextAliasing: []

.....
-----
Block: 1838
1838Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
1838-Stack size: 2 
1838-Equals Mem:<< []>> 
1838-NonEquals Mem: << [<6,1>]>> 
1838-Equals Sto:<< []>> 
1838-NonEquals Sto: << []>> 
1838-Useless: []
1838-Constancy: []
1838-ContextAliasing: []

.....
-----
Block: 1880
1880Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
1880-Stack size: 2 
1880-Equals Mem:<< []>> 
1880-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
1880-Equals Sto:<< []>> 
1880-NonEquals Sto: << []>> 
1880-Useless: []
1880-Constancy: []
1880-ContextAliasing: []

.....
-----
Block: 6257_35
6257_35Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_35-Stack size: 10 
6257_35-Equals Mem:<< []>> 
6257_35-NonEquals Mem: << [<5,8>]>> 
6257_35-Equals Sto:<< []>> 
6257_35-NonEquals Sto: << []>> 
6257_35-Useless: []
6257_35-Constancy: []
6257_35-ContextAliasing: []

.....
-----
Block: 2987_4
2987_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
2987_4-Stack size: 6 
2987_4-Equals Mem:<< []>> 
2987_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2987_4-Equals Sto:<< []>> 
2987_4-NonEquals Sto: << []>> 
2987_4-Useless: []
2987_4-Constancy: []
2987_4-ContextAliasing: []

.....
-----
Block: 3085_4
3085_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3085_4-Stack size: 6 
3085_4-Equals Mem:<< []>> 
3085_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3085_4-Equals Sto:<< []>> 
3085_4-NonEquals Sto: << []>> 
3085_4-Useless: []
3085_4-Constancy: []
3085_4-ContextAliasing: []

.....
-----
Block: 2103
2103Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x085b', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
2103-Stack size: 6 
2103-Equals Mem:<< [<18,6>]>> 
2103-NonEquals Mem: << []>> 
2103-Equals Sto:<< []>> 
2103-NonEquals Sto: << []>> 
2103-Useless: []
2103-Constancy: []
2103-ContextAliasing: []

.....
-----
Block: 2234
2234Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x08de', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
2234-Stack size: 9 
2234-Equals Mem:<< [<18,6>]>> 
2234-NonEquals Mem: << []>> 
2234-Equals Sto:<< []>> 
2234-NonEquals Sto: << []>> 
2234-Useless: []
2234-Constancy: []
2234-ContextAliasing: []

.....
-----
Block: 2344
2344Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x094c', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
2344-Stack size: 6 
2344-Equals Mem:<< [<18,6>]>> 
2344-NonEquals Mem: << []>> 
2344-Equals Sto:<< []>> 
2344-NonEquals Sto: << []>> 
2344-Useless: []
2344-Constancy: []
2344-ContextAliasing: []

.....
-----
Block: 2380
2380Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'SWAP1', 'SWAP2', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH1 0x13', 'SLOAD', 'AND', 'PUSH4 0xf305d719', 'SELFBALANCE', 'ADDRESS', 'PUSH2 0x0993', 'DUP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2380-Stack size: 3 
2380-Equals Mem:<< []>> 
2380-NonEquals Mem: << [<41,44>]>> 
2380-Equals Sto:<< [<3,23>]>> 
2380-NonEquals Sto: << [<3,25>, <3,48>, <23,25>, <23,48>, <25,48>]>> 
2380-Useless: []
2380-Constancy: []
2380-ContextAliasing: []

.....
-----
Block: 2572
2572Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0a31', 'SWAP2', 'SWAP1', 'PUSH2 0x1a06', 'JUMP']>> 
2572-Stack size: 7 
2572-Equals Mem:<< [<19,7>]>> 
2572-NonEquals Mem: << []>> 
2572-Equals Sto:<< []>> 
2572-NonEquals Sto: << []>> 
2572-Useless: []
2572-Constancy: []
2572-ContextAliasing: []

.....
-----
Block: 2694
2694Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0aaa', 'SWAP2', 'SWAP1', 'PUSH2 0x1a31', 'JUMP']>> 
2694-Stack size: 6 
2694-Equals Mem:<< [<18,6>]>> 
2694-NonEquals Mem: << []>> 
2694-Equals Sto:<< []>> 
2694-NonEquals Sto: << []>> 
2694-Useless: []
2694-Constancy: []
2694-ContextAliasing: []

.....
-----
Block: 6257_38
6257_38Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_38-Stack size: 20 
6257_38-Equals Mem:<< []>> 
6257_38-NonEquals Mem: << [<5,8>]>> 
6257_38-Equals Sto:<< []>> 
6257_38-NonEquals Sto: << []>> 
6257_38-Useless: []
6257_38-Constancy: [(11, 0), (7, 0)]
6257_38-ContextAliasing: []

.....
-----
Block: 6257_37
6257_37Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_37-Stack size: 16 
6257_37-Equals Mem:<< []>> 
6257_37-NonEquals Mem: << [<5,8>]>> 
6257_37-Equals Sto:<< []>> 
6257_37-NonEquals Sto: << []>> 
6257_37-Useless: []
6257_37-Constancy: [(7, 0), (3, 0)]
6257_37-ContextAliasing: []

.....
-----
Block: 6257_36
6257_36Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_36-Stack size: 15 
6257_36-Equals Mem:<< []>> 
6257_36-NonEquals Mem: << [<5,8>]>> 
6257_36-Equals Sto:<< []>> 
6257_36-NonEquals Sto: << []>> 
6257_36-Useless: []
6257_36-Constancy: [(6, 0), (2, 0)]
6257_36-ContextAliasing: []

.....
-----
Block: 435_0
435_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
435_0-Stack size: 3 
435_0-Equals Mem:<< []>> 
435_0-NonEquals Mem: << [<7,2>]>> 
435_0-Equals Sto:<< []>> 
435_0-NonEquals Sto: << []>> 
435_0-Useless: []
435_0-Constancy: []
435_0-ContextAliasing: []

.....
-----
Block: 472
472Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
472-Stack size: 3 
472-Equals Mem:<< []>> 
472-NonEquals Mem: << [<5,2>]>> 
472-Equals Sto:<< []>> 
472-NonEquals Sto: << []>> 
472-Useless: []
472-Constancy: []
472-ContextAliasing: []

.....
-----
Block: 3278_0
3278_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3278_0-Stack size: 9 
3278_0-Equals Mem:<< []>> 
3278_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3278_0-Equals Sto:<< []>> 
3278_0-NonEquals Sto: << []>> 
3278_0-Useless: []
3278_0-Constancy: [(4, 0)]
3278_0-ContextAliasing: []

.....
-----
Block: 3378_0
3378_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3378_0-Stack size: 9 
3378_0-Equals Mem:<< []>> 
3378_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3378_0-Equals Sto:<< []>> 
3378_0-NonEquals Sto: << []>> 
3378_0-Useless: []
3378_0-Constancy: [(4, 0)]
3378_0-ContextAliasing: []

.....
-----
Block: 3469_0
3469_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3469_0-Stack size: 9 
3469_0-Equals Mem:<< []>> 
3469_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3469_0-Equals Sto:<< []>> 
3469_0-NonEquals Sto: << []>> 
3469_0-Useless: []
3469_0-Constancy: [(4, 0)]
3469_0-ContextAliasing: []

.....
-----
Block: 3607_0
3607_0Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e56', 'JUMPI']>> 
3607_0-Stack size: 10 
3607_0-Equals Mem:<< []>> 
3607_0-NonEquals Mem: << [<10,13>]>> 
3607_0-Equals Sto:<< []>> 
3607_0-NonEquals Sto: << []>> 
3607_0-Useless: []
3607_0-Constancy: [(5, 0), (0, 0)]
3607_0-ContextAliasing: []

.....
-----
Block: 3641_0
3641_0Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3641_0-Stack size: 11 
3641_0-Equals Mem:<< []>> 
3641_0-NonEquals Mem: << [<11,14>]>> 
3641_0-Equals Sto:<< []>> 
3641_0-NonEquals Sto: << []>> 
3641_0-Useless: []
3641_0-Constancy: [(6, 0), (1, 0)]
3641_0-ContextAliasing: []

.....
-----
Block: 5434_1
5434_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x162e', 'JUMP']>> 
5434_1-Stack size: 13 
5434_1-Equals Mem:<< [<11,6>]>> 
5434_1-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5434_1-Equals Sto:<< []>> 
5434_1-NonEquals Sto: << []>> 
5434_1-Useless: []
5434_1-Constancy: [(8, 0), (3, 0)]
5434_1-ContextAliasing: []

.....
-----
Block: 5686_2
5686_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
5686_2-Stack size: 20 
5686_2-Equals Mem:<< []>> 
5686_2-NonEquals Mem: << [<6,1>]>> 
5686_2-Equals Sto:<< []>> 
5686_2-NonEquals Sto: << []>> 
5686_2-Useless: []
5686_2-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
5686_2-ContextAliasing: [(2, 19)]

.....
-----
Block: 5722_10
5722_10Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_10-Stack size: 22 
5722_10-Equals Mem:<< []>> 
5722_10-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_10-Equals Sto:<< []>> 
5722_10-NonEquals Sto: << []>> 
5722_10-Useless: []
5722_10-Constancy: [(17, 0), (12, 0), (8, 0), (3, 0)]
5722_10-ContextAliasing: [(4, 20)]

.....
-----
Block: 5746_10
5746_10Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_10-Stack size: 26 
5746_10-Equals Mem:<< []>> 
5746_10-NonEquals Mem: << [<11,5>]>> 
5746_10-Equals Sto:<< []>> 
5746_10-NonEquals Sto: << []>> 
5746_10-Useless: []
5746_10-Constancy: [(21, 0), (16, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_10-ContextAliasing: [(8, 20)]

.....
-----
Block: 6892_5
6892_5Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892_5-Stack size: 24 
6892_5-Equals Mem:<< []>> 
6892_5-NonEquals Mem: << [<4,7>]>> 
6892_5-Equals Sto:<< []>> 
6892_5-NonEquals Sto: << []>> 
6892_5-Useless: []
6892_5-Constancy: [(19, 0), (14, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6892_5-ContextAliasing: []

.....
-----
Block: 3786_0
3786_0Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f5e', 'JUMPI']>> 
3786_0-Stack size: 10 
3786_0-Equals Mem:<< []>> 
3786_0-NonEquals Mem: << [<4,7>]>> 
3786_0-Equals Sto:<< []>> 
3786_0-NonEquals Sto: << []>> 
3786_0-Useless: []
3786_0-Constancy: [(5, 0)]
3786_0-ContextAliasing: []

.....
-----
Block: 3807_0
3807_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3807_0-Stack size: 10 
3807_0-Equals Mem:<< []>> 
3807_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <26,1>, <33,1>]>> 
3807_0-Equals Sto:<< []>> 
3807_0-NonEquals Sto: << []>> 
3807_0-Useless: []
3807_0-Constancy: [(5, 0)]
3807_0-ContextAliasing: []

.....
-----
Block: 3934_0
3934_0Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3934_0-Stack size: 10 
3934_0-Equals Mem:<< []>> 
3934_0-NonEquals Mem: << [<5,8>]>> 
3934_0-Equals Sto:<< []>> 
3934_0-NonEquals Sto: << []>> 
3934_0-Useless: []
3934_0-Constancy: [(5, 0)]
3934_0-ContextAliasing: []

.....
-----
Block: 4002_0
4002_0Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
4002_0-Stack size: 11 
4002_0-Equals Mem:<< []>> 
4002_0-NonEquals Mem: << [<11,14>]>> 
4002_0-Equals Sto:<< []>> 
4002_0-NonEquals Sto: << []>> 
4002_0-Useless: []
4002_0-Constancy: [(6, 0)]
4002_0-ContextAliasing: []

.....
-----
Block: 4047_0
4047_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
4047_0-Stack size: 10 
4047_0-Equals Mem:<< []>> 
4047_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4047_0-Equals Sto:<< []>> 
4047_0-NonEquals Sto: << []>> 
4047_0-Useless: []
4047_0-Constancy: [(5, 0)]
4047_0-ContextAliasing: []

.....
-----
Block: 4118_0
4118_0Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x1038', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4118_0-Stack size: 10 
4118_0-Equals Mem:<< []>> 
4118_0-NonEquals Mem: << [<15,18>]>> 
4118_0-Equals Sto:<< []>> 
4118_0-NonEquals Sto: << [<2,22>]>> 
4118_0-Useless: []
4118_0-Constancy: [(5, 0)]
4118_0-ContextAliasing: []

.....
-----
Block: 6257_33
6257_33Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_33-Stack size: 16 
6257_33-Equals Mem:<< []>> 
6257_33-NonEquals Mem: << [<5,8>]>> 
6257_33-Equals Sto:<< []>> 
6257_33-NonEquals Sto: << []>> 
6257_33-Useless: []
6257_33-Constancy: [(11, 0)]
6257_33-ContextAliasing: []

.....
-----
Block: 4169_0
4169_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
4169_0-Stack size: 10 
4169_0-Equals Mem:<< []>> 
4169_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4169_0-Equals Sto:<< []>> 
4169_0-NonEquals Sto: << []>> 
4169_0-Useless: []
4169_0-Constancy: [(5, 0)]
4169_0-ContextAliasing: []

.....
-----
Block: 6257_32
6257_32Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_32-Stack size: 17 
6257_32-Equals Mem:<< []>> 
6257_32-NonEquals Mem: << [<5,8>]>> 
6257_32-Equals Sto:<< []>> 
6257_32-NonEquals Sto: << []>> 
6257_32-Useless: []
6257_32-Constancy: [(12, 0), (4, 0), (1, 0)]
6257_32-ContextAliasing: []

.....
-----
Block: 5434_2
5434_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x162e', 'JUMP']>> 
5434_2-Stack size: 13 
5434_2-Equals Mem:<< [<11,6>]>> 
5434_2-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5434_2-Equals Sto:<< []>> 
5434_2-NonEquals Sto: << []>> 
5434_2-Useless: []
5434_2-Constancy: [(8, 0)]
5434_2-ContextAliasing: []

.....
-----
Block: 5686_1
5686_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
5686_1-Stack size: 20 
5686_1-Equals Mem:<< []>> 
5686_1-NonEquals Mem: << [<6,1>]>> 
5686_1-Equals Sto:<< []>> 
5686_1-NonEquals Sto: << []>> 
5686_1-Useless: []
5686_1-Constancy: [(15, 0), (6, 0), (1, 0)]
5686_1-ContextAliasing: [(2, 19)]

.....
-----
Block: 5722_9
5722_9Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_9-Stack size: 22 
5722_9-Equals Mem:<< []>> 
5722_9-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_9-Equals Sto:<< []>> 
5722_9-NonEquals Sto: << []>> 
5722_9-Useless: []
5722_9-Constancy: [(17, 0), (8, 0), (3, 0)]
5722_9-ContextAliasing: [(4, 20)]

.....
-----
Block: 5746_9
5746_9Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_9-Stack size: 26 
5746_9-Equals Mem:<< []>> 
5746_9-NonEquals Mem: << [<11,5>]>> 
5746_9-Equals Sto:<< []>> 
5746_9-NonEquals Sto: << []>> 
5746_9-Useless: []
5746_9-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_9-ContextAliasing: [(8, 20)]

.....
-----
Block: 6892_3
6892_3Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892_3-Stack size: 24 
6892_3-Equals Mem:<< []>> 
6892_3-NonEquals Mem: << [<4,7>]>> 
6892_3-Equals Sto:<< []>> 
6892_3-NonEquals Sto: << []>> 
6892_3-Useless: []
6892_3-Constancy: [(19, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6892_3-ContextAliasing: []

.....
-----
Block: 6257_31
6257_31Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_31-Stack size: 22 
6257_31-Equals Mem:<< []>> 
6257_31-NonEquals Mem: << [<5,8>]>> 
6257_31-Equals Sto:<< []>> 
6257_31-NonEquals Sto: << []>> 
6257_31-Useless: []
6257_31-Constancy: [(17, 0), (6, 0), (5, 0)]
6257_31-ContextAliasing: []

.....
-----
Block: 6892_4
6892_4Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892_4-Stack size: 22 
6892_4-Equals Mem:<< []>> 
6892_4-NonEquals Mem: << [<4,7>]>> 
6892_4-Equals Sto:<< []>> 
6892_4-NonEquals Sto: << []>> 
6892_4-Useless: []
6892_4-Constancy: [(17, 0), (6, 0), (0, 0)]
6892_4-ContextAliasing: []

.....
-----
Block: 5346_1
5346_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5346_1-Stack size: 17 
5346_1-Equals Mem:<< []>> 
5346_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5346_1-Equals Sto:<< []>> 
5346_1-NonEquals Sto: << []>> 
5346_1-Useless: []
5346_1-Constancy: [(12, 0), (1, 0)]
5346_1-ContextAliasing: []

.....
-----
Block: 4344_0
4344_0Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x112e', 'JUMPI']>> 
4344_0-Stack size: 10 
4344_0-Equals Mem:<< []>> 
4344_0-NonEquals Mem: << [<5,8>]>> 
4344_0-Equals Sto:<< []>> 
4344_0-NonEquals Sto: << [<12,14>]>> 
4344_0-Useless: []
4344_0-Constancy: [(5, 0)]
4344_0-ContextAliasing: []

.....
-----
Block: 6591_5
6591_5Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591_5-Stack size: 18 
6591_5-Equals Mem:<< []>> 
6591_5-NonEquals Mem: << [<5,8>]>> 
6591_5-Equals Sto:<< []>> 
6591_5-NonEquals Sto: << []>> 
6591_5-Useless: []
6591_5-Constancy: [(13, 0), (1, 0)]
6591_5-ContextAliasing: [(4, 15)]

.....
-----
Block: 5031_1
5031_1Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x13cb', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
5031_1-Stack size: 18 
5031_1-Equals Mem:<< [<18,6>]>> 
5031_1-NonEquals Mem: << []>> 
5031_1-Equals Sto:<< []>> 
5031_1-NonEquals Sto: << []>> 
5031_1-Useless: []
5031_1-Constancy: [(13, 0)]
5031_1-ContextAliasing: []

.....
-----
Block: 6591_4
6591_4Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591_4-Stack size: 18 
6591_4-Equals Mem:<< []>> 
6591_4-NonEquals Mem: << [<5,8>]>> 
6591_4-Equals Sto:<< []>> 
6591_4-NonEquals Sto: << []>> 
6591_4-Useless: []
6591_4-Constancy: [(13, 0)]
6591_4-ContextAliasing: [(4, 15)]

.....
-----
Block: 2987_3
2987_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
2987_3-Stack size: 18 
2987_3-Equals Mem:<< []>> 
2987_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2987_3-Equals Sto:<< []>> 
2987_3-NonEquals Sto: << []>> 
2987_3-Useless: []
2987_3-Constancy: [(13, 0)]
2987_3-ContextAliasing: []

.....
-----
Block: 3085_3
3085_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3085_3-Stack size: 18 
3085_3-Equals Mem:<< []>> 
3085_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3085_3-Equals Sto:<< []>> 
3085_3-NonEquals Sto: << []>> 
3085_3-Useless: []
3085_3-Constancy: [(13, 0)]
3085_3-ContextAliasing: []

.....
-----
Block: 5124_1
5124_1Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x143c', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1a76', 'JUMP']>> 
5124_1-Stack size: 14 
5124_1-Equals Mem:<< []>> 
5124_1-NonEquals Mem: << [<9,4>]>> 
5124_1-Equals Sto:<< []>> 
5124_1-NonEquals Sto: << []>> 
5124_1-Useless: []
5124_1-Constancy: [(9, 0)]
5124_1-ContextAliasing: []

.....
-----
Block: 6774_1
6774_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6774_1-Stack size: 23 
6774_1-Equals Mem:<< []>> 
6774_1-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6774_1-Equals Sto:<< []>> 
6774_1-NonEquals Sto: << []>> 
6774_1-Useless: []
6774_1-Constancy: [(18, 0), (4, 0)]
6774_1-ContextAliasing: [(9, 19)]

.....
-----
Block: 6824_1
6824_1Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1a9f', 'JUMP']>> 
6824_1-Stack size: 29 
6824_1-Equals Mem:<< []>> 
6824_1-NonEquals Mem: << [<9,1>]>> 
6824_1-Equals Sto:<< []>> 
6824_1-NonEquals Sto: << []>> 
6824_1-Useless: []
6824_1-Constancy: [(24, 0), (10, 0), (5, 0), (3, 32)]
6824_1-ContextAliasing: [(15, 19)]

.....
-----
Block: 6257_34
6257_34Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_34-Stack size: 22 
6257_34-Equals Mem:<< []>> 
6257_34-NonEquals Mem: << [<5,8>]>> 
6257_34-Equals Sto:<< []>> 
6257_34-NonEquals Sto: << []>> 
6257_34-Useless: []
6257_34-Constancy: [(17, 0), (12, 0), (6, 0), (5, 0)]
6257_34-ContextAliasing: []

.....
-----
Block: 6892_6
6892_6Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892_6-Stack size: 22 
6892_6-Equals Mem:<< []>> 
6892_6-NonEquals Mem: << [<4,7>]>> 
6892_6-Equals Sto:<< []>> 
6892_6-NonEquals Sto: << []>> 
6892_6-Useless: []
6892_6-Constancy: [(17, 0), (12, 0), (6, 0), (0, 0)]
6892_6-ContextAliasing: []

.....
-----
Block: 5346_2
5346_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5346_2-Stack size: 17 
5346_2-Equals Mem:<< []>> 
5346_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5346_2-Equals Sto:<< []>> 
5346_2-NonEquals Sto: << []>> 
5346_2-Useless: []
5346_2-Constancy: [(12, 0), (7, 0), (1, 0)]
5346_2-ContextAliasing: []

.....
-----
Block: 4508_0
4508_0Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x11b4', 'SWAP1', 'DUP3', 'PUSH2 0x158f', 'JUMP']>> 
4508_0-Stack size: 10 
4508_0-Equals Mem:<< []>> 
4508_0-NonEquals Mem: << [<4,7>]>> 
4508_0-Equals Sto:<< []>> 
4508_0-NonEquals Sto: << []>> 
4508_0-Useless: []
4508_0-Constancy: [(5, 0)]
4508_0-ContextAliasing: []

.....
-----
Block: 6257_30
6257_30Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_30-Stack size: 20 
6257_30-Equals Mem:<< []>> 
6257_30-NonEquals Mem: << [<5,8>]>> 
6257_30-Equals Sto:<< []>> 
6257_30-NonEquals Sto: << []>> 
6257_30-Useless: []
6257_30-Constancy: [(15, 0), (6, 0), (5, 0)]
6257_30-ContextAliasing: []

.....
-----
Block: 5542_2
5542_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5542_2-Stack size: 15 
5542_2-Equals Mem:<< []>> 
5542_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5542_2-Equals Sto:<< []>> 
5542_2-NonEquals Sto: << []>> 
5542_2-Useless: []
5542_2-Constancy: [(10, 0), (1, 0)]
5542_2-ContextAliasing: []

.....
-----
Block: 4532_0
4532_0Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1204', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4532_0-Stack size: 11 
4532_0-Equals Mem:<< []>> 
4532_0-NonEquals Mem: << [<5,19>, <5,8>, <5,34>, <8,19>, <8,34>, <34,13>, <34,19>, <13,19>]>> 
4532_0-Equals Sto:<< []>> 
4532_0-NonEquals Sto: << []>> 
4532_0-Useless: []
4532_0-Constancy: [(6, 0)]
4532_0-ContextAliasing: []

.....
-----
Block: 4621_0
4621_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x122f', 'SWAP1', 'DUP4', 'PUSH2 0x15ed', 'JUMP']>> 
4621_0-Stack size: 10 
4621_0-Equals Mem:<< []>> 
4621_0-NonEquals Mem: << [<11,14>]>> 
4621_0-Equals Sto:<< []>> 
4621_0-NonEquals Sto: << []>> 
4621_0-Useless: []
4621_0-Constancy: [(5, 0)]
4621_0-ContextAliasing: []

.....
-----
Block: 5613_2
5613_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12d2', 'JUMP']>> 
5613_2-Stack size: 13 
5613_2-Equals Mem:<< [<11,6>]>> 
5613_2-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5613_2-Equals Sto:<< []>> 
5613_2-NonEquals Sto: << []>> 
5613_2-Useless: []
5613_2-Constancy: [(8, 0)]
5613_2-ContextAliasing: []

.....
-----
Block: 4829_5
4829_5Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
4829_5-Stack size: 20 
4829_5-Equals Mem:<< []>> 
4829_5-NonEquals Mem: << [<6,1>]>> 
4829_5-Equals Sto:<< []>> 
4829_5-NonEquals Sto: << []>> 
4829_5-Useless: []
4829_5-Constancy: [(15, 0), (6, 0), (1, 0)]
4829_5-ContextAliasing: [(2, 19)]

.....
-----
Block: 5722_8
5722_8Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_8-Stack size: 22 
5722_8-Equals Mem:<< []>> 
5722_8-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_8-Equals Sto:<< []>> 
5722_8-NonEquals Sto: << []>> 
5722_8-Useless: []
5722_8-Constancy: [(17, 0), (8, 0), (3, 0)]
5722_8-ContextAliasing: [(4, 20)]

.....
-----
Block: 5746_8
5746_8Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_8-Stack size: 26 
5746_8-Equals Mem:<< []>> 
5746_8-NonEquals Mem: << [<11,5>]>> 
5746_8-Equals Sto:<< []>> 
5746_8-NonEquals Sto: << []>> 
5746_8-Useless: []
5746_8-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_8-ContextAliasing: [(8, 20)]

.....
-----
Block: 6257_29
6257_29Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_29-Stack size: 25 
6257_29-Equals Mem:<< []>> 
6257_29-NonEquals Mem: << [<5,8>]>> 
6257_29-Equals Sto:<< []>> 
6257_29-NonEquals Sto: << []>> 
6257_29-Useless: []
6257_29-Constancy: [(20, 0), (11, 0), (6, 0), (5, 0)]
6257_29-ContextAliasing: []

.....
-----
Block: 4655_0
4655_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x1272', 'PUSH2 0x1254', 'DUP4', 'DUP4', 'PUSH2 0x15ed', 'JUMP']>> 
4655_0-Stack size: 11 
4655_0-Equals Mem:<< []>> 
4655_0-NonEquals Mem: << [<11,14>]>> 
4655_0-Equals Sto:<< []>> 
4655_0-NonEquals Sto: << []>> 
4655_0-Useless: []
4655_0-Constancy: [(6, 0)]
4655_0-ContextAliasing: []

.....
-----
Block: 5613_3
5613_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12d2', 'JUMP']>> 
5613_3-Stack size: 14 
5613_3-Equals Mem:<< [<11,6>]>> 
5613_3-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5613_3-Equals Sto:<< []>> 
5613_3-NonEquals Sto: << []>> 
5613_3-Useless: []
5613_3-Constancy: [(9, 0)]
5613_3-ContextAliasing: []

.....
-----
Block: 4829_4
4829_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
4829_4-Stack size: 21 
4829_4-Equals Mem:<< []>> 
4829_4-NonEquals Mem: << [<6,1>]>> 
4829_4-Equals Sto:<< []>> 
4829_4-NonEquals Sto: << []>> 
4829_4-Useless: []
4829_4-Constancy: [(16, 0), (6, 0), (1, 0)]
4829_4-ContextAliasing: [(2, 20)]

.....
-----
Block: 5722_7
5722_7Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_7-Stack size: 23 
5722_7-Equals Mem:<< []>> 
5722_7-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_7-Equals Sto:<< []>> 
5722_7-NonEquals Sto: << []>> 
5722_7-Useless: []
5722_7-Constancy: [(18, 0), (8, 0), (3, 0)]
5722_7-ContextAliasing: [(4, 21)]

.....
-----
Block: 5746_7
5746_7Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_7-Stack size: 27 
5746_7-Equals Mem:<< []>> 
5746_7-NonEquals Mem: << [<11,5>]>> 
5746_7-Equals Sto:<< []>> 
5746_7-NonEquals Sto: << []>> 
5746_7-Useless: []
5746_7-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_7-ContextAliasing: [(8, 21)]

.....
-----
Block: 6257_28
6257_28Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_28-Stack size: 26 
6257_28-Equals Mem:<< []>> 
6257_28-NonEquals Mem: << [<5,8>]>> 
6257_28-Equals Sto:<< []>> 
6257_28-NonEquals Sto: << []>> 
6257_28-Useless: []
6257_28-Constancy: [(21, 0), (11, 0), (6, 0), (5, 0)]
6257_28-ContextAliasing: []

.....
-----
Block: 4692_0
4692_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x158f', 'JUMP']>> 
4692_0-Stack size: 12 
4692_0-Equals Mem:<< []>> 
4692_0-NonEquals Mem: << [<11,14>]>> 
4692_0-Equals Sto:<< []>> 
4692_0-NonEquals Sto: << []>> 
4692_0-Useless: []
4692_0-Constancy: [(7, 0)]
4692_0-ContextAliasing: []

.....
-----
Block: 6257_27
6257_27Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_27-Stack size: 20 
6257_27-Equals Mem:<< []>> 
6257_27-NonEquals Mem: << [<5,8>]>> 
6257_27-Equals Sto:<< []>> 
6257_27-NonEquals Sto: << []>> 
6257_27-Useless: []
6257_27-Constancy: [(15, 0), (6, 0), (5, 0)]
6257_27-ContextAliasing: []

.....
-----
Block: 5542_1
5542_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5542_1-Stack size: 15 
5542_1-Equals Mem:<< []>> 
5542_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5542_1-Equals Sto:<< []>> 
5542_1-NonEquals Sto: << []>> 
5542_1-Useless: []
5542_1-Constancy: [(10, 0), (1, 0)]
5542_1-ContextAliasing: []

.....
-----
Block: 4722_0
4722_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x12bb', 'DUP6', 'DUP6', 'PUSH2 0x15ed', 'JUMP']>> 
4722_0-Stack size: 11 
4722_0-Equals Mem:<< []>> 
4722_0-NonEquals Mem: << [<12,15>]>> 
4722_0-Equals Sto:<< []>> 
4722_0-NonEquals Sto: << []>> 
4722_0-Useless: []
4722_0-Constancy: [(6, 0)]
4722_0-ContextAliasing: []

.....
-----
Block: 5613_4
5613_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12d2', 'JUMP']>> 
5613_4-Stack size: 16 
5613_4-Equals Mem:<< [<11,6>]>> 
5613_4-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5613_4-Equals Sto:<< []>> 
5613_4-NonEquals Sto: << []>> 
5613_4-Useless: []
5613_4-Constancy: [(11, 0)]
5613_4-ContextAliasing: []

.....
-----
Block: 4829_3
4829_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
4829_3-Stack size: 23 
4829_3-Equals Mem:<< []>> 
4829_3-NonEquals Mem: << [<6,1>]>> 
4829_3-Equals Sto:<< []>> 
4829_3-NonEquals Sto: << []>> 
4829_3-Useless: []
4829_3-Constancy: [(18, 0), (6, 0), (1, 0)]
4829_3-ContextAliasing: [(2, 22)]

.....
-----
Block: 5722_6
5722_6Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_6-Stack size: 25 
5722_6-Equals Mem:<< []>> 
5722_6-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_6-Equals Sto:<< []>> 
5722_6-NonEquals Sto: << []>> 
5722_6-Useless: []
5722_6-Constancy: [(20, 0), (8, 0), (3, 0)]
5722_6-ContextAliasing: [(4, 23)]

.....
-----
Block: 5746_6
5746_6Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_6-Stack size: 29 
5746_6-Equals Mem:<< []>> 
5746_6-NonEquals Mem: << [<11,5>]>> 
5746_6-Equals Sto:<< []>> 
5746_6-NonEquals Sto: << []>> 
5746_6-Useless: []
5746_6-Constancy: [(24, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_6-ContextAliasing: [(8, 23)]

.....
-----
Block: 6257_26
6257_26Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_26-Stack size: 28 
6257_26-Equals Mem:<< []>> 
6257_26-NonEquals Mem: << [<5,8>]>> 
6257_26-Equals Sto:<< []>> 
6257_26-NonEquals Sto: << []>> 
6257_26-Useless: []
6257_26-Constancy: [(23, 0), (11, 0), (6, 0), (5, 0)]
6257_26-ContextAliasing: []

.....
-----
Block: 435
435Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
435-Stack size: 2 
435-Equals Mem:<< []>> 
435-NonEquals Mem: << [<7,2>]>> 
435-Equals Sto:<< []>> 
435-NonEquals Sto: << []>> 
435-Useless: []
435-Constancy: []
435-ContextAliasing: []

.....
-----
Block: 855
855Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH8 0x484f4e474b4f4e47', 'PUSH1 0xc0', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x017e', 'JUMP']>> 
855-Stack size: 2 
855-Equals Mem:<< [<10,4>]>> 
855-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
855-Equals Sto:<< []>> 
855-NonEquals Sto: << []>> 
855-Useless: []
855-Constancy: []
855-ContextAliasing: []

.....
-----
Block: 5722
5722Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722-Stack size: 4 
5722-Equals Mem:<< []>> 
5722-NonEquals Mem: << [<5,7>, <5,12>, <12,7>]>> 
5722-Equals Sto:<< []>> 
5722-NonEquals Sto: << []>> 
5722-Useless: []
5722-Constancy: []
5722-ContextAliasing: []

.....
-----
Block: 5746
5746Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746-Stack size: 8 
5746-Equals Mem:<< []>> 
5746-NonEquals Mem: << [<11,5>]>> 
5746-Equals Sto:<< []>> 
5746-NonEquals Sto: << []>> 
5746-Useless: []
5746-Constancy: [(3, 0), (2, 32)]
5746-ContextAliasing: []

.....
-----
Block: 796
796Instr:<<['JUMPDEST', 'POP', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
796-Stack size: 2 
796-Equals Mem:<< []>> 
796-NonEquals Mem: << [<15,5>]>> 
796-Equals Sto:<< []>> 
796-NonEquals Sto: << []>> 
796-Useless: []
796-Constancy: []
796-ContextAliasing: []

.....
-----
Block: 1642
1642Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
1642-Stack size: 2 
1642-Equals Mem:<< []>> 
1642-NonEquals Mem: << [<6,1>]>> 
1642-Equals Sto:<< []>> 
1642-NonEquals Sto: << []>> 
1642-Useless: []
1642-Constancy: []
1642-ContextAliasing: []

.....
-----
Block: 6257_22
6257_22Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_22-Stack size: 7 
6257_22-Equals Mem:<< []>> 
6257_22-NonEquals Mem: << [<5,8>]>> 
6257_22-Equals Sto:<< []>> 
6257_22-NonEquals Sto: << []>> 
6257_22-Useless: []
6257_22-Constancy: []
6257_22-ContextAliasing: []

.....
-----
Block: 6257_18
6257_18Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_18-Stack size: 7 
6257_18-Equals Mem:<< []>> 
6257_18-NonEquals Mem: << [<5,8>]>> 
6257_18-Equals Sto:<< []>> 
6257_18-NonEquals Sto: << []>> 
6257_18-Useless: []
6257_18-Constancy: []
6257_18-ContextAliasing: []

.....
-----
Block: 6257_14
6257_14Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_14-Stack size: 8 
6257_14-Equals Mem:<< []>> 
6257_14-NonEquals Mem: << [<5,8>]>> 
6257_14-Equals Sto:<< []>> 
6257_14-NonEquals Sto: << []>> 
6257_14-Useless: []
6257_14-Constancy: []
6257_14-ContextAliasing: []

.....
-----
Block: 6257_17
6257_17Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_17-Stack size: 18 
6257_17-Equals Mem:<< []>> 
6257_17-NonEquals Mem: << [<5,8>]>> 
6257_17-Equals Sto:<< []>> 
6257_17-NonEquals Sto: << []>> 
6257_17-Useless: []
6257_17-Constancy: [(11, 0), (7, 0)]
6257_17-ContextAliasing: []

.....
-----
Block: 6257_16
6257_16Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_16-Stack size: 14 
6257_16-Equals Mem:<< []>> 
6257_16-NonEquals Mem: << [<5,8>]>> 
6257_16-Equals Sto:<< []>> 
6257_16-NonEquals Sto: << []>> 
6257_16-Useless: []
6257_16-Constancy: [(7, 0), (3, 0)]
6257_16-ContextAliasing: []

.....
-----
Block: 6257_15
6257_15Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_15-Stack size: 13 
6257_15-Equals Mem:<< []>> 
6257_15-NonEquals Mem: << [<5,8>]>> 
6257_15-Equals Sto:<< []>> 
6257_15-NonEquals Sto: << []>> 
6257_15-Useless: []
6257_15-Constancy: [(6, 0), (2, 0)]
6257_15-ContextAliasing: []

.....
-----
Block: 6257_21
6257_21Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_21-Stack size: 17 
6257_21-Equals Mem:<< []>> 
6257_21-NonEquals Mem: << [<5,8>]>> 
6257_21-Equals Sto:<< []>> 
6257_21-NonEquals Sto: << []>> 
6257_21-Useless: []
6257_21-Constancy: [(11, 0), (7, 0)]
6257_21-ContextAliasing: []

.....
-----
Block: 6257_20
6257_20Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_20-Stack size: 13 
6257_20-Equals Mem:<< []>> 
6257_20-NonEquals Mem: << [<5,8>]>> 
6257_20-Equals Sto:<< []>> 
6257_20-NonEquals Sto: << []>> 
6257_20-Useless: []
6257_20-Constancy: [(7, 0), (3, 0)]
6257_20-ContextAliasing: []

.....
-----
Block: 6257_19
6257_19Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_19-Stack size: 12 
6257_19-Equals Mem:<< []>> 
6257_19-NonEquals Mem: << [<5,8>]>> 
6257_19-Equals Sto:<< []>> 
6257_19-NonEquals Sto: << []>> 
6257_19-Useless: []
6257_19-Constancy: [(6, 0), (2, 0)]
6257_19-ContextAliasing: []

.....
-----
Block: 6257_25
6257_25Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_25-Stack size: 17 
6257_25-Equals Mem:<< []>> 
6257_25-NonEquals Mem: << [<5,8>]>> 
6257_25-Equals Sto:<< []>> 
6257_25-NonEquals Sto: << []>> 
6257_25-Useless: []
6257_25-Constancy: [(11, 0), (7, 0)]
6257_25-ContextAliasing: []

.....
-----
Block: 6257_24
6257_24Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_24-Stack size: 13 
6257_24-Equals Mem:<< []>> 
6257_24-NonEquals Mem: << [<5,8>]>> 
6257_24-Equals Sto:<< []>> 
6257_24-NonEquals Sto: << []>> 
6257_24-Useless: []
6257_24-Constancy: [(7, 0), (3, 0)]
6257_24-ContextAliasing: []

.....
-----
Block: 6257_23
6257_23Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_23-Stack size: 12 
6257_23-Equals Mem:<< []>> 
6257_23-NonEquals Mem: << [<5,8>]>> 
6257_23-Equals Sto:<< []>> 
6257_23-NonEquals Sto: << []>> 
6257_23-Useless: []
6257_23-Constancy: [(6, 0), (2, 0)]
6257_23-ContextAliasing: []

.....
-----
Block: 1529
1529Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
1529-Stack size: 2 
1529-Equals Mem:<< []>> 
1529-NonEquals Mem: << [<6,1>]>> 
1529-Equals Sto:<< []>> 
1529-NonEquals Sto: << []>> 
1529-Useless: []
1529-Constancy: []
1529-ContextAliasing: []

.....
-----
Block: 698
698Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
698-Stack size: 3 
698-Equals Mem:<< []>> 
698-NonEquals Mem: << [<10,13>]>> 
698-Equals Sto:<< []>> 
698-NonEquals Sto: << []>> 
698-Useless: []
698-Constancy: []
698-ContextAliasing: []

.....
-----
Block: 1465
1465Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'DUP1', 'ISZERO', 'PUSH2 0x05d7', 'JUMPI']>> 
1465-Stack size: 2 
1465-Equals Mem:<< []>> 
1465-NonEquals Mem: << [<5,8>]>> 
1465-Equals Sto:<< []>> 
1465-NonEquals Sto: << []>> 
1465-Useless: []
1465-Constancy: []
1465-ContextAliasing: []

.....
-----
Block: 6591_3
6591_3Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591_3-Stack size: 10 
6591_3-Equals Mem:<< []>> 
6591_3-NonEquals Mem: << [<5,8>]>> 
6591_3-Equals Sto:<< []>> 
6591_3-NonEquals Sto: << []>> 
6591_3-Useless: []
6591_3-Constancy: [(1, 0)]
6591_3-ContextAliasing: [(4, 7)]

.....
-----
Block: 5031_0
5031_0Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x13cb', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
5031_0-Stack size: 10 
5031_0-Equals Mem:<< [<18,6>]>> 
5031_0-NonEquals Mem: << []>> 
5031_0-Equals Sto:<< []>> 
5031_0-NonEquals Sto: << []>> 
5031_0-Useless: []
5031_0-Constancy: []
5031_0-ContextAliasing: []

.....
-----
Block: 6591_2
6591_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591_2-Stack size: 10 
6591_2-Equals Mem:<< []>> 
6591_2-NonEquals Mem: << [<5,8>]>> 
6591_2-Equals Sto:<< []>> 
6591_2-NonEquals Sto: << []>> 
6591_2-Useless: []
6591_2-Constancy: []
6591_2-ContextAliasing: [(4, 7)]

.....
-----
Block: 2987_2
2987_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
2987_2-Stack size: 10 
2987_2-Equals Mem:<< []>> 
2987_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2987_2-Equals Sto:<< []>> 
2987_2-NonEquals Sto: << []>> 
2987_2-Useless: []
2987_2-Constancy: []
2987_2-ContextAliasing: []

.....
-----
Block: 3085_2
3085_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3085_2-Stack size: 10 
3085_2-Equals Mem:<< []>> 
3085_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3085_2-Equals Sto:<< []>> 
3085_2-NonEquals Sto: << []>> 
3085_2-Useless: []
3085_2-Constancy: []
3085_2-ContextAliasing: []

.....
-----
Block: 5124_0
5124_0Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x143c', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1a76', 'JUMP']>> 
5124_0-Stack size: 6 
5124_0-Equals Mem:<< []>> 
5124_0-NonEquals Mem: << [<9,4>]>> 
5124_0-Equals Sto:<< []>> 
5124_0-NonEquals Sto: << []>> 
5124_0-Useless: []
5124_0-Constancy: []
5124_0-ContextAliasing: []

.....
-----
Block: 6774_0
6774_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6774_0-Stack size: 15 
6774_0-Equals Mem:<< []>> 
6774_0-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6774_0-Equals Sto:<< []>> 
6774_0-NonEquals Sto: << []>> 
6774_0-Useless: []
6774_0-Constancy: [(4, 0)]
6774_0-ContextAliasing: [(9, 11)]

.....
-----
Block: 6824_0
6824_0Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1a9f', 'JUMP']>> 
6824_0-Stack size: 21 
6824_0-Equals Mem:<< []>> 
6824_0-NonEquals Mem: << [<9,1>]>> 
6824_0-Equals Sto:<< []>> 
6824_0-NonEquals Sto: << []>> 
6824_0-Useless: []
6824_0-Constancy: [(10, 0), (5, 0), (3, 32)]
6824_0-ContextAliasing: [(15, 11)]

.....
-----
Block: 623
623Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'SWAP1', 'JUMP']>> 
623-Stack size: 3 
623-Equals Mem:<< []>> 
623-NonEquals Mem: << [<10,13>]>> 
623-Equals Sto:<< []>> 
623-NonEquals Sto: << []>> 
623-Useless: []
623-Constancy: []
623-ContextAliasing: []

.....
-----
Block: 5940_0
5940_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5940_0-Stack size: 11 
5940_0-Equals Mem:<< []>> 
5940_0-NonEquals Mem: << [<5,8>]>> 
5940_0-Equals Sto:<< []>> 
5940_0-NonEquals Sto: << []>> 
5940_0-Useless: []
5940_0-Constancy: [(5, 0), (4, 32)]
5940_0-ContextAliasing: []

.....
-----
Block: 5940
5940Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5940-Stack size: 14 
5940-Equals Mem:<< []>> 
5940-NonEquals Mem: << [<5,8>]>> 
5940-Equals Sto:<< []>> 
5940-NonEquals Sto: << []>> 
5940-Useless: []
5940-Constancy: [(8, 0), (7, 32)]
5940-ContextAliasing: []

.....
-----
Block: 6074
6074Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x17d7', 'JUMPI']>> 
6074-Stack size: 13 
6074-Equals Mem:<< []>> 
6074-NonEquals Mem: << [<2,5>]>> 
6074-Equals Sto:<< []>> 
6074-NonEquals Sto: << []>> 
6074-Useless: []
6074-Constancy: [(7, 0), (6, 32)]
6074-ContextAliasing: []

.....
-----
Block: 1293
1293Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
1293-Stack size: 3 
1293-Equals Mem:<< []>> 
1293-NonEquals Mem: << [<6,1>]>> 
1293-Equals Sto:<< []>> 
1293-NonEquals Sto: << []>> 
1293-Useless: [6]
1293-Constancy: []
1293-ContextAliasing: []

.....
-----
Block: 6591_1
6591_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591_1-Stack size: 10 
6591_1-Equals Mem:<< []>> 
6591_1-NonEquals Mem: << [<5,8>]>> 
6591_1-Equals Sto:<< []>> 
6591_1-NonEquals Sto: << []>> 
6591_1-Useless: []
6591_1-Constancy: [(5, 0), (3, 0)]
6591_1-ContextAliasing: [(7, 7)]

.....
-----
Block: 1358
1358Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x0589', 'DUP2', 'PUSH2 0x19d3', 'JUMP']>> 
1358-Stack size: 9 
1358-Equals Mem:<< []>> 
1358-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
1358-Equals Sto:<< [<31,43>]>> 
1358-NonEquals Sto: << []>> 
1358-Useless: []
1358-Constancy: [(4, 0), (2, 0)]
1358-ContextAliasing: [(6, 7)]

.....
-----
Block: 6257_13
6257_13Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_13-Stack size: 9 
6257_13-Equals Mem:<< []>> 
6257_13-NonEquals Mem: << [<5,8>]>> 
6257_13-Equals Sto:<< []>> 
6257_13-NonEquals Sto: << []>> 
6257_13-Useless: []
6257_13-Constancy: [(1, 0)]
6257_13-ContextAliasing: []

.....
-----
Block: 548
548Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x09', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
548-Stack size: 2 
548-Equals Mem:<< []>> 
548-NonEquals Mem: << [<6,3>]>> 
548-Equals Sto:<< []>> 
548-NonEquals Sto: << []>> 
548-Useless: []
548-Constancy: []
548-ContextAliasing: []

.....
-----
Block: 3278
3278Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3278-Stack size: 10 
3278-Equals Mem:<< []>> 
3278-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3278-Equals Sto:<< []>> 
3278-NonEquals Sto: << []>> 
3278-Useless: []
3278-Constancy: [(4, 0)]
3278-ContextAliasing: []

.....
-----
Block: 3378
3378Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3378-Stack size: 10 
3378-Equals Mem:<< []>> 
3378-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3378-Equals Sto:<< []>> 
3378-NonEquals Sto: << []>> 
3378-Useless: []
3378-Constancy: [(4, 0)]
3378-ContextAliasing: []

.....
-----
Block: 3469
3469Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3469-Stack size: 10 
3469-Equals Mem:<< []>> 
3469-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3469-Equals Sto:<< []>> 
3469-NonEquals Sto: << []>> 
3469-Useless: []
3469-Constancy: [(4, 0)]
3469-ContextAliasing: []

.....
-----
Block: 3607
3607Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e56', 'JUMPI']>> 
3607-Stack size: 11 
3607-Equals Mem:<< []>> 
3607-NonEquals Mem: << [<10,13>]>> 
3607-Equals Sto:<< []>> 
3607-NonEquals Sto: << []>> 
3607-Useless: []
3607-Constancy: [(5, 0), (0, 0)]
3607-ContextAliasing: []

.....
-----
Block: 3641
3641Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3641-Stack size: 12 
3641-Equals Mem:<< []>> 
3641-NonEquals Mem: << [<11,14>]>> 
3641-Equals Sto:<< []>> 
3641-NonEquals Sto: << []>> 
3641-Useless: []
3641-Constancy: [(6, 0), (1, 0)]
3641-ContextAliasing: []

.....
-----
Block: 5434
5434Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x162e', 'JUMP']>> 
5434-Stack size: 14 
5434-Equals Mem:<< [<11,6>]>> 
5434-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5434-Equals Sto:<< []>> 
5434-NonEquals Sto: << []>> 
5434-Useless: []
5434-Constancy: [(8, 0), (3, 0)]
5434-ContextAliasing: []

.....
-----
Block: 5686_0
5686_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
5686_0-Stack size: 21 
5686_0-Equals Mem:<< []>> 
5686_0-NonEquals Mem: << [<6,1>]>> 
5686_0-Equals Sto:<< []>> 
5686_0-NonEquals Sto: << []>> 
5686_0-Useless: []
5686_0-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
5686_0-ContextAliasing: [(2, 20)]

.....
-----
Block: 5722_5
5722_5Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_5-Stack size: 23 
5722_5-Equals Mem:<< []>> 
5722_5-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_5-Equals Sto:<< []>> 
5722_5-NonEquals Sto: << []>> 
5722_5-Useless: []
5722_5-Constancy: [(17, 0), (12, 0), (8, 0), (3, 0)]
5722_5-ContextAliasing: [(4, 21)]

.....
-----
Block: 5746_5
5746_5Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_5-Stack size: 27 
5746_5-Equals Mem:<< []>> 
5746_5-NonEquals Mem: << [<11,5>]>> 
5746_5-Equals Sto:<< []>> 
5746_5-NonEquals Sto: << []>> 
5746_5-Useless: []
5746_5-Constancy: [(21, 0), (16, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_5-ContextAliasing: [(8, 21)]

.....
-----
Block: 6892_1
6892_1Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892_1-Stack size: 25 
6892_1-Equals Mem:<< []>> 
6892_1-NonEquals Mem: << [<4,7>]>> 
6892_1-Equals Sto:<< []>> 
6892_1-NonEquals Sto: << []>> 
6892_1-Useless: []
6892_1-Constancy: [(19, 0), (14, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6892_1-ContextAliasing: []

.....
-----
Block: 3786
3786Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f5e', 'JUMPI']>> 
3786-Stack size: 11 
3786-Equals Mem:<< []>> 
3786-NonEquals Mem: << [<4,7>]>> 
3786-Equals Sto:<< []>> 
3786-NonEquals Sto: << []>> 
3786-Useless: []
3786-Constancy: [(5, 0)]
3786-ContextAliasing: []

.....
-----
Block: 3807
3807Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3807-Stack size: 11 
3807-Equals Mem:<< []>> 
3807-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <26,1>, <33,1>]>> 
3807-Equals Sto:<< []>> 
3807-NonEquals Sto: << []>> 
3807-Useless: []
3807-Constancy: [(5, 0)]
3807-ContextAliasing: []

.....
-----
Block: 3934
3934Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3934-Stack size: 11 
3934-Equals Mem:<< []>> 
3934-NonEquals Mem: << [<5,8>]>> 
3934-Equals Sto:<< []>> 
3934-NonEquals Sto: << []>> 
3934-Useless: []
3934-Constancy: [(5, 0)]
3934-ContextAliasing: []

.....
-----
Block: 4002
4002Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
4002-Stack size: 12 
4002-Equals Mem:<< []>> 
4002-NonEquals Mem: << [<11,14>]>> 
4002-Equals Sto:<< []>> 
4002-NonEquals Sto: << []>> 
4002-Useless: []
4002-Constancy: [(6, 0)]
4002-ContextAliasing: []

.....
-----
Block: 4047
4047Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
4047-Stack size: 11 
4047-Equals Mem:<< []>> 
4047-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4047-Equals Sto:<< []>> 
4047-NonEquals Sto: << []>> 
4047-Useless: []
4047-Constancy: [(5, 0)]
4047-ContextAliasing: []

.....
-----
Block: 4118
4118Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x1038', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4118-Stack size: 11 
4118-Equals Mem:<< []>> 
4118-NonEquals Mem: << [<15,18>]>> 
4118-Equals Sto:<< []>> 
4118-NonEquals Sto: << [<2,22>]>> 
4118-Useless: []
4118-Constancy: [(5, 0)]
4118-ContextAliasing: []

.....
-----
Block: 6257_11
6257_11Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_11-Stack size: 17 
6257_11-Equals Mem:<< []>> 
6257_11-NonEquals Mem: << [<5,8>]>> 
6257_11-Equals Sto:<< []>> 
6257_11-NonEquals Sto: << []>> 
6257_11-Useless: []
6257_11-Constancy: [(11, 0)]
6257_11-ContextAliasing: []

.....
-----
Block: 4169
4169Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
4169-Stack size: 11 
4169-Equals Mem:<< []>> 
4169-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4169-Equals Sto:<< []>> 
4169-NonEquals Sto: << []>> 
4169-Useless: []
4169-Constancy: [(5, 0)]
4169-ContextAliasing: []

.....
-----
Block: 6257_10
6257_10Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_10-Stack size: 18 
6257_10-Equals Mem:<< []>> 
6257_10-NonEquals Mem: << [<5,8>]>> 
6257_10-Equals Sto:<< []>> 
6257_10-NonEquals Sto: << []>> 
6257_10-Useless: []
6257_10-Constancy: [(12, 0), (4, 0), (1, 0)]
6257_10-ContextAliasing: []

.....
-----
Block: 5434_0
5434_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x162e', 'JUMP']>> 
5434_0-Stack size: 14 
5434_0-Equals Mem:<< [<11,6>]>> 
5434_0-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5434_0-Equals Sto:<< []>> 
5434_0-NonEquals Sto: << []>> 
5434_0-Useless: []
5434_0-Constancy: [(8, 0)]
5434_0-ContextAliasing: []

.....
-----
Block: 5686
5686Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
5686-Stack size: 21 
5686-Equals Mem:<< []>> 
5686-NonEquals Mem: << [<6,1>]>> 
5686-Equals Sto:<< []>> 
5686-NonEquals Sto: << []>> 
5686-Useless: []
5686-Constancy: [(15, 0), (6, 0), (1, 0)]
5686-ContextAliasing: [(2, 20)]

.....
-----
Block: 5722_4
5722_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_4-Stack size: 23 
5722_4-Equals Mem:<< []>> 
5722_4-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_4-Equals Sto:<< []>> 
5722_4-NonEquals Sto: << []>> 
5722_4-Useless: []
5722_4-Constancy: [(17, 0), (8, 0), (3, 0)]
5722_4-ContextAliasing: [(4, 21)]

.....
-----
Block: 5746_4
5746_4Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_4-Stack size: 27 
5746_4-Equals Mem:<< []>> 
5746_4-NonEquals Mem: << [<11,5>]>> 
5746_4-Equals Sto:<< []>> 
5746_4-NonEquals Sto: << []>> 
5746_4-Useless: []
5746_4-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_4-ContextAliasing: [(8, 21)]

.....
-----
Block: 6892
6892Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892-Stack size: 25 
6892-Equals Mem:<< []>> 
6892-NonEquals Mem: << [<4,7>]>> 
6892-Equals Sto:<< []>> 
6892-NonEquals Sto: << []>> 
6892-Useless: []
6892-Constancy: [(19, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6892-ContextAliasing: []

.....
-----
Block: 6257_9
6257_9Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_9-Stack size: 23 
6257_9-Equals Mem:<< []>> 
6257_9-NonEquals Mem: << [<5,8>]>> 
6257_9-Equals Sto:<< []>> 
6257_9-NonEquals Sto: << []>> 
6257_9-Useless: []
6257_9-Constancy: [(17, 0), (6, 0), (5, 0)]
6257_9-ContextAliasing: []

.....
-----
Block: 6892_0
6892_0Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892_0-Stack size: 23 
6892_0-Equals Mem:<< []>> 
6892_0-NonEquals Mem: << [<4,7>]>> 
6892_0-Equals Sto:<< []>> 
6892_0-NonEquals Sto: << []>> 
6892_0-Useless: []
6892_0-Constancy: [(17, 0), (6, 0), (0, 0)]
6892_0-ContextAliasing: []

.....
-----
Block: 5346
5346Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5346-Stack size: 18 
5346-Equals Mem:<< []>> 
5346-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5346-Equals Sto:<< []>> 
5346-NonEquals Sto: << []>> 
5346-Useless: []
5346-Constancy: [(12, 0), (1, 0)]
5346-ContextAliasing: []

.....
-----
Block: 4344
4344Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x112e', 'JUMPI']>> 
4344-Stack size: 11 
4344-Equals Mem:<< []>> 
4344-NonEquals Mem: << [<5,8>]>> 
4344-Equals Sto:<< []>> 
4344-NonEquals Sto: << [<12,14>]>> 
4344-Useless: []
4344-Constancy: [(5, 0)]
4344-ContextAliasing: []

.....
-----
Block: 6591_0
6591_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591_0-Stack size: 19 
6591_0-Equals Mem:<< []>> 
6591_0-NonEquals Mem: << [<5,8>]>> 
6591_0-Equals Sto:<< []>> 
6591_0-NonEquals Sto: << []>> 
6591_0-Useless: []
6591_0-Constancy: [(13, 0), (1, 0)]
6591_0-ContextAliasing: [(4, 16)]

.....
-----
Block: 5031
5031Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x13cb', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
5031-Stack size: 19 
5031-Equals Mem:<< [<18,6>]>> 
5031-NonEquals Mem: << []>> 
5031-Equals Sto:<< []>> 
5031-NonEquals Sto: << []>> 
5031-Useless: []
5031-Constancy: [(13, 0)]
5031-ContextAliasing: []

.....
-----
Block: 6591
6591Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591-Stack size: 19 
6591-Equals Mem:<< []>> 
6591-NonEquals Mem: << [<5,8>]>> 
6591-Equals Sto:<< []>> 
6591-NonEquals Sto: << []>> 
6591-Useless: []
6591-Constancy: [(13, 0)]
6591-ContextAliasing: [(4, 16)]

.....
-----
Block: 2987_1
2987_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
2987_1-Stack size: 19 
2987_1-Equals Mem:<< []>> 
2987_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2987_1-Equals Sto:<< []>> 
2987_1-NonEquals Sto: << []>> 
2987_1-Useless: []
2987_1-Constancy: [(13, 0)]
2987_1-ContextAliasing: []

.....
-----
Block: 3085_1
3085_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3085_1-Stack size: 19 
3085_1-Equals Mem:<< []>> 
3085_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3085_1-Equals Sto:<< []>> 
3085_1-NonEquals Sto: << []>> 
3085_1-Useless: []
3085_1-Constancy: [(13, 0)]
3085_1-ContextAliasing: []

.....
-----
Block: 5124
5124Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x143c', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1a76', 'JUMP']>> 
5124-Stack size: 15 
5124-Equals Mem:<< []>> 
5124-NonEquals Mem: << [<9,4>]>> 
5124-Equals Sto:<< []>> 
5124-NonEquals Sto: << []>> 
5124-Useless: []
5124-Constancy: [(9, 0)]
5124-ContextAliasing: []

.....
-----
Block: 6774
6774Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6774-Stack size: 24 
6774-Equals Mem:<< []>> 
6774-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6774-Equals Sto:<< []>> 
6774-NonEquals Sto: << []>> 
6774-Useless: []
6774-Constancy: [(18, 0), (4, 0)]
6774-ContextAliasing: [(9, 20)]

.....
-----
Block: 6824
6824Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1a9f', 'JUMP']>> 
6824-Stack size: 30 
6824-Equals Mem:<< []>> 
6824-NonEquals Mem: << [<9,1>]>> 
6824-Equals Sto:<< []>> 
6824-NonEquals Sto: << []>> 
6824-Useless: []
6824-Constancy: [(24, 0), (10, 0), (5, 0), (3, 32)]
6824-ContextAliasing: [(15, 20)]

.....
-----
Block: 6257_12
6257_12Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_12-Stack size: 23 
6257_12-Equals Mem:<< []>> 
6257_12-NonEquals Mem: << [<5,8>]>> 
6257_12-Equals Sto:<< []>> 
6257_12-NonEquals Sto: << []>> 
6257_12-Useless: []
6257_12-Constancy: [(17, 0), (12, 0), (6, 0), (5, 0)]
6257_12-ContextAliasing: []

.....
-----
Block: 6892_2
6892_2Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892_2-Stack size: 23 
6892_2-Equals Mem:<< []>> 
6892_2-NonEquals Mem: << [<4,7>]>> 
6892_2-Equals Sto:<< []>> 
6892_2-NonEquals Sto: << []>> 
6892_2-Useless: []
6892_2-Constancy: [(17, 0), (12, 0), (6, 0), (0, 0)]
6892_2-ContextAliasing: []

.....
-----
Block: 5346_0
5346_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5346_0-Stack size: 18 
5346_0-Equals Mem:<< []>> 
5346_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5346_0-Equals Sto:<< []>> 
5346_0-NonEquals Sto: << []>> 
5346_0-Useless: []
5346_0-Constancy: [(12, 0), (7, 0), (1, 0)]
5346_0-ContextAliasing: []

.....
-----
Block: 4508
4508Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x11b4', 'SWAP1', 'DUP3', 'PUSH2 0x158f', 'JUMP']>> 
4508-Stack size: 11 
4508-Equals Mem:<< []>> 
4508-NonEquals Mem: << [<4,7>]>> 
4508-Equals Sto:<< []>> 
4508-NonEquals Sto: << []>> 
4508-Useless: []
4508-Constancy: [(5, 0)]
4508-ContextAliasing: []

.....
-----
Block: 6257_8
6257_8Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_8-Stack size: 21 
6257_8-Equals Mem:<< []>> 
6257_8-NonEquals Mem: << [<5,8>]>> 
6257_8-Equals Sto:<< []>> 
6257_8-NonEquals Sto: << []>> 
6257_8-Useless: []
6257_8-Constancy: [(15, 0), (6, 0), (5, 0)]
6257_8-ContextAliasing: []

.....
-----
Block: 5542_0
5542_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5542_0-Stack size: 16 
5542_0-Equals Mem:<< []>> 
5542_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5542_0-Equals Sto:<< []>> 
5542_0-NonEquals Sto: << []>> 
5542_0-Useless: []
5542_0-Constancy: [(10, 0), (1, 0)]
5542_0-ContextAliasing: []

.....
-----
Block: 4532
4532Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1204', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4532-Stack size: 12 
4532-Equals Mem:<< []>> 
4532-NonEquals Mem: << [<5,19>, <5,8>, <5,34>, <8,19>, <8,34>, <34,13>, <34,19>, <13,19>]>> 
4532-Equals Sto:<< []>> 
4532-NonEquals Sto: << []>> 
4532-Useless: []
4532-Constancy: [(6, 0)]
4532-ContextAliasing: []

.....
-----
Block: 4621
4621Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x122f', 'SWAP1', 'DUP4', 'PUSH2 0x15ed', 'JUMP']>> 
4621-Stack size: 11 
4621-Equals Mem:<< []>> 
4621-NonEquals Mem: << [<11,14>]>> 
4621-Equals Sto:<< []>> 
4621-NonEquals Sto: << []>> 
4621-Useless: []
4621-Constancy: [(5, 0)]
4621-ContextAliasing: []

.....
-----
Block: 5613
5613Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12d2', 'JUMP']>> 
5613-Stack size: 14 
5613-Equals Mem:<< [<11,6>]>> 
5613-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5613-Equals Sto:<< []>> 
5613-NonEquals Sto: << []>> 
5613-Useless: []
5613-Constancy: [(8, 0)]
5613-ContextAliasing: []

.....
-----
Block: 4829_2
4829_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
4829_2-Stack size: 21 
4829_2-Equals Mem:<< []>> 
4829_2-NonEquals Mem: << [<6,1>]>> 
4829_2-Equals Sto:<< []>> 
4829_2-NonEquals Sto: << []>> 
4829_2-Useless: []
4829_2-Constancy: [(15, 0), (6, 0), (1, 0)]
4829_2-ContextAliasing: [(2, 20)]

.....
-----
Block: 5722_3
5722_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_3-Stack size: 23 
5722_3-Equals Mem:<< []>> 
5722_3-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_3-Equals Sto:<< []>> 
5722_3-NonEquals Sto: << []>> 
5722_3-Useless: []
5722_3-Constancy: [(17, 0), (8, 0), (3, 0)]
5722_3-ContextAliasing: [(4, 21)]

.....
-----
Block: 5746_3
5746_3Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_3-Stack size: 27 
5746_3-Equals Mem:<< []>> 
5746_3-NonEquals Mem: << [<11,5>]>> 
5746_3-Equals Sto:<< []>> 
5746_3-NonEquals Sto: << []>> 
5746_3-Useless: []
5746_3-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_3-ContextAliasing: [(8, 21)]

.....
-----
Block: 6257_7
6257_7Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_7-Stack size: 26 
6257_7-Equals Mem:<< []>> 
6257_7-NonEquals Mem: << [<5,8>]>> 
6257_7-Equals Sto:<< []>> 
6257_7-NonEquals Sto: << []>> 
6257_7-Useless: []
6257_7-Constancy: [(20, 0), (11, 0), (6, 0), (5, 0)]
6257_7-ContextAliasing: []

.....
-----
Block: 4655
4655Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x1272', 'PUSH2 0x1254', 'DUP4', 'DUP4', 'PUSH2 0x15ed', 'JUMP']>> 
4655-Stack size: 12 
4655-Equals Mem:<< []>> 
4655-NonEquals Mem: << [<11,14>]>> 
4655-Equals Sto:<< []>> 
4655-NonEquals Sto: << []>> 
4655-Useless: []
4655-Constancy: [(6, 0)]
4655-ContextAliasing: []

.....
-----
Block: 5613_0
5613_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12d2', 'JUMP']>> 
5613_0-Stack size: 15 
5613_0-Equals Mem:<< [<11,6>]>> 
5613_0-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5613_0-Equals Sto:<< []>> 
5613_0-NonEquals Sto: << []>> 
5613_0-Useless: []
5613_0-Constancy: [(9, 0)]
5613_0-ContextAliasing: []

.....
-----
Block: 4829_1
4829_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
4829_1-Stack size: 22 
4829_1-Equals Mem:<< []>> 
4829_1-NonEquals Mem: << [<6,1>]>> 
4829_1-Equals Sto:<< []>> 
4829_1-NonEquals Sto: << []>> 
4829_1-Useless: []
4829_1-Constancy: [(16, 0), (6, 0), (1, 0)]
4829_1-ContextAliasing: [(2, 21)]

.....
-----
Block: 5722_2
5722_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_2-Stack size: 24 
5722_2-Equals Mem:<< []>> 
5722_2-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_2-Equals Sto:<< []>> 
5722_2-NonEquals Sto: << []>> 
5722_2-Useless: []
5722_2-Constancy: [(18, 0), (8, 0), (3, 0)]
5722_2-ContextAliasing: [(4, 22)]

.....
-----
Block: 5746_2
5746_2Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_2-Stack size: 28 
5746_2-Equals Mem:<< []>> 
5746_2-NonEquals Mem: << [<11,5>]>> 
5746_2-Equals Sto:<< []>> 
5746_2-NonEquals Sto: << []>> 
5746_2-Useless: []
5746_2-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_2-ContextAliasing: [(8, 22)]

.....
-----
Block: 6257_6
6257_6Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_6-Stack size: 27 
6257_6-Equals Mem:<< []>> 
6257_6-NonEquals Mem: << [<5,8>]>> 
6257_6-Equals Sto:<< []>> 
6257_6-NonEquals Sto: << []>> 
6257_6-Useless: []
6257_6-Constancy: [(21, 0), (11, 0), (6, 0), (5, 0)]
6257_6-ContextAliasing: []

.....
-----
Block: 4692
4692Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x158f', 'JUMP']>> 
4692-Stack size: 13 
4692-Equals Mem:<< []>> 
4692-NonEquals Mem: << [<11,14>]>> 
4692-Equals Sto:<< []>> 
4692-NonEquals Sto: << []>> 
4692-Useless: []
4692-Constancy: [(7, 0)]
4692-ContextAliasing: []

.....
-----
Block: 6257_5
6257_5Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_5-Stack size: 21 
6257_5-Equals Mem:<< []>> 
6257_5-NonEquals Mem: << [<5,8>]>> 
6257_5-Equals Sto:<< []>> 
6257_5-NonEquals Sto: << []>> 
6257_5-Useless: []
6257_5-Constancy: [(15, 0), (6, 0), (5, 0)]
6257_5-ContextAliasing: []

.....
-----
Block: 5542
5542Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5542-Stack size: 16 
5542-Equals Mem:<< []>> 
5542-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5542-Equals Sto:<< []>> 
5542-NonEquals Sto: << []>> 
5542-Useless: []
5542-Constancy: [(10, 0), (1, 0)]
5542-ContextAliasing: []

.....
-----
Block: 4722
4722Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x12bb', 'DUP6', 'DUP6', 'PUSH2 0x15ed', 'JUMP']>> 
4722-Stack size: 12 
4722-Equals Mem:<< []>> 
4722-NonEquals Mem: << [<12,15>]>> 
4722-Equals Sto:<< []>> 
4722-NonEquals Sto: << []>> 
4722-Useless: []
4722-Constancy: [(6, 0)]
4722-ContextAliasing: []

.....
-----
Block: 5613_1
5613_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12d2', 'JUMP']>> 
5613_1-Stack size: 17 
5613_1-Equals Mem:<< [<11,6>]>> 
5613_1-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5613_1-Equals Sto:<< []>> 
5613_1-NonEquals Sto: << []>> 
5613_1-Useless: []
5613_1-Constancy: [(11, 0)]
5613_1-ContextAliasing: []

.....
-----
Block: 4829_0
4829_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
4829_0-Stack size: 24 
4829_0-Equals Mem:<< []>> 
4829_0-NonEquals Mem: << [<6,1>]>> 
4829_0-Equals Sto:<< []>> 
4829_0-NonEquals Sto: << []>> 
4829_0-Useless: []
4829_0-Constancy: [(18, 0), (6, 0), (1, 0)]
4829_0-ContextAliasing: [(2, 23)]

.....
-----
Block: 5722_1
5722_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_1-Stack size: 26 
5722_1-Equals Mem:<< []>> 
5722_1-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_1-Equals Sto:<< []>> 
5722_1-NonEquals Sto: << []>> 
5722_1-Useless: []
5722_1-Constancy: [(20, 0), (8, 0), (3, 0)]
5722_1-ContextAliasing: [(4, 24)]

.....
-----
Block: 5746_1
5746_1Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_1-Stack size: 30 
5746_1-Equals Mem:<< []>> 
5746_1-NonEquals Mem: << [<11,5>]>> 
5746_1-Equals Sto:<< []>> 
5746_1-NonEquals Sto: << []>> 
5746_1-Useless: []
5746_1-Constancy: [(24, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5746_1-ContextAliasing: [(8, 24)]

.....
-----
Block: 6257_4
6257_4Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_4-Stack size: 29 
6257_4-Equals Mem:<< []>> 
6257_4-NonEquals Mem: << [<5,8>]>> 
6257_4-Equals Sto:<< []>> 
6257_4-NonEquals Sto: << []>> 
6257_4-Useless: []
6257_4-Constancy: [(23, 0), (11, 0), (6, 0), (5, 0)]
6257_4-ContextAliasing: []

.....
-----
Block: 4829
4829Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
4829-Stack size: 15 
4829-Equals Mem:<< []>> 
4829-NonEquals Mem: << [<6,1>]>> 
4829-Equals Sto:<< []>> 
4829-NonEquals Sto: << []>> 
4829-Useless: []
4829-Constancy: [(9, 0), (1, 0)]
4829-ContextAliasing: [(2, 14)]

.....
-----
Block: 5722_0
5722_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722_0-Stack size: 17 
5722_0-Equals Mem:<< []>> 
5722_0-NonEquals Mem: << [<5,7>, <12,7>]>> 
5722_0-Equals Sto:<< []>> 
5722_0-NonEquals Sto: << []>> 
5722_0-Useless: []
5722_0-Constancy: [(11, 0), (3, 0)]
5722_0-ContextAliasing: [(4, 15)]

.....
-----
Block: 5746_0
5746_0Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746_0-Stack size: 21 
5746_0-Equals Mem:<< []>> 
5746_0-NonEquals Mem: << [<11,5>]>> 
5746_0-Equals Sto:<< []>> 
5746_0-NonEquals Sto: << []>> 
5746_0-Useless: []
5746_0-Constancy: [(15, 0), (7, 0), (3, 0), (2, 32)]
5746_0-ContextAliasing: [(8, 15)]

.....
-----
Block: 6257_3
6257_3Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_3-Stack size: 20 
6257_3-Equals Mem:<< []>> 
6257_3-NonEquals Mem: << [<5,8>]>> 
6257_3-Equals Sto:<< []>> 
6257_3-NonEquals Sto: << []>> 
6257_3-Useless: []
6257_3-Constancy: [(14, 0), (6, 0), (5, 0)]
6257_3-ContextAliasing: []

.....
-----
Block: 2987_0
2987_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
2987_0-Stack size: 10 
2987_0-Equals Mem:<< []>> 
2987_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2987_0-Equals Sto:<< []>> 
2987_0-NonEquals Sto: << []>> 
2987_0-Useless: []
2987_0-Constancy: [(4, 0)]
2987_0-ContextAliasing: []

.....
-----
Block: 3085_0
3085_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3085_0-Stack size: 10 
3085_0-Equals Mem:<< []>> 
3085_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3085_0-Equals Sto:<< []>> 
3085_0-NonEquals Sto: << []>> 
3085_0-Useless: []
3085_0-Constancy: [(4, 0)]
3085_0-ContextAliasing: []

.....
-----
Block: 6257
6257Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257-Stack size: 8 
6257-Equals Mem:<< []>> 
6257-NonEquals Mem: << [<5,8>]>> 
6257-Equals Sto:<< []>> 
6257-NonEquals Sto: << []>> 
6257-Useless: []
6257-Constancy: [(5, 0)]
6257-ContextAliasing: []

.....
-----
Block: 6257_2
6257_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_2-Stack size: 18 
6257_2-Equals Mem:<< []>> 
6257_2-NonEquals Mem: << [<5,8>]>> 
6257_2-Equals Sto:<< []>> 
6257_2-NonEquals Sto: << []>> 
6257_2-Useless: []
6257_2-Constancy: [(15, 0), (11, 0), (7, 0)]
6257_2-ContextAliasing: []

.....
-----
Block: 6257_1
6257_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_1-Stack size: 14 
6257_1-Equals Mem:<< []>> 
6257_1-NonEquals Mem: << [<5,8>]>> 
6257_1-Equals Sto:<< []>> 
6257_1-NonEquals Sto: << []>> 
6257_1-Useless: []
6257_1-Constancy: [(11, 0), (7, 0), (3, 0)]
6257_1-ContextAliasing: []

.....
-----
Block: 6257_0
6257_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257_0-Stack size: 13 
6257_0-Equals Mem:<< []>> 
6257_0-NonEquals Mem: << [<5,8>]>> 
6257_0-Equals Sto:<< []>> 
6257_0-NonEquals Sto: << []>> 
6257_0-Useless: []
6257_0-Constancy: [(10, 0), (6, 0), (2, 0)]
6257_0-ContextAliasing: []

.....
-----
Block: 2987
2987Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
2987-Stack size: 9 
2987-Equals Mem:<< []>> 
2987-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2987-Equals Sto:<< []>> 
2987-NonEquals Sto: << []>> 
2987-Useless: []
2987-Constancy: [(4, 0)]
2987-ContextAliasing: []

.....
-----
Block: 3085
3085Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3085-Stack size: 9 
3085-Equals Mem:<< []>> 
3085-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3085-Equals Sto:<< []>> 
3085-NonEquals Sto: << []>> 
3085-Useless: []
3085-Constancy: [(4, 0)]
3085-ContextAliasing: []

.....
-----
Block: 341
341Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x10', 'DUP2', 'MSTORE', 'PUSH16 0x4d61646520496e20486f6e676b6f6e67', 'PUSH1 0x80', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE']>> 
341-Stack size: 2 
341-Equals Mem:<< [<10,4>]>> 
341-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
341-Equals Sto:<< []>> 
341-NonEquals Sto: << []>> 
341-Useless: []
341-Constancy: []
341-ContextAliasing: []

.....
-----
Block: 395
395Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
395-Stack size: 2 
395-Equals Mem:<< []>> 
395-NonEquals Mem: << []>> 
395-Equals Sto:<< []>> 
395-NonEquals Sto: << []>> 
395-Useless: []
395-Constancy: []
395-ContextAliasing: []

.....
-----
Block: 1316_14
1316_14Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_14-Stack size: 4 
1316_14-Equals Mem:<< []>> 
1316_14-NonEquals Mem: << []>> 
1316_14-Equals Sto:<< []>> 
1316_14-NonEquals Sto: << []>> 
1316_14-Useless: []
1316_14-Constancy: []
1316_14-ContextAliasing: []

.....
-----
Block: 1316_16
1316_16Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_16-Stack size: 3 
1316_16-Equals Mem:<< []>> 
1316_16-NonEquals Mem: << []>> 
1316_16-Equals Sto:<< []>> 
1316_16-NonEquals Sto: << []>> 
1316_16-Useless: []
1316_16-Constancy: []
1316_16-ContextAliasing: []

.....
-----
Block: 1316_28
1316_28Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_28-Stack size: 7 
1316_28-Equals Mem:<< []>> 
1316_28-NonEquals Mem: << []>> 
1316_28-Equals Sto:<< []>> 
1316_28-NonEquals Sto: << []>> 
1316_28-Useless: []
1316_28-Constancy: []
1316_28-ContextAliasing: []

.....
-----
Block: 6680
6680Instr:<<['JUMPDEST', 'DUP4', 'MLOAD', 'SWAP3', 'POP', 'PUSH1 0x20', 'DUP5', 'ADD', 'MLOAD', 'SWAP2', 'POP', 'PUSH1 0x40', 'DUP5', 'ADD', 'MLOAD', 'SWAP1', 'POP', 'SWAP3', 'POP', 'SWAP3', 'POP', 'SWAP3', 'JUMP']>> 
6680-Stack size: 8 
6680-Equals Mem:<< []>> 
6680-NonEquals Mem: << [<2,8>, <2,14>, <8,14>]>> 
6680-Equals Sto:<< []>> 
6680-NonEquals Sto: << []>> 
6680-Useless: []
6680-Constancy: [(2, 0), (1, 0), (0, 0)]
6680-ContextAliasing: []

.....
-----
Block: 395_1
395_1Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
395_1-Stack size: 3 
395_1-Equals Mem:<< []>> 
395_1-NonEquals Mem: << []>> 
395_1-Equals Sto:<< []>> 
395_1-NonEquals Sto: << []>> 
395_1-Useless: []
395_1-Constancy: []
395_1-ContextAliasing: []

.....
-----
Block: 395_0
395_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
395_0-Stack size: 3 
395_0-Equals Mem:<< []>> 
395_0-NonEquals Mem: << []>> 
395_0-Equals Sto:<< []>> 
395_0-NonEquals Sto: << []>> 
395_0-Useless: []
395_0-Constancy: []
395_0-ContextAliasing: []

.....
-----
Block: 1316
1316Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316-Stack size: 10 
1316-Equals Mem:<< []>> 
1316-NonEquals Mem: << []>> 
1316-Equals Sto:<< []>> 
1316-NonEquals Sto: << []>> 
1316-Useless: []
1316-Constancy: [(5, 0)]
1316-ContextAliasing: []

.....
-----
Block: 1316_26
1316_26Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_26-Stack size: 20 
1316_26-Equals Mem:<< []>> 
1316_26-NonEquals Mem: << []>> 
1316_26-Equals Sto:<< []>> 
1316_26-NonEquals Sto: << []>> 
1316_26-Useless: []
1316_26-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
1316_26-ContextAliasing: []

.....
-----
Block: 1316_25
1316_25Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_25-Stack size: 11 
1316_25-Equals Mem:<< []>> 
1316_25-NonEquals Mem: << []>> 
1316_25-Equals Sto:<< []>> 
1316_25-NonEquals Sto: << []>> 
1316_25-Useless: []
1316_25-Constancy: [(6, 0)]
1316_25-ContextAliasing: []

.....
-----
Block: 1316_23
1316_23Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_23-Stack size: 20 
1316_23-Equals Mem:<< []>> 
1316_23-NonEquals Mem: << []>> 
1316_23-Equals Sto:<< []>> 
1316_23-NonEquals Sto: << []>> 
1316_23-Useless: []
1316_23-Constancy: [(15, 0), (6, 0), (1, 0)]
1316_23-ContextAliasing: []

.....
-----
Block: 1316_24
1316_24Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_24-Stack size: 18 
1316_24-Equals Mem:<< []>> 
1316_24-NonEquals Mem: << []>> 
1316_24-Equals Sto:<< []>> 
1316_24-NonEquals Sto: << []>> 
1316_24-Useless: []
1316_24-Constancy: [(13, 0), (2, 0)]
1316_24-ContextAliasing: []

.....
-----
Block: 1316_22
1316_22Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_22-Stack size: 19 
1316_22-Equals Mem:<< []>> 
1316_22-NonEquals Mem: << []>> 
1316_22-Equals Sto:<< []>> 
1316_22-NonEquals Sto: << []>> 
1316_22-Useless: []
1316_22-Constancy: [(14, 0)]
1316_22-ContextAliasing: []

.....
-----
Block: 1316_27
1316_27Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_27-Stack size: 18 
1316_27-Equals Mem:<< []>> 
1316_27-NonEquals Mem: << []>> 
1316_27-Equals Sto:<< []>> 
1316_27-NonEquals Sto: << []>> 
1316_27-Useless: []
1316_27-Constancy: [(13, 0), (8, 0), (2, 0)]
1316_27-ContextAliasing: []

.....
-----
Block: 1316_21
1316_21Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_21-Stack size: 16 
1316_21-Equals Mem:<< []>> 
1316_21-NonEquals Mem: << []>> 
1316_21-Equals Sto:<< []>> 
1316_21-NonEquals Sto: << []>> 
1316_21-Useless: []
1316_21-Constancy: [(11, 0), (2, 0)]
1316_21-ContextAliasing: []

.....
-----
Block: 1316_20
1316_20Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_20-Stack size: 20 
1316_20-Equals Mem:<< []>> 
1316_20-NonEquals Mem: << []>> 
1316_20-Equals Sto:<< []>> 
1316_20-NonEquals Sto: << []>> 
1316_20-Useless: []
1316_20-Constancy: [(15, 0), (6, 0), (1, 0)]
1316_20-ContextAliasing: []

.....
-----
Block: 1316_19
1316_19Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_19-Stack size: 21 
1316_19-Equals Mem:<< []>> 
1316_19-NonEquals Mem: << []>> 
1316_19-Equals Sto:<< []>> 
1316_19-NonEquals Sto: << []>> 
1316_19-Useless: []
1316_19-Constancy: [(16, 0), (6, 0), (1, 0)]
1316_19-ContextAliasing: []

.....
-----
Block: 1316_18
1316_18Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_18-Stack size: 16 
1316_18-Equals Mem:<< []>> 
1316_18-NonEquals Mem: << []>> 
1316_18-Equals Sto:<< []>> 
1316_18-NonEquals Sto: << []>> 
1316_18-Useless: []
1316_18-Constancy: [(11, 0), (2, 0)]
1316_18-ContextAliasing: []

.....
-----
Block: 1316_17
1316_17Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_17-Stack size: 23 
1316_17-Equals Mem:<< []>> 
1316_17-NonEquals Mem: << []>> 
1316_17-Equals Sto:<< []>> 
1316_17-NonEquals Sto: << []>> 
1316_17-Useless: []
1316_17-Constancy: [(18, 0), (6, 0), (1, 0)]
1316_17-ContextAliasing: []

.....
-----
Block: 1316_15
1316_15Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_15-Stack size: 11 
1316_15-Equals Mem:<< []>> 
1316_15-NonEquals Mem: << []>> 
1316_15-Equals Sto:<< []>> 
1316_15-NonEquals Sto: << []>> 
1316_15-Useless: []
1316_15-Constancy: []
1316_15-ContextAliasing: []

.....
-----
Block: 1316_13
1316_13Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_13-Stack size: 11 
1316_13-Equals Mem:<< []>> 
1316_13-NonEquals Mem: << []>> 
1316_13-Equals Sto:<< []>> 
1316_13-NonEquals Sto: << []>> 
1316_13-Useless: []
1316_13-Constancy: [(5, 0)]
1316_13-ContextAliasing: []

.....
-----
Block: 1316_11
1316_11Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_11-Stack size: 21 
1316_11-Equals Mem:<< []>> 
1316_11-NonEquals Mem: << []>> 
1316_11-Equals Sto:<< []>> 
1316_11-NonEquals Sto: << []>> 
1316_11-Useless: []
1316_11-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
1316_11-ContextAliasing: []

.....
-----
Block: 1316_10
1316_10Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_10-Stack size: 12 
1316_10-Equals Mem:<< []>> 
1316_10-NonEquals Mem: << []>> 
1316_10-Equals Sto:<< []>> 
1316_10-NonEquals Sto: << []>> 
1316_10-Useless: []
1316_10-Constancy: [(6, 0)]
1316_10-ContextAliasing: []

.....
-----
Block: 1316_8
1316_8Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_8-Stack size: 21 
1316_8-Equals Mem:<< []>> 
1316_8-NonEquals Mem: << []>> 
1316_8-Equals Sto:<< []>> 
1316_8-NonEquals Sto: << []>> 
1316_8-Useless: []
1316_8-Constancy: [(15, 0), (6, 0), (1, 0)]
1316_8-ContextAliasing: []

.....
-----
Block: 1316_9
1316_9Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_9-Stack size: 19 
1316_9-Equals Mem:<< []>> 
1316_9-NonEquals Mem: << []>> 
1316_9-Equals Sto:<< []>> 
1316_9-NonEquals Sto: << []>> 
1316_9-Useless: []
1316_9-Constancy: [(13, 0), (2, 0)]
1316_9-ContextAliasing: []

.....
-----
Block: 1316_7
1316_7Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_7-Stack size: 20 
1316_7-Equals Mem:<< []>> 
1316_7-NonEquals Mem: << []>> 
1316_7-Equals Sto:<< []>> 
1316_7-NonEquals Sto: << []>> 
1316_7-Useless: []
1316_7-Constancy: [(14, 0)]
1316_7-ContextAliasing: []

.....
-----
Block: 1316_12
1316_12Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_12-Stack size: 19 
1316_12-Equals Mem:<< []>> 
1316_12-NonEquals Mem: << []>> 
1316_12-Equals Sto:<< []>> 
1316_12-NonEquals Sto: << []>> 
1316_12-Useless: []
1316_12-Constancy: [(13, 0), (8, 0), (2, 0)]
1316_12-ContextAliasing: []

.....
-----
Block: 1316_6
1316_6Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_6-Stack size: 17 
1316_6-Equals Mem:<< []>> 
1316_6-NonEquals Mem: << []>> 
1316_6-Equals Sto:<< []>> 
1316_6-NonEquals Sto: << []>> 
1316_6-Useless: []
1316_6-Constancy: [(11, 0), (2, 0)]
1316_6-ContextAliasing: []

.....
-----
Block: 1316_5
1316_5Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_5-Stack size: 21 
1316_5-Equals Mem:<< []>> 
1316_5-NonEquals Mem: << []>> 
1316_5-Equals Sto:<< []>> 
1316_5-NonEquals Sto: << []>> 
1316_5-Useless: []
1316_5-Constancy: [(15, 0), (6, 0), (1, 0)]
1316_5-ContextAliasing: []

.....
-----
Block: 1316_4
1316_4Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_4-Stack size: 22 
1316_4-Equals Mem:<< []>> 
1316_4-NonEquals Mem: << []>> 
1316_4-Equals Sto:<< []>> 
1316_4-NonEquals Sto: << []>> 
1316_4-Useless: []
1316_4-Constancy: [(16, 0), (6, 0), (1, 0)]
1316_4-ContextAliasing: []

.....
-----
Block: 1316_3
1316_3Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_3-Stack size: 17 
1316_3-Equals Mem:<< []>> 
1316_3-NonEquals Mem: << []>> 
1316_3-Equals Sto:<< []>> 
1316_3-NonEquals Sto: << []>> 
1316_3-Useless: []
1316_3-Constancy: [(11, 0), (2, 0)]
1316_3-ContextAliasing: []

.....
-----
Block: 1316_2
1316_2Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_2-Stack size: 24 
1316_2-Equals Mem:<< []>> 
1316_2-NonEquals Mem: << []>> 
1316_2-Equals Sto:<< []>> 
1316_2-NonEquals Sto: << []>> 
1316_2-Useless: []
1316_2-Constancy: [(18, 0), (6, 0), (1, 0)]
1316_2-ContextAliasing: []

.....
-----
Block: 1316_1
1316_1Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_1-Stack size: 15 
1316_1-Equals Mem:<< []>> 
1316_1-NonEquals Mem: << []>> 
1316_1-Equals Sto:<< []>> 
1316_1-NonEquals Sto: << []>> 
1316_1-Useless: []
1316_1-Constancy: [(9, 0), (1, 0)]
1316_1-ContextAliasing: []

.....
-----
Block: 1316_0
1316_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316_0-Stack size: 11 
1316_0-Equals Mem:<< []>> 
1316_0-NonEquals Mem: << []>> 
1316_0-Equals Sto:<< []>> 
1316_0-NonEquals Sto: << []>> 
1316_0-Useless: []
1316_0-Constancy: [(5, 0)]
1316_0-ContextAliasing: []

.....
-----
Block: 1718
1718Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SSTORE', 'PUSH1 0x06', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'PUSH32 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf', 'PUSH2 0x06f0', 'PUSH1 0x09', 'PUSH1 0x0a', 'PUSH2 0x1965', 'JUMP']>> 
1718-Stack size: 3 
1718-Equals Mem:<< []>> 
1718-NonEquals Mem: << []>> 
1718-Equals Sto:<< [<5,10>]>> 
1718-NonEquals Sto: << [<2,5>, <2,10>]>> 
1718-Useless: []
1718-Constancy: []
1718-ContextAliasing: []

.....
-----
Block: 1951
1951Instr:<<['JUMPDEST', 'PUSH1 0x13', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH20 0x7a250d5630b4cf539739df2c5dacb4c659f2488d', 'SWAP1', 'DUP2', 'OR', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH2 0x07e7', 'SWAP1', 'ADDRESS', 'SWAP1', 'PUSH2 0x07da', 'PUSH1 0x09', 'PUSH1 0x0a', 'PUSH2 0x1965', 'JUMP']>> 
1951-Stack size: 2 
1951-Equals Mem:<< []>> 
1951-NonEquals Mem: << []>> 
1951-Equals Sto:<< [<3,17>]>> 
1951-NonEquals Sto: << []>> 
1951-Useless: []
1951-Constancy: []
1951-ContextAliasing: []

.....
-----
Block: 2730
2730Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH3 0xff00ff', 'PUSH1 0xa0', 'SHL', 'NOT', 'AND', 'PUSH3 0x010001', 'PUSH1 0xa0', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'JUMP']>> 
2730-Stack size: 3 
2730-Equals Mem:<< []>> 
2730-NonEquals Mem: << []>> 
2730-Equals Sto:<< [<4,15>]>> 
2730-NonEquals Sto: << []>> 
2730-Useless: []
2730-Constancy: []
2730-ContextAliasing: []

.....
-----
Block: 2962
2962Instr:<<['JUMPDEST', 'PUSH1 0x09', 'DUP2', 'SWAP1', 'SSTORE', 'PUSH1 0x0a', 'SSTORE', 'JUMP']>> 
2962-Stack size: 3 
2962-Equals Mem:<< []>> 
2962-NonEquals Mem: << []>> 
2962-Equals Sto:<< []>> 
2962-NonEquals Sto: << [<4,6>]>> 
2962-Useless: []
2962-Constancy: []
2962-ContextAliasing: []

.....
-----
Block: 3678
3678Instr:<<['JUMPDEST', 'PUSH2 0x0e8a', 'PUSH1 0x64', 'PUSH2 0x0e84', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e79', 'JUMPI']>> 
3678-Stack size: 11 
3678-Equals Mem:<< []>> 
3678-NonEquals Mem: << []>> 
3678-Equals Sto:<< []>> 
3678-NonEquals Sto: << [<5,7>]>> 
3678-Useless: []
3678-Constancy: [(5, 0), (0, 0)]
3678-ContextAliasing: []

.....
-----
Block: 4305
4305Instr:<<['PUSH2 0x10f5', 'PUSH1 0x64', 'PUSH2 0x0e84', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x10eb', 'JUMPI']>> 
4305-Stack size: 11 
4305-Equals Mem:<< []>> 
4305-NonEquals Mem: << []>> 
4305-Equals Sto:<< []>> 
4305-NonEquals Sto: << [<4,6>]>> 
4305-Useless: []
4305-Constancy: [(5, 0)]
4305-ContextAliasing: []

.....
-----
Block: 4439
4439Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4439-Stack size: 13 
4439-Equals Mem:<< []>> 
4439-NonEquals Mem: << []>> 
4439-Equals Sto:<< []>> 
4439-NonEquals Sto: << [<2,4>]>> 
4439-Useless: []
4439-Constancy: [(7, 0)]
4439-ContextAliasing: []

.....
-----
Block: 5221
5221Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5221-Stack size: 19 
5221-Equals Mem:<< []>> 
5221-NonEquals Mem: << []>> 
5221-Equals Sto:<< [<5,12>]>> 
5221-NonEquals Sto: << []>> 
5221-Useless: []
5221-Constancy: [(13, 0)]
5221-ContextAliasing: []

.....
-----
Block: 5221_0
5221_0Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5221_0-Stack size: 10 
5221_0-Equals Mem:<< []>> 
5221_0-NonEquals Mem: << []>> 
5221_0-Equals Sto:<< [<5,12>]>> 
5221_0-NonEquals Sto: << []>> 
5221_0-Useless: []
5221_0-Constancy: []
5221_0-ContextAliasing: []

.....
-----
Block: 3678_0
3678_0Instr:<<['JUMPDEST', 'PUSH2 0x0e8a', 'PUSH1 0x64', 'PUSH2 0x0e84', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e79', 'JUMPI']>> 
3678_0-Stack size: 10 
3678_0-Equals Mem:<< []>> 
3678_0-NonEquals Mem: << []>> 
3678_0-Equals Sto:<< []>> 
3678_0-NonEquals Sto: << [<5,7>]>> 
3678_0-Useless: []
3678_0-Constancy: [(5, 0), (0, 0)]
3678_0-ContextAliasing: []

.....
-----
Block: 5221_1
5221_1Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5221_1-Stack size: 18 
5221_1-Equals Mem:<< []>> 
5221_1-NonEquals Mem: << []>> 
5221_1-Equals Sto:<< [<5,12>]>> 
5221_1-NonEquals Sto: << []>> 
5221_1-Useless: []
5221_1-Constancy: [(13, 0)]
5221_1-ContextAliasing: []

.....
-----
Block: 4439_0
4439_0Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4439_0-Stack size: 12 
4439_0-Equals Mem:<< []>> 
4439_0-NonEquals Mem: << []>> 
4439_0-Equals Sto:<< []>> 
4439_0-NonEquals Sto: << [<2,4>]>> 
4439_0-Useless: []
4439_0-Constancy: [(7, 0)]
4439_0-ContextAliasing: []

.....
-----
Block: 4305_0
4305_0Instr:<<['PUSH2 0x10f5', 'PUSH1 0x64', 'PUSH2 0x0e84', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x10eb', 'JUMPI']>> 
4305_0-Stack size: 10 
4305_0-Equals Mem:<< []>> 
4305_0-NonEquals Mem: << []>> 
4305_0-Equals Sto:<< []>> 
4305_0-NonEquals Sto: << [<4,6>]>> 
4305_0-Useless: []
4305_0-Constancy: [(5, 0)]
4305_0-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.38424218399450183s

*************************************************************
File: Ownable
Build CFG: 0.003277591022197157s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis Ownable
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract Ownable: 3
Memory read accesses ContractOwnable: 8
Memory write accesses ContractOwnable: 6
********************************** INIT
COMPACT CLONES: True
CONTRACT: Ownable
-----
Block: 66
66Instr:<<['JUMPDEST', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
66-Stack size: 1 
66-Equals Mem:<< [<5,16>]>> 
66-NonEquals Mem: << [<15,5>, <15,16>]>> 
66-Equals Sto:<< []>> 
66-NonEquals Sto: << []>> 
66-Useless: []
66-Constancy: []
66-ContextAliasing: []

.....
-----
Block: 114
114Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'DUP2', 'SWAP1', 'MSTORE', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
114-Stack size: 2 
114-Equals Mem:<< [<1,26>]>> 
114-NonEquals Mem: << [<6,1>, <6,26>, <13,1>, <13,26>, <17,1>, <17,26>, <22,1>, <22,26>]>> 
114-Equals Sto:<< []>> 
114-NonEquals Sto: << []>> 
114-Useless: []
114-Constancy: [(0, 64)]
114-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.005666329991072416s

*************************************************************
File: SafeMath
Build CFG: 0.0006539199966937304s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis SafeMath
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract SafeMath: 0
Memory read accesses ContractSafeMath: 0
Memory write accesses ContractSafeMath: 1
********************************** INIT
COMPACT CLONES: True
CONTRACT: SafeMath
********************************** END
Memory Analysis: 0.00029629794880747795s

*************************************************************
FILERES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG;410;1086;73;308;231;25;0.8890688460087404
FILERES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_Ownable;12;13;2;4;2;1;0.008982498024124652
FILERES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_SafeMath;1;1;0;1;0;0;0.0009642719523981214


Aux path: /tmp/0x00//ethir_2c063cc8132f497ea45e2868d25b88d9
The files generated by EthIR are stored in the following directory: /tmp/0x00/costabs/
Block: 1046
1046Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x02', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
1046-Stack size: 4 
1046-Equals Mem:<< [<12,27>, <17,31>]>> 
1046-NonEquals Mem: << [<12,17>, <12,31>, <17,27>, <27,31>]>> 
1046-Equals Sto:<< []>> 
1046-NonEquals Sto: << []>> 
1046-Useless: []
1046-Constancy: []
1046-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<11,26>, <16,30>], 'memory_deps_noneqs': [<11,16>, <11,30>, <16,26>, <26,30>]}
{'memory_deps_eqs': [<11,26>, <16,30>], 'memory_deps_noneqs': [<11,16>, <11,30>, <16,26>, <26,30>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{32: ((('s(3)', 'sload0'), 1), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
[OPT]: Removed mstore mstore with KECCAK
[OPT]: Removed mstore mstore with KECCAK
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '2', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(11)', 'sload0'), 1)
sload0
[(('s(11)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
SFS with rule: isolated_block_0_0_input.json
{32: ((('s(3)', 'sload0'), 1), 2)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x02 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST DUP3 DUP1 SWAP2 POP POP POP DUP2 PUSH1 0x2 DUP3 SWAP3 POP PUSH1 0x20 MSTORE SWAP1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x0 PUSH1 0x40 SWAP3 POP MSTORE PUSH1 0x0 KECCAK256 DUP2 SWAP2 POP SLOAD SWAP1 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_1046_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_1046_statistics.csv

Estimated initial gas: 2261
Estimated gas optimized: 2211

Estimated initial size in bytes: 42
Estimated size optimized in bytes: 55

Initial number of instructions: 36
Final number of instructions: 30

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1046;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;1046;2;True;True;False;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x02 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP;JUMPDEST DUP3 DUP1 SWAP2 POP POP POP DUP2 PUSH1 0x2 DUP3 SWAP3 POP PUSH1 0x20 MSTORE SWAP1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x0 PUSH1 0x40 SWAP3 POP MSTORE PUSH1 0x0 KECCAK256 DUP2 SWAP2 POP SLOAD SWAP1 JUMP;2261;42;36;2211;55;30;50;-13;6;True;False;False;False;2.1380959149682894;4;2;2100;2100

Block: 2774
2774Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
2774-Stack size: 3 
2774-Equals Mem:<< []>> 
2774-NonEquals Mem: << [<6,1>]>> 
2774-Equals Sto:<< []>> 
2774-NonEquals Sto: << []>> 
2774-Useless: []
2774-Constancy: []
2774-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP

Optimized sequence (basic block per line):
PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP

Optimized code stored in /tmp/0x00/HONGKONG_2774_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_2774_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2774;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;2774;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP;PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.029717516037635505;1;0;0;0

Block: 2831
2831Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x0b4a', 'DUP2', 'PUSH2 0x19d3', 'JUMP']>> 
2831-Stack size: 9 
2831-Equals Mem:<< []>> 
2831-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
2831-Equals Sto:<< [<31,43>]>> 
2831-NonEquals Sto: << []>> 
2831-Useless: []
2831-Constancy: [(2, 0)]
2831-ContextAliasing: [(6, 7)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>], 'storage_deps_eqs': [<30,42>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
Storage order: [(('0', 's(14)', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('s(15)', 's(17)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: [(('s(9)', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2), (('s(13)', 's(2)', 'mstore'), 2), (('0', 's(14)', 'keccak2560'), 2)]
Memory dep: [(2, 3), (1, 3)]
Memory dep simplified: [(2, 3), (1, 3)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b4a DUP2 PUSH2 0x19d3 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b4a DUP2 PUSH2 0x19d3 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_2831_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_2831_statistics.csv

Estimated initial gas: 5172
Estimated gas optimized: 5172

Estimated initial size in bytes: 59
Estimated size optimized in bytes: 59

Initial number of instructions: 49
Final number of instructions: 49

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2831;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;2831;2;True;False;False;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b4a DUP2 PUSH2 0x19d3 JUMP;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b4a DUP2 PUSH2 0x19d3 JUMP;5172;59;49;5172;59;49;0;0;0;True;True;False;False;2.5920648659812286;3;2;5000;5000

Block: 1838
1838Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
1838-Stack size: 2 
1838-Equals Mem:<< []>> 
1838-NonEquals Mem: << [<6,1>]>> 
1838-Equals Sto:<< []>> 
1838-NonEquals Sto: << []>> 
1838-Useless: []
1838-Constancy: []
1838-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP

Optimized sequence (basic block per line):
PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP

Optimized code stored in /tmp/0x00/HONGKONG_1838_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_1838_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1838;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;1838;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP;PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.02743436401942745;1;0;0;0

Block: 1880
1880Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
1880-Stack size: 2 
1880-Equals Mem:<< []>> 
1880-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
1880-Equals Sto:<< []>> 
1880-NonEquals Sto: << []>> 
1880-Useless: []
1880-Constancy: []
1880-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '23', 'mstore'), 2), (('s(10)', '52670383177537149983225730548340231168144935501260929414795948319927108108288', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_1880_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_1880_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1880;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;1880;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0524 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x524 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.103242616984062;1;3;0;0

Block: 2103
2103Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x085b', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
2103-Stack size: 6 
2103-Equals Mem:<< [<18,6>]>> 
2103-NonEquals Mem: << []>> 
2103-Equals Sto:<< []>> 
2103-NonEquals Sto: << []>> 
2103-Useless: []
2103-Constancy: []
2103-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2103 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2234
2234Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x08de', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
2234-Stack size: 9 
2234-Equals Mem:<< [<18,6>]>> 
2234-NonEquals Mem: << []>> 
2234-Equals Sto:<< []>> 
2234-NonEquals Sto: << []>> 
2234-Useless: []
2234-Constancy: []
2234-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2234 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2344
2344Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x094c', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
2344-Stack size: 6 
2344-Equals Mem:<< [<18,6>]>> 
2344-NonEquals Mem: << []>> 
2344-Equals Sto:<< []>> 
2344-NonEquals Sto: << []>> 
2344-Useless: []
2344-Constancy: []
2344-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2344 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2380
2380Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'SWAP1', 'SWAP2', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH1 0x13', 'SLOAD', 'AND', 'PUSH4 0xf305d719', 'SELFBALANCE', 'ADDRESS', 'PUSH2 0x0993', 'DUP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2380-Stack size: 3 
2380-Equals Mem:<< []>> 
2380-NonEquals Mem: << [<41,44>]>> 
2380-Equals Sto:<< [<3,23>]>> 
2380-NonEquals Sto: << [<3,25>, <3,48>, <23,25>, <23,48>, <25,48>]>> 
2380-Useless: []
2380-Constancy: []
2380-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<40,43>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<40,43>], 'storage_deps_eqs': [<2,22>], 'storage_deps_noneqs': [<2,24>, <2,47>, <22,24>, <22,47>, <24,47>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('20', 'sload0'), 1), 0), 22: ((('20', 's(14)', 'sstore'), 2), 1), 24: ((('19', 'sload1'), 1), 2), 47: ((('s(6)', 'sload2'), 1), 4)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(14)', 'sstore'), 2), (('19', 'sload1'), 1), (('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: [(('0', 's(22)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
AND(ADDRESS,2^160)
[RULE]: Simplification rule type 2: {'id': 'ADDRESS_0', 'opcode': '30', 'disasm': 'ADDRESS', 'inpt_sk': [], 'outpt_sk': ['s(22)'], 'push': False, 'gas': 2, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Delete rules: [{'id': 'AND_3', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(22)'], 'outpt_sk': ['s(22)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}]
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('19', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('s(6)', 'sload2'), 1)
sload2
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 22: ((('20', 's(14)', 'sstore'), 2), 1), 24: ((('19', 'sload1'), 1), 2), 47: ((('s(6)', 'sload2'), 1), 4)}
(('20', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('19', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('s(6)', 'sload2'), 1)
sload2
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x0993 DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x0993 DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_2380_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_2380_statistics.csv

Estimated initial gas: 9371
Estimated gas optimized: 9371

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 71

Initial number of instructions: 51
Final number of instructions: 51

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2380;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;2380;2;True;False;False;JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x0993 DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP;JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x0993 DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP;9371;71;51;9371;71;51;0;0;0;True;True;False;False;2.3184649840113707;8;2;9200;9200

Block: 2572
2572Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0a31', 'SWAP2', 'SWAP1', 'PUSH2 0x1a06', 'JUMP']>> 
2572-Stack size: 7 
2572-Equals Mem:<< [<19,7>]>> 
2572-NonEquals Mem: << []>> 
2572-Equals Sto:<< []>> 
2572-NonEquals Sto: << []>> 
2572-Useless: []
2572-Constancy: []
2572-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<6,18>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<6,18>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(5)', 's(8)', '+'), 2), (('s(8)', '31', '+'), 2), (('s(12)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(5)', 's(11)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(5)', 's(8)', '+'), 2), (('s(8)', '31', '+'), 2), (('s(12)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(5)', 's(11)', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2572 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2694
2694Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0aaa', 'SWAP2', 'SWAP1', 'PUSH2 0x1a31', 'JUMP']>> 
2694-Stack size: 6 
2694-Equals Mem:<< [<18,6>]>> 
2694-NonEquals Mem: << []>> 
2694-Equals Sto:<< []>> 
2694-NonEquals Sto: << []>> 
2694-Useless: []
2694-Constancy: []
2694-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2694 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 472
472Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
472-Stack size: 2 
472-Equals Mem:<< []>> 
472-NonEquals Mem: << [<5,2>]>> 
472-Equals Sto:<< []>> 
472-NonEquals Sto: << []>> 
472-Useless: []
472-Constancy: []
472-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(0)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP

Optimized code stored in /tmp/0x00/HONGKONG_472_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_472_statistics.csv

Estimated initial gas: 33
Estimated gas optimized: 33

Estimated initial size in bytes: 14
Estimated size optimized in bytes: 14

Initial number of instructions: 10
Final number of instructions: 10

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_472;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;472;2;False;True;True;JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP;JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP;33;14;10;33;14;10;0;0;0;True;False;False;False;0.01824305095942691;0;0;0;0

Block: 435
435Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
435-Stack size: 2 
435-Equals Mem:<< []>> 
435-NonEquals Mem: << [<7,2>]>> 
435-Equals Sto:<< []>> 
435-NonEquals Sto: << []>> 
435-Useless: []
435-Constancy: []
435-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('s(0)', 'iszero'), 1), (('s(5)', 'iszero'), 1)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('s(0)', 'iszero'), 1), (('s(5)', 'iszero'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP

Optimized code stored in /tmp/0x00/HONGKONG_435_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_435_statistics.csv

Estimated initial gas: 39
Estimated gas optimized: 39

Estimated initial size in bytes: 16
Estimated size optimized in bytes: 16

Initial number of instructions: 12
Final number of instructions: 12

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_435;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;435;2;False;True;True;JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP;JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP;39;16;12;39;16;12;0;0;0;True;False;False;False;0.05059501598589122;0;0;0;0

Block: 855
855Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH8 0x484f4e474b4f4e47', 'PUSH1 0xc0', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x017e', 'JUMP']>> 
855-Stack size: 2 
855-Equals Mem:<< [<10,4>]>> 
855-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
855-Equals Sto:<< []>> 
855-NonEquals Sto: << []>> 
855-Useless: []
855-Constancy: []
855-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>]}
{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('192', '5210469362004086343', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(3)', 'mstore'), 2), (('s(2)', '8', 'mstore'), 2), (('s(6)', '32706646274414981733577823603939732655876665184619519287809199388535530979328', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3)]
Memory dep simplified: [(2, 3), (1, 2), (0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(2)', '+'), 2), (('s(2)', '32', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(2)', '+'), 2), (('s(2)', '32', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_855 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5722
5722Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5722-Stack size: 4 
5722-Equals Mem:<< []>> 
5722-NonEquals Mem: << [<12,7>, <5,7>]>> 
5722-Equals Sto:<< []>> 
5722-NonEquals Sto: << []>> 
5722-Useless: []
5722-Constancy: []
5722-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<6,11>, <4,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<6,11>, <4,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(1)', '32', 'mstore'), 2), (('s(0)', 'mload0'), 1), (('s(7)', 's(6)', 'mstore'), 2)]
Memory dep: [(0, 2)]
Memory dep simplified: [(0, 2)]
********************IT*********************
(('s(0)', 'mload0'), 1)
mload0
[(('s(0)', 'mload0'), 1), (('s(1)', '32', '+'), 2)]
{}
(('s(0)', 'mload0'), 1)
mload0
[(('s(0)', 'mload0'), 1), (('s(1)', '32', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0

Optimized code stored in /tmp/0x00/HONGKONG_5722_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_5722_statistics.csv

Estimated initial gas: 38
Estimated gas optimized: 38

Estimated initial size in bytes: 15
Estimated size optimized in bytes: 15

Initial number of instructions: 14
Final number of instructions: 14

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5722;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;5722;2;False;True;True;JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0;JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0;38;15;14;38;15;14;0;0;0;True;False;False;False;0.1497333840234205;0;1;0;0

Block: 5746
5746Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1669', 'JUMP']>> 
5746-Stack size: 8 
5746-Equals Mem:<< []>> 
5746-NonEquals Mem: << [<11,5>]>> 
5746-Equals Sto:<< []>> 
5746-NonEquals Sto: << []>> 
5746-Useless: []
5746-Constancy: [(2, 32), (3, 0)]
5746-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,11>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,11>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(10)', 'mload0'), 1), (('s(8)', 's(12)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(10)', 'mload0'), 1)
mload0
[(('s(3)', 's(5)', '+'), 2), (('s(5)', 's(1)', '+'), 2), (('64', 's(9)', '+'), 2), (('s(5)', 's(0)', '+'), 2), (('s(3)', 's(11)', '+'), 2), (('s(10)', 'mload0'), 1)]
{}
(('s(10)', 'mload0'), 1)
mload0
[(('s(3)', 's(5)', '+'), 2), (('s(5)', 's(1)', '+'), 2), (('64', 's(9)', '+'), 2), (('s(5)', 's(0)', '+'), 2), (('s(3)', 's(11)', '+'), 2), (('s(10)', 'mload0'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1669 JUMP

Optimized sequence (basic block per line):
DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1669 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_5746_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_5746_statistics.csv

Estimated initial gas: 53
Estimated gas optimized: 53

Estimated initial size in bytes: 19
Estimated size optimized in bytes: 19

Initial number of instructions: 16
Final number of instructions: 16

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5746;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;5746;2;False;True;True;DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1669 JUMP;DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1669 JUMP;53;19;16;53;19;16;0;0;0;True;False;False;False;0.6725490429671481;0;0;0;0

Block: 796
796Instr:<<['JUMPDEST', 'POP', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
796-Stack size: 2 
796-Equals Mem:<< []>> 
796-NonEquals Mem: << [<15,5>]>> 
796-Equals Sto:<< []>> 
796-NonEquals Sto: << []>> 
796-Useless: []
796-Constancy: []
796-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('0', 'sload0'), 1), 0)}
Storage order: [(('0', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(5)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('0', 'sload0'), 1), 0)}
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_796 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1642
1642Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
1642-Stack size: 2 
1642-Equals Mem:<< []>> 
1642-NonEquals Mem: << [<6,1>]>> 
1642-Equals Sto:<< []>> 
1642-NonEquals Sto: << []>> 
1642-Useless: []
1642-Constancy: []
1642-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP

Optimized sequence (basic block per line):
PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP

Optimized code stored in /tmp/0x00/HONGKONG_1642_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_1642_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1642;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;1642;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP;PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.026870692963711917;1;0;0;0

Block: 1529
1529Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
1529-Stack size: 2 
1529-Equals Mem:<< []>> 
1529-NonEquals Mem: << [<6,1>]>> 
1529-Equals Sto:<< []>> 
1529-NonEquals Sto: << []>> 
1529-Useless: []
1529-Constancy: []
1529-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP

Optimized sequence (basic block per line):
PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP

Optimized code stored in /tmp/0x00/HONGKONG_1529_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_1529_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1529;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;1529;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP;PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.028175265004392713;1;0;0;0

Block: 698
698Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
698-Stack size: 3 
698-Equals Mem:<< []>> 
698-NonEquals Mem: << [<10,13>]>> 
698-Equals Sto:<< []>> 
698-NonEquals Sto: << []>> 
698-Useless: []
698-Constancy: []
698-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(2)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(4)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(2)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(2)', 'sload0'), 1), 1)}
(('s(2)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_698 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1465
1465Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'DUP1', 'ISZERO', 'PUSH2 0x05d7', 'JUMPI']>> 
1465-Stack size: 2 
1465-Equals Mem:<< []>> 
1465-NonEquals Mem: << [<5,8>]>> 
1465-Equals Sto:<< []>> 
1465-NonEquals Sto: << []>> 
1465-Useless: []
1465-Constancy: []
1465-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(3)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('s(4)', 'iszero'), 1), (('address', 'address'), 0)]
{11: ((('s(3)', 'sload0'), 1), 1)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('s(4)', 'iszero'), 1), (('address', 'address'), 0)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1465 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 623
623Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'SWAP1', 'JUMP']>> 
623-Stack size: 3 
623-Equals Mem:<< []>> 
623-NonEquals Mem: << [<10,13>]>> 
623-Equals Sto:<< []>> 
623-NonEquals Sto: << []>> 
623-Useless: []
623-Constancy: []
623-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(3)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('255', 's(4)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(3)', 'sload0'), 1), 1)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('255', 's(4)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_623 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5940
5940Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5940-Stack size: 11 
5940-Equals Mem:<< []>> 
5940-NonEquals Mem: << [<5,8>]>> 
5940-Equals Sto:<< []>> 
5940-NonEquals Sto: << []>> 
5940-Useless: []
5940-Constancy: []
5940-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '65', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5940 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 6074
6074Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x17d7', 'JUMPI']>> 
6074-Stack size: 13 
6074-Equals Mem:<< []>> 
6074-NonEquals Mem: << [<2,5>]>> 
6074-Equals Sto:<< []>> 
6074-NonEquals Sto: << []>> 
6074-Useless: []
6074-Constancy: [(7, 0), (6, 32)]
6074-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 's(9)', 'mstore'), 2), (('s(8)', 's(6)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
{}
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x17d7 JUMPI

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x17d7 JUMPI

Optimized code stored in /tmp/0x00/HONGKONG_6074_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_6074_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 26
Estimated size optimized in bytes: 26

Initial number of instructions: 23
Final number of instructions: 23

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_6074;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;6074;2;True;False;False;JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x17d7 JUMPI;JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x17d7 JUMPI;73;26;23;73;26;23;0;0;0;True;False;False;False;2.170648881990928;0;0;0;0

Block: 1293
1293Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP1', 'PUSH2 0x198a', 'JUMP']>> 
1293-Stack size: 3 
1293-Equals Mem:<< []>> 
1293-NonEquals Mem: << [<6,1>]>> 
1293-Equals Sto:<< []>> 
1293-NonEquals Sto: << []>> 
1293-Useless: [6]
1293-Constancy: []
1293-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP

Optimized sequence (basic block per line):
PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP

Optimized code stored in /tmp/0x00/HONGKONG_1293_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_1293_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1293;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;1293;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP1 PUSH2 0x198a JUMP;PUSH2 0x524 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x198a JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.028953670000191778;1;0;0;0

Block: 1358
1358Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x0589', 'DUP2', 'PUSH2 0x19d3', 'JUMP']>> 
1358-Stack size: 9 
1358-Equals Mem:<< []>> 
1358-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
1358-Equals Sto:<< [<31,43>]>> 
1358-NonEquals Sto: << []>> 
1358-Useless: []
1358-Constancy: [(4, 0), (2, 0)]
1358-ContextAliasing: [(6, 7)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>], 'storage_deps_eqs': [<30,42>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
Storage order: [(('0', 's(14)', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('s(15)', 's(17)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: [(('s(9)', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2), (('s(13)', 's(2)', 'mstore'), 2), (('0', 's(14)', 'keccak2560'), 2)]
Memory dep: [(2, 3), (1, 3)]
Memory dep simplified: [(2, 3), (1, 3)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0589 DUP2 PUSH2 0x19d3 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0589 DUP2 PUSH2 0x19d3 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_1358_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_1358_statistics.csv

Estimated initial gas: 5172
Estimated gas optimized: 5172

Estimated initial size in bytes: 59
Estimated size optimized in bytes: 59

Initial number of instructions: 49
Final number of instructions: 49

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1358;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;1358;2;True;False;False;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0589 DUP2 PUSH2 0x19d3 JUMP;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0589 DUP2 PUSH2 0x19d3 JUMP;5172;59;49;5172;59;49;0;0;0;True;True;False;False;2.5751008709776215;3;2;5000;5000

Block: 548
548Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x09', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
548-Stack size: 2 
548-Equals Mem:<< []>> 
548-NonEquals Mem: << [<6,3>]>> 
548-Equals Sto:<< []>> 
548-NonEquals Sto: << []>> 
548-Useless: []
548-Constancy: []
548-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '9', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_548 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3278
3278Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3278-Stack size: 9 
3278-Equals Mem:<< []>> 
3278-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3278-Equals Sto:<< []>> 
3278-NonEquals Sto: << []>> 
3278-Useless: []
3278-Constancy: [(4, 0)]
3278-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('216', '431415980915', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '37', 'mstore'), 2), (('s(10)', '31354931781638678607228669297131712859107492772550336241160036866987736981860', 'mstore'), 2), (('s(12)', '45433405612597180762055095701412804886438245671210399661410036396145969725440', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_3278_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_3278_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 85
Estimated size optimized in bytes: 85

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3278;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;3278;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;104;85;33;104;85;33;0;0;0;True;False;False;False;2.1211234510410577;2;4;0;0

Block: 3378
3378Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3378-Stack size: 9 
3378-Equals Mem:<< []>> 
3378-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3378-Equals Sto:<< []>> 
3378-NonEquals Sto: << []>> 
3378-Useless: []
3378-Constancy: [(4, 0)]
3378-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('232', '6648691', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '35', 'mstore'), 2), (('s(10)', '31354931781638678607228669297131712859126084785867252355217498662940140921970', 'mstore'), 2), (('s(12)', '45887578820189300338443374388718498632482616163288499555830078344056365121536', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_3378_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_3378_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3378;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;3378;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.1221883540274575;2;4;0;0

Block: 3469
3469Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3469-Stack size: 9 
3469-Equals Mem:<< []>> 
3469-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3469-Equals Sto:<< []>> 
3469-NonEquals Sto: << []>> 
3469-Useless: []
3469-Constancy: [(4, 0)]
3469-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('184', '2147343726488764904047', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '41', 'mstore'), 2), (('s(10)', '38196372293521921433411288587964294122161893341433871906636551770442498929184', 'mstore'), 2), (('s(12)', '52652714968805969334285930938125631089128480032472023743979857642711366500352', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_3469_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_3469_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 89
Estimated size optimized in bytes: 89

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3469;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;3469;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;104;89;33;104;89;33;0;0;0;True;False;False;False;2.1251615660148673;2;4;0;0

Block: 3607
3607Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e56', 'JUMPI']>> 
3607-Stack size: 10 
3607-Equals Mem:<< []>> 
3607-NonEquals Mem: << [<10,13>]>> 
3607-Equals Sto:<< []>> 
3607-NonEquals Sto: << []>> 
3607-Useless: []
3607-Constancy: [(5, 0), (0, 0)]
3607-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(8)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(16)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('255', 's(9)', 'and'), 2), (('s(7)', 'iszero'), 1), (('s(10)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(8)', 'sload0'), 1), 1)}
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('255', 's(9)', 'and'), 2), (('s(7)', 'iszero'), 1), (('s(10)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3607 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3641
3641Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3641-Stack size: 11 
3641-Equals Mem:<< []>> 
3641-NonEquals Mem: << [<11,14>]>> 
3641-Equals Sto:<< []>> 
3641-NonEquals Sto: << []>> 
3641-Useless: []
3641-Constancy: [(1, 0), (6, 0)]
3641-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3641 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5434
5434Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x162e', 'JUMP']>> 
5434-Stack size: 13 
5434-Equals Mem:<< [<11,6>]>> 
5434-NonEquals Mem: << [<11,15>, <15,20>, <15,6>, <20,6>, <11,20>]>> 
5434-Equals Sto:<< []>> 
5434-NonEquals Sto: << []>> 
5434-Useless: []
5434-Constancy: [(8, 0)]
5434-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2), (('s(8)', '26', 'mstore'), 2), (('s(12)', '37714057306925736537727338326753656978887423192446994710127794316522513498112', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x1533 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x162e JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x1533 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x162e JUMP

Optimized code stored in /tmp/0x00/HONGKONG_5434_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_5434_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 65
Estimated size optimized in bytes: 65

Initial number of instructions: 24
Final number of instructions: 24

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5434;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;5434;2;True;True;False;JUMPDEST PUSH0 PUSH2 0x1533 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x162e JUMP;JUMPDEST PUSH0 PUSH2 0x1533 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x162e JUMP;73;65;24;73;65;24;0;0;0;True;False;False;False;2.1388856430421583;0;1;0;0

Block: 3786
3786Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f5e', 'JUMPI']>> 
3786-Stack size: 10 
3786-Equals Mem:<< []>> 
3786-NonEquals Mem: << [<4,7>]>> 
3786-Equals Sto:<< []>> 
3786-NonEquals Sto: << []>> 
3786-Useless: []
3786-Constancy: [(5, 0)]
3786-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(4)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(6)', 'mstore'), 2), (('32', '5', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(4)', 'sload0'), 1)
sload0
[(('number', 'number'), 0), (('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1), (('s(3)', 's(5)', 'gt'), 2), (('origin', 'origin'), 0)]
{11: ((('s(4)', 'sload0'), 1), 1)}
(('s(4)', 'sload0'), 1)
sload0
[(('number', 'number'), 0), (('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1), (('s(3)', 's(5)', 'gt'), 2), (('origin', 'origin'), 0)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3786 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3807
3807Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3807-Stack size: 10 
3807-Equals Mem:<< []>> 
3807-NonEquals Mem: << [<33,1>, <6,1>, <11,1>, <16,1>, <21,1>, <26,1>]>> 
3807-Equals Sto:<< []>> 
3807-NonEquals Sto: << []>> 
3807-Useless: []
3807-Constancy: [(5, 0)]
3807-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,33>, <1,6>, <1,11>, <1,16>, <1,21>, <1,26>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,33>, <1,6>, <1,11>, <1,16>, <1,21>, <1,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('185', '298657957751934857751', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '73', 'mstore'), 2), (('s(10)', '43175464300754785199614199185070010317087193698741912792988322009422349034092', 'mstore'), 2), (('s(12)', '45860600759840658865901563111326240759021334497413467019838167414095995691883', 'mstore'), 2), (('s(14)', '14646143631966502206444807779315018622133502848875313473344638166890690117632', 'mstore'), 2)]
Memory dep: [(5, 6), (4, 6), (3, 6), (2, 6), (1, 6), (4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(5, 6), (4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('164', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2), (('s(3)', '132', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('164', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2), (('s(3)', '132', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x0524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_3807_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_3807_statistics.csv

Estimated initial gas: 119
Estimated gas optimized: 119

Estimated initial size in bytes: 127
Estimated size optimized in bytes: 127

Initial number of instructions: 38
Final number of instructions: 38

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3807;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;3807;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x0524 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x0524 JUMP;119;127;38;119;127;38;0;0;0;True;False;False;False;2.1812468899879605;2;5;0;0

Block: 3934
3934Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3934-Stack size: 10 
3934-Equals Mem:<< []>> 
3934-NonEquals Mem: << [<5,8>]>> 
3934-Equals Sto:<< []>> 
3934-NonEquals Sto: << []>> 
3934-Useless: []
3934-Constancy: [(5, 0)]
3934-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{13: ((('s(1)', 's(2)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(1)', 's(2)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(0)', 'mstore'), 2), (('32', '5', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
{13: ((('s(1)', 's(2)', 'sstore'), 2), 1)}
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3934 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4002
4002Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
4002-Stack size: 11 
4002-Equals Mem:<< []>> 
4002-NonEquals Mem: << [<11,14>]>> 
4002-Equals Sto:<< []>> 
4002-NonEquals Sto: << []>> 
4002-Useless: []
4002-Constancy: [(6, 0)]
4002-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '3', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4002 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4047
4047Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
4047-Stack size: 10 
4047-Equals Mem:<< []>> 
4047-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
4047-Equals Sto:<< []>> 
4047-NonEquals Sto: << []>> 
4047-Useless: []
4047-Constancy: [(5, 0)]
4047-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '25', 'mstore'), 2), (('s(10)', '31422294206539596639392900159971917510378963875690889976315079369673265905664', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_4047_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_4047_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4047;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;4047;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0524 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x524 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.1043332609697245;1;3;0;0

Block: 4118
4118Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x1038', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4118-Stack size: 10 
4118-Equals Mem:<< []>> 
4118-NonEquals Mem: << [<15,18>]>> 
4118-Equals Sto:<< []>> 
4118-NonEquals Sto: << [<2,22>]>> 
4118-Useless: []
4118-Constancy: [(5, 0)]
4118-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<14,17>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<14,17>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<1,21>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('16', 'sload0'), 1), 0), 21: ((('s(7)', 'sload1'), 1), 2)}
Storage order: [(('16', 'sload0'), 1), (('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('16', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
(('s(7)', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('16', 'sload0'), 1), 0), 21: ((('s(7)', 'sload1'), 1), 2)}
(('16', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
(('s(7)', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4118 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4169
4169Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
4169-Stack size: 10 
4169-Equals Mem:<< []>> 
4169-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
4169-Equals Sto:<< []>> 
4169-NonEquals Sto: << []>> 
4169-Useless: []
4169-Constancy: [(5, 0)]
4169-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '26', 'mstore'), 2), (('s(10)', '31422294206539596639392900160051577764598592111541354583441290478353383424000', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_4169_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_4169_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4169;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;4169;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0524 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x524 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.093431685003452;1;3;0;0

Block: 5686
5686Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
5686-Stack size: 20 
5686-Equals Mem:<< []>> 
5686-NonEquals Mem: << [<6,1>]>> 
5686-Equals Sto:<< []>> 
5686-NonEquals Sto: << []>> 
5686-Useless: []
5686-Constancy: [(1, 0), (15, 0), (6, 0)]
5686-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP2 SWAP1 PUSH2 0x165a JUMP

Optimized sequence (basic block per line):
PUSH2 0x524 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x165a JUMP

Optimized code stored in /tmp/0x00/HONGKONG_5686_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_5686_statistics.csv

Estimated initial gas: 47
Estimated gas optimized: 41

Estimated initial size in bytes: 24
Estimated size optimized in bytes: 51

Initial number of instructions: 14
Final number of instructions: 12

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5686;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;5686;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP2 SWAP1 PUSH2 0x165a JUMP;PUSH2 0x524 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x165a JUMP;47;24;14;41;51;12;6;-27;2;True;False;False;False;0.07317174499621615;1;0;0;0

Block: 6892
6892Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6892-Stack size: 22 
6892-Equals Mem:<< []>> 
6892-NonEquals Mem: << [<4,7>]>> 
6892-Equals Sto:<< []>> 
6892-NonEquals Sto: << []>> 
6892-Useless: []
6892-Constancy: [(0, 0)]
6892-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '18', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_6892 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5346
5346Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5346-Stack size: 17 
5346-Equals Mem:<< []>> 
5346-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5346-Equals Sto:<< []>> 
5346-NonEquals Sto: << []>> 
5346-Useless: []
5346-Constancy: [(1, 0), (12, 0)]
5346-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('248', '119', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '33', 'mstore'), 2), (('s(10)', '37714057306925736537727341711534603569002632158006504148307520321239491439727', 'mstore'), 2), (('s(12)', '53825228981408700216425575062632269666168469434418855940216611316178368856064', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_5346_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_5346_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 81
Estimated size optimized in bytes: 81

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5346;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;5346;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;104;81;33;104;81;33;0;0;0;True;False;False;False;2.1259833149961196;2;4;0;0

Block: 4344
4344Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x112e', 'JUMPI']>> 
4344-Stack size: 10 
4344-Equals Mem:<< []>> 
4344-NonEquals Mem: << [<5,8>]>> 
4344-Equals Sto:<< []>> 
4344-NonEquals Sto: << [<12,14>]>> 
4344-Useless: []
4344-Constancy: [(5, 0)]
4344-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<11,13>]}
[RULE]: Evaluate expression ('168', '1', 'shl')
{11: ((('s(15)', 'sload0'), 1), 1), 13: ((('20', 'sload1'), 1), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('20', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(17)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
(('20', 'sload1'), 1)
sload1
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
SFS with rule: isolated_block_0_0_input.json
{11: ((('s(15)', 'sload0'), 1), 1), 13: ((('20', 'sload1'), 1), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
(('20', 'sload1'), 1)
sload1
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4344 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5031
5031Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x13cb', 'SWAP2', 'SWAP1', 'PUSH2 0x19eb', 'JUMP']>> 
5031-Stack size: 10 
5031-Equals Mem:<< [<18,6>]>> 
5031-NonEquals Mem: << []>> 
5031-Equals Sto:<< []>> 
5031-NonEquals Sto: << []>> 
5031-Useless: []
5031-Constancy: []
5031-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5031 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 6591
6591Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6591-Stack size: 10 
6591-Equals Mem:<< []>> 
6591-NonEquals Mem: << [<5,8>]>> 
6591-Equals Sto:<< []>> 
6591-NonEquals Sto: << []>> 
6591-Useless: []
6591-Constancy: []
6591-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '50', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_6591 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5124
5124Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x143c', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1a76', 'JUMP']>> 
5124-Stack size: 6 
5124-Equals Mem:<< []>> 
5124-NonEquals Mem: << [<9,4>]>> 
5124-Equals Sto:<< []>> 
5124-NonEquals Sto: << []>> 
5124-Useless: []
5124-Constancy: []
5124-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,8>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,8>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('224', '2031798599', 'shl')
{1: ((('19', 'sload0'), 1), 0)}
Storage order: [(('19', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(13)', '54777181867431389256758088925318348688193376272078599187764269278199109648384', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('19', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('19', 'sload0'), 1), 0)}
(('19', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x143c SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1a76 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x143c SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1a76 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_5124_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_5124_statistics.csv

Estimated initial gas: 2208
Estimated gas optimized: 2208

Estimated initial size in bytes: 56
Estimated size optimized in bytes: 56

Initial number of instructions: 37
Final number of instructions: 37

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5124;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;5124;2;True;False;False;JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x143c SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1a76 JUMP;JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x143c SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1a76 JUMP;2208;56;37;2208;56;37;0;0;0;True;False;False;False;2.199736143986229;3;0;2100;2100

Block: 6774
6774Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6774-Stack size: 15 
6774-Equals Mem:<< []>> 
6774-NonEquals Mem: << [<13,21>, <7,21>, <24,21>, <18,21>]>> 
6774-Equals Sto:<< []>> 
6774-NonEquals Sto: << []>> 
6774-Useless: []
6774-Constancy: [(4, 0)]
6774-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,20>, <6,20>, <20,23>, <17,20>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,20>, <6,20>, <20,23>, <17,20>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(5)', 's(0)', 'mstore'), 2), (('s(15)', 's(1)', 'mstore'), 2), (('s(16)', '160', 'mstore'), 2), (('s(2)', 'mload0'), 1), (('s(17)', 's(12)', 'mstore'), 2)]
Memory dep: [(2, 4), (1, 4), (0, 4), (1, 2), (0, 2), (0, 1)]
Memory dep simplified: [(2, 4), (1, 2), (0, 1)]
********************IT*********************
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', 'mload0'), 1), (('s(5)', '192', '+'), 2), (('s(2)', '32', '+'), 2), (('s(5)', '32', '+'), 2), (('s(5)', '64', '+'), 2), (('s(5)', '160', '+'), 2)]
{}
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', 'mload0'), 1), (('s(5)', '192', '+'), 2), (('s(2)', '32', '+'), 2), (('s(5)', '32', '+'), 2), (('s(5)', '64', '+'), 2), (('s(5)', '160', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0

Optimized code stored in /tmp/0x00/HONGKONG_6774_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_6774_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 102

Estimated initial size in bytes: 41
Estimated size optimized in bytes: 41

Initial number of instructions: 36
Final number of instructions: 36

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_6774;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;6774;2;True;False;False;JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0;JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0;102;41;36;102;41;36;0;0;0;True;False;False;False;2.2814558829995804;0;3;0;0

Block: 6824
6824Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1a9f', 'JUMP']>> 
6824-Stack size: 21 
6824-Equals Mem:<< []>> 
6824-NonEquals Mem: << [<9,1>]>> 
6824-Equals Sto:<< []>> 
6824-NonEquals Sto: << []>> 
6824-Useless: []
6824-Constancy: [(5, 0), (10, 0), (3, 32)]
6824-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,9>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,9>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(0)', 'mload0'), 1), (('s(2)', 's(9)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(0)', 'mload0'), 1)
mload0
[(('1', 's(4)', '+'), 2), (('s(1)', 's(2)', '+'), 2), (('s(1)', 's(0)', '+'), 2), (('s(0)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('s(0)', 'mload0'), 1)
mload0
[(('1', 's(4)', '+'), 2), (('s(1)', 's(2)', '+'), 2), (('s(1)', 's(0)', '+'), 2), (('s(0)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP5 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x01 ADD PUSH2 0x1a9f JUMP

Optimized sequence (basic block per line):
PUSH1 0x1 ADD DUP4 DUP6 ADD SWAP5 MLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP4 DUP6 ADD SWAP4 MSTORE PUSH2 0x1a9f JUMP

Optimized code stored in /tmp/0x00/HONGKONG_6824_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_6824_statistics.csv

Estimated initial gas: 71
Estimated gas optimized: 53

Estimated initial size in bytes: 28
Estimated size optimized in bytes: 39

Initial number of instructions: 22
Final number of instructions: 16

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_6824;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;6824;2;True;True;False;DUP5 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x01 ADD PUSH2 0x1a9f JUMP;PUSH1 0x1 ADD DUP4 DUP6 ADD SWAP5 MLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP4 DUP6 ADD SWAP4 MSTORE PUSH2 0x1a9f JUMP;71;28;22;53;39;16;18;-11;6;True;False;False;False;2.1060979629983194;2;0;0;0

Block: 4508
4508Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x11b4', 'SWAP1', 'DUP3', 'PUSH2 0x158f', 'JUMP']>> 
4508-Stack size: 10 
4508-Equals Mem:<< []>> 
4508-NonEquals Mem: << [<4,7>]>> 
4508-Equals Sto:<< []>> 
4508-NonEquals Sto: << []>> 
4508-Useless: []
4508-Constancy: [(5, 0)]
4508-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(7)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('address', 'address'), 0)]
{11: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('address', 'address'), 0)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4508 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4532
4532Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1204', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4532-Stack size: 11 
4532-Equals Mem:<< []>> 
4532-NonEquals Mem: << [<13,19>, <5,34>, <8,34>, <5,8>, <34,13>, <34,19>, <5,19>, <8,19>]>> 
4532-Equals Sto:<< []>> 
4532-NonEquals Sto: << []>> 
4532-Useless: []
4532-Constancy: [(6, 0)]
4532-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,18>, <4,33>, <7,33>, <4,7>, <12,33>, <18,33>, <4,18>, <7,18>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,18>, <4,33>, <7,33>, <4,7>, <12,33>, <18,33>, <4,18>, <7,18>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(16)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(16)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2), (('64', 'mload0'), 1), (('s(10)', 's(3)', 'mstore'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(10)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('address', 'address'), 0), (('0', '64', 'keccak2560'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(16)', 's(4)', 'sstore'), 2), 1)}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(10)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('address', 'address'), 0), (('0', '64', 'keccak2560'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1204 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1204 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_4532_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_4532_statistics.csv

Estimated initial gas: 5142
Estimated gas optimized: 5142

Estimated initial size in bytes: 80
Estimated size optimized in bytes: 80

Initial number of instructions: 39
Final number of instructions: 39

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4532;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;4532;2;True;False;False;JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1204 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1204 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;5142;80;39;5142;80;39;0;0;0;True;False;False;False;2.2396834089886397;2;2;5000;5000

Block: 4621
4621Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x122f', 'SWAP1', 'DUP4', 'PUSH2 0x15ed', 'JUMP']>> 
4621-Stack size: 10 
4621-Equals Mem:<< []>> 
4621-NonEquals Mem: << [<11,14>]>> 
4621-Equals Sto:<< []>> 
4621-NonEquals Sto: << []>> 
4621-Useless: []
4621-Constancy: [(5, 0)]
4621-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(8)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(8)', 'sload0'), 1), 1)}
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4621 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5613
5613Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1533', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12d2', 'JUMP']>> 
5613-Stack size: 13 
5613-Equals Mem:<< [<11,6>]>> 
5613-NonEquals Mem: << [<11,15>, <15,20>, <15,6>, <20,6>, <11,20>]>> 
5613-Equals Sto:<< []>> 
5613-NonEquals Sto: << []>> 
5613-Useless: []
5613-Constancy: []
5613-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2), (('s(8)', '30', 'mstore'), 2), (('s(12)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x1533 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x12d2 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x1533 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x12d2 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_5613_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_5613_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 65
Estimated size optimized in bytes: 65

Initial number of instructions: 24
Final number of instructions: 24

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5613;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;5613;2;True;True;False;JUMPDEST PUSH0 PUSH2 0x1533 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x12d2 JUMP;JUMPDEST PUSH0 PUSH2 0x1533 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x12d2 JUMP;73;65;24;73;65;24;0;0;0;True;False;False;False;2.1285270980442874;0;1;0;0

Block: 4655
4655Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x1272', 'PUSH2 0x1254', 'DUP4', 'DUP4', 'PUSH2 0x15ed', 'JUMP']>> 
4655-Stack size: 11 
4655-Equals Mem:<< []>> 
4655-NonEquals Mem: << [<11,14>]>> 
4655-Equals Sto:<< []>> 
4655-NonEquals Sto: << []>> 
4655-Useless: []
4655-Constancy: [(6, 0)]
4655-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(12)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(12)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(12)', 's(4)', 'sstore'), 2), 1)}
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4655 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4692
4692Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x158f', 'JUMP']>> 
4692-Stack size: 12 
4692-Equals Mem:<< []>> 
4692-NonEquals Mem: << [<11,14>]>> 
4692-Equals Sto:<< []>> 
4692-NonEquals Sto: << []>> 
4692-Useless: []
4692-Constancy: [(7, 0)]
4692-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(7)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(7)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(7)', 'sload0'), 1), 1)}
(('s(7)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4692 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5542
5542Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
5542-Stack size: 15 
5542-Equals Mem:<< []>> 
5542-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
5542-Equals Sto:<< []>> 
5542-NonEquals Sto: << []>> 
5542-Useless: []
5542-Constancy: [(1, 0), (10, 0)]
5542-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '27', 'mstore'), 2), (('s(10)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_5542_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_5542_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5542;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;5542;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0524 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x524 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.0950024620397016;1;3;0;0

Block: 4722
4722Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x12bb', 'DUP6', 'DUP6', 'PUSH2 0x15ed', 'JUMP']>> 
4722-Stack size: 11 
4722-Equals Mem:<< []>> 
4722-NonEquals Mem: << [<12,15>]>> 
4722-Equals Sto:<< []>> 
4722-NonEquals Sto: << []>> 
4722-Useless: []
4722-Constancy: [(6, 0)]
4722-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{21: ((('s(20)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(20)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{21: ((('s(20)', 's(4)', 'sstore'), 2), 1)}
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4722 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4829
4829Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0524', 'SWAP2', 'SWAP1', 'PUSH2 0x165a', 'JUMP']>> 
4829-Stack size: 15 
4829-Equals Mem:<< []>> 
4829-NonEquals Mem: << [<6,1>]>> 
4829-Equals Sto:<< []>> 
4829-NonEquals Sto: << []>> 
4829-Useless: []
4829-Constancy: [(1, 0)]
4829-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP2 SWAP1 PUSH2 0x165a JUMP

Optimized sequence (basic block per line):
PUSH2 0x524 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x165a JUMP

Optimized code stored in /tmp/0x00/HONGKONG_4829_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_4829_statistics.csv

Estimated initial gas: 47
Estimated gas optimized: 41

Estimated initial size in bytes: 24
Estimated size optimized in bytes: 51

Initial number of instructions: 14
Final number of instructions: 12

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4829;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;4829;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0524 SWAP2 SWAP1 PUSH2 0x165a JUMP;PUSH2 0x524 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x165a JUMP;47;24;14;41;51;12;6;-27;2;True;False;False;False;0.07131828699493781;1;0;0;0

Block: 6257
6257Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6257-Stack size: 7 
6257-Equals Mem:<< []>> 
6257-NonEquals Mem: << [<5,8>]>> 
6257-Equals Sto:<< []>> 
6257-NonEquals Sto: << []>> 
6257-Useless: []
6257-Constancy: []
6257-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '17', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_6257 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2987
2987Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
2987-Stack size: 6 
2987-Equals Mem:<< []>> 
2987-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2987-Equals Sto:<< []>> 
2987-NonEquals Sto: << []>> 
2987-Useless: []
2987-Constancy: []
2987-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('224', '1919251315', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '36', 'mstore'), 2), (('s(10)', '31354931781638678487916134672869638484047149969764982831501014746446650500196', 'mstore'), 2), (('s(12)', '51742913093258732729005998692887265601192425265805909375210916622055285719040', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_2987_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_2987_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2987;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;2987;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.1310270309913903;2;4;0;0

Block: 3085
3085Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0524', 'JUMP']>> 
3085-Stack size: 6 
3085-Equals Mem:<< []>> 
3085-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3085-Equals Sto:<< []>> 
3085-NonEquals Sto: << []>> 
3085-Useless: []
3085-Constancy: []
3085-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('240', '29555', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '34', 'mstore'), 2), (('s(10)', '31354931781638678487916134672869638488806705378895508030211234510262059168357', 'mstore'), 2), (('s(12)', '52219164999525148860834357634456956735281286572158918307284071279203377479680', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP

Optimized code stored in /tmp/0x00/HONGKONG_3085_optimized.txt
Optimality results stored in /tmp/0x00/HONGKONG_3085_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 82
Estimated size optimized in bytes: 82

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3085;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;HONGKONG;3085;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0524 JUMP;104;82;33;104;82;33;0;0;0;True;False;False;False;2.1280589969828725;2;4;0;0

Block: 341
341Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x10', 'DUP2', 'MSTORE', 'PUSH16 0x4d61646520496e20486f6e676b6f6e67', 'PUSH1 0x80', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE']>> 
341-Stack size: 2 
341-Equals Mem:<< [<10,4>]>> 
341-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
341-Equals Sto:<< []>> 
341-NonEquals Sto: << []>> 
341-Useless: []
341-Constancy: []
341-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>]}
{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('128', '102856244723713471556244441490823016039', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(2)', 'mstore'), 2), (('s(1)', '16', 'mstore'), 2), (('s(5)', '35000166407184508380702076793004407468277694226178008631460613545598631542784', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3)]
Memory dep simplified: [(2, 3), (1, 2), (0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(1)', '+'), 2), (('s(1)', '32', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(1)', '+'), 2), (('s(1)', '32', '+'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_341 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 395
395Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
395-Stack size: 2 
395-Equals Mem:<< []>> 
395-NonEquals Mem: << []>> 
395-Equals Sto:<< []>> 
395-NonEquals Sto: << []>> 
395-Useless: []
395-Constancy: []
395-ContextAliasing: []

Block: 6680
6680Instr:<<['JUMPDEST', 'DUP4', 'MLOAD', 'SWAP3', 'POP', 'PUSH1 0x20', 'DUP5', 'ADD', 'MLOAD', 'SWAP2', 'POP', 'PUSH1 0x40', 'DUP5', 'ADD', 'MLOAD', 'SWAP1', 'POP', 'SWAP3', 'POP', 'SWAP3', 'POP', 'SWAP3', 'JUMP']>> 
6680-Stack size: 8 
6680-Equals Mem:<< []>> 
6680-NonEquals Mem: << [<2,8>, <2,14>, <8,14>]>> 
6680-Equals Sto:<< []>> 
6680-NonEquals Sto: << []>> 
6680-Useless: []
6680-Constancy: [(2, 0), (1, 0), (0, 0)]
6680-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,7>, <1,13>, <7,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,7>, <1,13>, <7,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(2)', 'mload0'), 1), (('s(8)', 'mload1'), 1), (('s(6)', 'mload2'), 1)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(8)', 'mload1'), 1)
mload1
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(6)', 'mload2'), 1)
mload2
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
{}
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(8)', 'mload1'), 1)
mload1
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(6)', 'mload2'), 1)
mload2
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_6680 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1316
1316Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1316-Stack size: 3 
1316-Equals Mem:<< []>> 
1316-NonEquals Mem: << []>> 
1316-Equals Sto:<< []>> 
1316-NonEquals Sto: << []>> 
1316-Useless: []
1316-Constancy: []
1316-ContextAliasing: []

Block: 1718
1718Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SSTORE', 'PUSH1 0x06', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'PUSH32 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf', 'PUSH2 0x06f0', 'PUSH1 0x09', 'PUSH1 0x0a', 'PUSH2 0x1965', 'JUMP']>> 
1718-Stack size: 3 
1718-Equals Mem:<< []>> 
1718-NonEquals Mem: << []>> 
1718-Equals Sto:<< [<5,10>]>> 
1718-NonEquals Sto: << [<2,5>, <2,10>]>> 
1718-Useless: []
1718-Constancy: []
1718-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<4,9>], 'storage_deps_noneqs': [<1,4>, <1,9>]}
{1: ((('16', 's(0)', 'sstore'), 2), 0), 4: ((('6', 'sload0'), 1), 1), 9: ((('6', 's(5)', 'sstore'), 2), 2)}
Storage order: [(('16', 's(0)', 'sstore'), 2), (('6', 'sload0'), 1), (('6', 's(5)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('6', 'sload0'), 1)
sload0
[(('6', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(6)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('16', 's(0)', 'sstore'), 2), 0), 4: ((('6', 'sload0'), 1), 1), 9: ((('6', 's(5)', 'sstore'), 2), 2)}
(('6', 'sload0'), 1)
sload0
[(('6', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(6)', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1718 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1951
1951Instr:<<['JUMPDEST', 'PUSH1 0x13', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH20 0x7a250d5630b4cf539739df2c5dacb4c659f2488d', 'SWAP1', 'DUP2', 'OR', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH2 0x07e7', 'SWAP1', 'ADDRESS', 'SWAP1', 'PUSH2 0x07da', 'PUSH1 0x09', 'PUSH1 0x0a', 'PUSH2 0x1965', 'JUMP']>> 
1951-Stack size: 2 
1951-Equals Mem:<< []>> 
1951-NonEquals Mem: << []>> 
1951-Equals Sto:<< [<3,17>]>> 
1951-NonEquals Sto: << []>> 
1951-Useless: []
1951-Constancy: []
1951-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<2,16>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('19', 'sload0'), 1), 0), 16: ((('19', 's(8)', 'sstore'), 2), 1)}
Storage order: [(('19', 'sload0'), 1), (('19', 's(8)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('19', 'sload0'), 1)
sload0
[(('address', 'address'), 0), (('19', 'sload0'), 1), ((115792089237316195423570985007226406215939081747436879206741300988257197096960, 's(12)', 'and'), 2), (('697323163401596485410334513241460920685086001293', 's(9)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('19', 'sload0'), 1), 0), 16: ((('19', 's(8)', 'sstore'), 2), 1)}
(('19', 'sload0'), 1)
sload0
[(('address', 'address'), 0), (('19', 'sload0'), 1), ((115792089237316195423570985007226406215939081747436879206741300988257197096960, 's(12)', 'and'), 2), (('697323163401596485410334513241460920685086001293', 's(9)', 'or'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_1951 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2730
2730Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH3 0xff00ff', 'PUSH1 0xa0', 'SHL', 'NOT', 'AND', 'PUSH3 0x010001', 'PUSH1 0xa0', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'JUMP']>> 
2730-Stack size: 3 
2730-Equals Mem:<< []>> 
2730-NonEquals Mem: << []>> 
2730-Equals Sto:<< [<4,15>]>> 
2730-NonEquals Sto: << []>> 
2730-Useless: []
2730-Constancy: []
2730-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<3,14>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '65537', 'shl')
[RULE]: Evaluate expression ('160', '16711935', 'shl')
{2: ((('20', 'sload0'), 1), 0), 14: ((('20', 's(1)', 'sstore'), 2), 1)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(1)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423546560488322440230209654367955723644191490340890530021375, 's(5)', 'and'), 2), (('95782432805755384550314892881727040259190851069018112', 's(3)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 14: ((('20', 's(1)', 'sstore'), 2), 1)}
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423546560488322440230209654367955723644191490340890530021375, 's(5)', 'and'), 2), (('95782432805755384550314892881727040259190851069018112', 's(3)', 'or'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2730 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2962
2962Instr:<<['JUMPDEST', 'PUSH1 0x09', 'DUP2', 'SWAP1', 'SSTORE', 'PUSH1 0x0a', 'SSTORE', 'JUMP']>> 
2962-Stack size: 3 
2962-Equals Mem:<< []>> 
2962-NonEquals Mem: << []>> 
2962-Equals Sto:<< []>> 
2962-NonEquals Sto: << [<4,6>]>> 
2962-Useless: []
2962-Constancy: []
2962-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<3,5>]}
{3: ((('9', 's(0)', 'sstore'), 2), 0), 5: ((('10', 's(0)', 'sstore'), 2), 1)}
Storage order: [(('9', 's(0)', 'sstore'), 2), (('10', 's(0)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
{3: ((('9', 's(0)', 'sstore'), 2), 0), 5: ((('10', 's(0)', 'sstore'), 2), 1)}
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_2962 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3678
3678Instr:<<['JUMPDEST', 'PUSH2 0x0e8a', 'PUSH1 0x64', 'PUSH2 0x0e84', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e79', 'JUMPI']>> 
3678-Stack size: 10 
3678-Equals Mem:<< []>> 
3678-NonEquals Mem: << []>> 
3678-Equals Sto:<< []>> 
3678-NonEquals Sto: << [<5,7>]>> 
3678-Useless: []
3678-Constancy: [(5, 0), (0, 0)]
3678-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<4,6>]}
{4: ((('11', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
Storage order: [(('11', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('11', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
{4: ((('11', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
(('11', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_3678 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4305
4305Instr:<<['PUSH2 0x10f5', 'PUSH1 0x64', 'PUSH2 0x0e84', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x10eb', 'JUMPI']>> 
4305-Stack size: 10 
4305-Equals Mem:<< []>> 
4305-NonEquals Mem: << []>> 
4305-Equals Sto:<< []>> 
4305-NonEquals Sto: << [<4,6>]>> 
4305-Useless: []
4305-Constancy: [(5, 0)]
4305-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<4,6>]}
{4: ((('12', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
Storage order: [(('12', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('12', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
{4: ((('12', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
(('12', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4305 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4439
4439Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4439-Stack size: 12 
4439-Equals Mem:<< []>> 
4439-NonEquals Mem: << []>> 
4439-Equals Sto:<< []>> 
4439-NonEquals Sto: << [<2,4>]>> 
4439-Useless: []
4439-Constancy: [(7, 0)]
4439-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<2,4>]}
{1: ((('13', 'sload0'), 1), 0), 3: ((('14', 'sload1'), 1), 1)}
Storage order: [(('13', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('13', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
{1: ((('13', 'sload0'), 1), 0), 3: ((('14', 'sload1'), 1), 1)}
(('13', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_4439 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5221
5221Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5221-Stack size: 10 
5221-Equals Mem:<< []>> 
5221-NonEquals Mem: << []>> 
5221-Equals Sto:<< [<5,12>]>> 
5221-NonEquals Sto: << []>> 
5221-Useless: []
5221-Constancy: []
5221-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<4,11>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('168', '255', 'shl')
{3: ((('20', 'sload0'), 1), 0), 11: ((('20', 's(6)', 'sstore'), 2), 1)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(6)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(8)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{3: ((('20', 'sload0'), 1), 0), 11: ((('20', 's(6)', 'sstore'), 2), 1)}
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(8)', 'and'), 2)]
BLOCK 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_HONGKONG_5221 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 66
66Instr:<<['JUMPDEST', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
66-Stack size: 1 
66-Equals Mem:<< [<5,16>]>> 
66-NonEquals Mem: << [<15,5>, <15,16>]>> 
66-Equals Sto:<< []>> 
66-NonEquals Sto: << []>> 
66-Useless: []
66-Constancy: []
66-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<4,15>], 'memory_deps_noneqs': [<4,14>, <14,15>]}
{'memory_deps_eqs': [<4,15>], 'memory_deps_noneqs': [<4,14>, <14,15>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('0', 'sload0'), 1), 0)}
Storage order: [(('0', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [32, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('s(5)', 's(5)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('s(5)', 's(5)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
MEJORADO: /tmp/gasol_b3c32db856a84b9391e91fdc6ee06040/jsons/isolated_block_0_0_input.json --- (6, 5)
{1: ((('0', 'sload0'), 1), 0)}
(('0', 'sload0'), 1)
sload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload1'), 1)
mload1
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP2 MSTORE RETURN

Optimized code stored in /tmp/0x00/Ownable_66_optimized.txt
Optimality results stored in /tmp/0x00/Ownable_66_statistics.csv

Estimated initial gas: 2166
Estimated gas optimized: 2125

Estimated initial size in bytes: 30
Estimated size optimized in bytes: 34

Initial number of instructions: 25
Final number of instructions: 11

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_Ownable_66;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;Ownable;66;2;False;True;True;JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN;JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP2 MSTORE RETURN;2166;30;25;2125;34;11;41;-4;14;True;False;False;False;0.13329530699411407;4;0;2100;2100

Block: 114
114Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'DUP2', 'SWAP1', 'MSTORE', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
114-Stack size: 2 
114-Equals Mem:<< [<1,26>]>> 
114-NonEquals Mem: << [<6,1>, <6,26>, <13,1>, <13,26>, <17,1>, <17,26>, <22,1>, <22,26>]>> 
114-Equals Sto:<< []>> 
114-NonEquals Sto: << []>> 
114-Useless: []
114-Constancy: [(0, 64)]
114-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<1,26>], 'memory_deps_noneqs': [<1,6>, <6,26>, <1,13>, <13,26>, <1,17>, <17,26>, <1,22>, <22,26>]}
{'memory_deps_eqs': [<1,26>], 'memory_deps_noneqs': [<1,6>, <6,26>, <1,13>, <13,26>, <1,17>, <17,26>, <1,22>, <22,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '32', 'mstore'), 2), (('s(13)', '35943731656364841964516503116990081338611484598491072354577564874054038349170', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(5)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(2)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
(('64', 'mload1'), 1)
mload1
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(2)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT

Optimized code stored in /tmp/0x00/Ownable_114_optimized.txt
Optimality results stored in /tmp/0x00/Ownable_114_statistics.csv

Estimated initial gas: 93
Estimated gas optimized: 93

Estimated initial size in bytes: 75
Estimated size optimized in bytes: 75

Initial number of instructions: 32
Final number of instructions: 32

GREENRES: 0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol_Ownable_114;0x00984B4dfe9c9B1B97404C4FADBE01d9AB884354.sol;Ownable;114;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT;93;75;32;93;75;32;0;0;0;True;False;False;False;2.1237189729581587;1;3;0;0

