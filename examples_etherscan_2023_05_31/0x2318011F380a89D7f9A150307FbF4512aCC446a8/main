// SPDX-License-Identifier: MIT
/**

 Telegram: https://t.me/cosmokittyeth
 Twitter: https://twitter.com/CosmoKittyETH

 Token founded & coded by AI

                                                .^^.                                                
                                               .7~!7.                                               
                                              .7^~?77.                                              
   ^^^.                                      .7^^~?J77.                                      .^~:   
  ^7???7!~:.                                :7^^^~?JJ!7.                                 .^!7JJ5J.  
  77?Y?JJJ?7!^.                            :7!^^^~?JJJ!7                             .^~7?JYJJJ5Y~  
 .???Y^.~?JJJJ?7~:.                       :77~~!77JYJJJ7!                         .^!??JJJ7^ !Y5Y?  
 ^??JY^:  :!?J?JJJ?!^.                    ??J77!~~JYYY5J7:                     :~7???JJ?~.  :7YY5J. 
 ~??JY^^~:  .~7???JJJ?!^.                ^J7~^::^~JJJJJYJ!                  :!7777?JJ7^   :~~!YY5Y: 
 !??JY^:^~~^   ^777??JJYJ!:             ~77~~!777!JYYYYJJ?^              :~777!!7JJ!:   :~!~^7YY5Y: 
 !??JY^::^~!!^.  :!77?JJJYYJ!:          ^?YYJ7~^:^?JJY555??           :~77!!!!7JJ!.  .^!!~~^:?J55Y: 
 ~?7JY!:::^~~!7~.  :7??JJJJYYY?~.      .~J7^:::^^~JJJJJJY5?.       .~77!!!~!7JJ~.  .^!!~~^^::JJ55Y. 
 :J7?Y?::::^~~!77!:  ^7JJJJJJYYYY?^. :!7~:::^^^~~~JJYYYYJJJJ?^  .^!77!!!!!?JJ!.  :~!!~~^^:::~?JPYJ  
  ?77JY~.::::^~!!77!^  ~JJJJJJJJYY5Y??7~^^^^~!~^:~JJ?JYYYYYJ7J7!?7!!!!!!7JY7. .^~!~~~^^:::::?7YPY!  
  ~?77J?:...:::^~!777!: .7YJJJJJJ??7Y77^^^~7~^:::!JJJJ?J5YYYJ!JJ~!77777?JJ^  ^!!~~~^::::::.!7?P5Y.  
   J77?J7:.....::^~!!77!. ~J?!~^:...777^^77^::^~7JY5YJY??YYYYJ~?. ..:^!7?^.:~~~~^^::::::..!??55Y!   
   :J!7?J?^.....:::^^~!!7~^::.......~?7~7!:^:~JYJ?7?55YY?!YJJJY5^^^^^^^^~~!!!7?!:::::...:7?75PYJ    
    ~J77JY~.....::^^^^~!!~^:::....   ^7??~^^?YY7~~~7JYPYJ7JPP5Y?7????JJJJJJJ?77^::::....:J?JPJY.    
  .: 7?7?J?:.....:!7!!!~~^^:.....      .^!?JYJ~~!!7?JJYYYPPPY!!!777??7~!!^::^~!~!!~:....7JYPYY^.:   
  ^YJ75J??JJ~.....:!7~^^^^^~~~:..       ~^~!~~~!!!7?JJJJJJJYJ!!!77?~:      ..:^^^~?:..^?Y55JP5YY!   
   ~JJYY???JY?~...:~!!!!!7!^:.          7JJJJJ7!~!?JJJJJJJJJ??!!77.       ....^^^~7.^7YY55J5PPY7    
    ^?JJJJJJJYYJ!^..:~7!~:               :7?J?!!!7JJJY55YYYJ??!!7^         ...^^~?7?Y555555P5Y!     
     :7JJJJJJJJY5?~^^^:..                   ^7!!!7JY?JYYYJJ7~.  .          ...:~?YPP555YY555?^      
       ^7JJJJJYY!....:..                     77!7JJJJJ....                  ....:~7J5P5555?~        
         :?Y?7J7....^^......::::.            .7??JJJ!.             .:^::...... :..^~7Y557^          
         .Y~:~!:....?!: ......:^!7~.           :^^:             .!?!^:.       .7^ .^~!?57           
        .5~:::::^...!5J~.        .~J!.                         !?~.        ..:7Y. .^~~?J5!          
        ?7.:::.:?^...~JPPY?7!~:.    ^^                        ^^   ..:~!777?J5Y. .:!!^7Y?5:         
       .5::::!~.!J7!!?YB&#BBBBG5?^.                              :~7YPBBBB#&&BJ!~~7J^:!JJJJ         
       !Y~^::~J?!?P#&&#5JJYPPPPGB#5!.                          :!Y#BBGPPP5JJ5B&&#GY!~!7?J?5         
       7J7!:::^?YPGGG#7~?J5555PP5!^7J^.                      .^J7:7GPP555PY?!7BGBBPYJ!!???5.7~      
     :!7Y7!~:...::^::J5~JJ7?JJJY5..^BG!.                    .~GP:.!BYYY7755J~YY::^^^^^77J?P?YJ      
     !JJ577!~:...... .!Y5Y77!!~~YGPBGP5!.                  .~5GGBG&5~!!~?Y55Y7.    .^!7??7JJJ?      
     ^Y?777!!~^:.....  .~J5Y7!!~~Y55J??Y~                  ^5J?JJYY~~!!!Y5J!.     .~!7777?JJY^      
      !J?7!!!!!~^^::...  ..~777777????777      .::::.      !77?JJJ?777!!~.      .:~!77777?JY7       
     ~?JYJ?7!!!!!!!!~~~!!7~:  .::::::...     :?!~~!?JJ^      ..:::^::.        .:~!!77777?J5Y7?      
      ~JY????7!!!~~~~!!!!!^.                 .^!???J7~.              .......:^~!!!!7777???YJ?.      
       .7YJ777!!!!!!~!!~~^:::^. ..        ^^    .?Y:    ^~           .~7!!!!!!!!!!!77?JJJJJ~        
        .!JY?77!!!!!!!!!!!!!7!.          .:~!!!7?YY?!!~~~:.        .~^:!??77!!!!!77777?J5Y:         
        .~?YJJ?7!!!!!!!!!777~....            .:J?77?5!.             ^7!!!!!!!!!!7777?JJYJ~          
           :!JYYJ?7!!!!!!!!!!!?!.              .~77!:             ..:~7??7!!!!!!7?JYYJ7:            
              :~?JYYJ??777??JJ7:..                                 ^7?77777777?JYY?!:               
                  :~!?JJJJYY?!~^^::...                           ..:~!7?JYJJJJ?!^.                  
                        ...~7???7!~~^^:::....              ....::^~!7?7~:....                       
                              :^!????77!!~~~^^^^:::::::::^^^~~!!77!~:.                              
                                   .:^~!777??7????7777777!!!~^::.                                   
                                            ............                            

              

**/
pragma solidity ^0.8.19;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;
        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }

}

contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

interface IUniswapV2Router02 {
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
}

contract COSMOKITTY is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private bots;
    mapping(address => uint256) private _holderLastTransferTimestamp;
    bool public transferDelayEnabled = true;
    address payable private _taxWallet;

    uint256 private _initialBuyTax=20;
    uint256 private _initialSellTax=20;
    uint256 private _finalBuyTax=0;
    uint256 private _finalSellTax=0;
    uint256 private _reduceBuyTaxAt=1;
    uint256 private _reduceSellTaxAt=20;
    uint256 private _preventSwapBefore=20;
    uint256 private _buyCount=0;

    uint8 private constant _decimals = 8;
    uint256 private constant _tTotal = 1000000000000 * 10**_decimals;
    string private constant _name = unicode"COSMOKITTY";
    string private constant _symbol = unicode"COSMOKITTY";
    uint256 public _maxTxAmount =   20000000000 * 10**_decimals;
    uint256 public _maxWalletSize = 40000000000 * 10**_decimals;
    uint256 public _taxSwapThreshold=2000000000 * 10**_decimals;
    uint256 public _maxTaxSwap=5000000000 * 10**_decimals;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;

    event MaxTxAmountUpdated(uint _maxTxAmount);
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor () {
        _taxWallet = payable(_msgSender());
        _balances[_msgSender()] = _tTotal;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_taxWallet] = true;

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount=0;
        if (from != owner() && to != owner()) {
            require(!bots[from] && !bots[to]);

            if (transferDelayEnabled) {
                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {
                  require(_holderLastTransferTimestamp[tx.origin] < block.number,"Only one transfer per block allowed.");
                  _holderLastTransferTimestamp[tx.origin] = block.number;
                }
            }

            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {
                require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");
                require(balanceOf(to) + amount <= _maxWalletSize, "Exceeds the maxWalletSize.");
                _buyCount++;
            }


            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);
            if(to == uniswapV2Pair && from!= address(this) ){
                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {
                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));
                uint256 contractETHBalance = address(this).balance;
                if(contractETHBalance > 0) {
                    sendETHToFee(address(this).balance);
                }
            }
        }

        if(taxAmount>0){
          _balances[address(this)]=_balances[address(this)].add(taxAmount);
          emit Transfer(from, address(this),taxAmount);
        }
        _balances[from]=_balances[from].sub(amount);
        _balances[to]=_balances[to].add(amount.sub(taxAmount));
        emit Transfer(from, to, amount.sub(taxAmount));
    }


    function min(uint256 a, uint256 b) private pure returns (uint256){
      return (a>b)?b:a;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        if(tokenAmount==0){return;}
        if(!tradingOpen){return;}
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function removeLimits() external onlyOwner{
        _maxTxAmount = _tTotal;
        _maxWalletSize=_tTotal;
        transferDelayEnabled=false;
        emit MaxTxAmountUpdated(_tTotal);
    }

    function sendETHToFee(uint256 amount) private {
        _taxWallet.transfer(amount);
    }

    function isBot(address a) public view returns (bool){
      return bots[a];
    }

    function openTrading() external onlyOwner() {
        require(!tradingOpen,"trading is already open");
        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        _approve(address(this), address(uniswapV2Router), _tTotal);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        swapEnabled = true;
        tradingOpen = true;
    }

    receive() external payable {}

    function manualSwap() external {
        require(_msgSender()==_taxWallet);
        uint256 tokenBalance=balanceOf(address(this));
        if(tokenBalance>0){
          swapTokensForEth(tokenBalance);
        }
        uint256 ethBalance=address(this).balance;
        if(ethBalance>0){
          sendETHToFee(ethBalance);
        }
    }

    
    
    
}
