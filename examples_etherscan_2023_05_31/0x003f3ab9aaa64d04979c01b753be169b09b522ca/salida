Green Main
*************************************************************
Compilation time: 0.3316913940361701s
*************************************************************
File: Ownable
Build CFG: 0.0048693289863877s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis Ownable
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract Ownable: 3
Memory read accesses ContractOwnable: 8
Memory write accesses ContractOwnable: 6
********************************** INIT
COMPACT CLONES: True
CONTRACT: Ownable
-----
Block: 66
66Instr:<<['JUMPDEST', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
66-Stack size: 1 
66-Equals Mem:<< [<5,16>]>> 
66-NonEquals Mem: << [<15,5>, <15,16>]>> 
66-Equals Sto:<< []>> 
66-NonEquals Sto: << []>> 
66-Useless: []
66-Constancy: []
66-ContextAliasing: []

.....
-----
Block: 114
114Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'DUP2', 'SWAP1', 'MSTORE', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
114-Stack size: 2 
114-Equals Mem:<< [<1,26>]>> 
114-NonEquals Mem: << [<6,1>, <6,26>, <13,1>, <13,26>, <17,1>, <17,26>, <22,1>, <22,26>]>> 
114-Equals Sto:<< []>> 
114-NonEquals Sto: << []>> 
114-Useless: []
114-Constancy: [(0, 64)]
114-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.0019502569921314716s

*************************************************************
File: SafeMath
Build CFG: 0.0007008829852566123s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis SafeMath
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract SafeMath: 0
Memory read accesses ContractSafeMath: 0
Memory write accesses ContractSafeMath: 1
********************************** INIT
COMPACT CLONES: True
CONTRACT: SafeMath
********************************** END
Memory Analysis: 0.00012744200648739934s

*************************************************************
File: WOK
Build CFG: 0.4664267139742151s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis WOK
Memory accesess analysis finished!


MEMRES: NOT Found read (potential optimization) -> <slot59,0> 1281:6 --> 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol WOK--delBots(address[])
GASOL: Useless accesses found: {'1281': [6]}
Free memory analyss finished


SLOTS Contract WOK: 92
Memory read accesses ContractWOK: 322
Memory write accesses ContractWOK: 588
********************************** INIT
GASOL: Adding block useless 1281
CONTEXT: Detected context equality 2 <slot5,0> 7 <slot5,0>
CONTEXT: Detected context equality 2 <slot5,0> 7 <slot5,0>
CONTEXT: Detected context equality 17 <slot21,0> 19 <slot21,0>
CONTEXT: Detected context equality 17 <slot21,0> 20 <slot21,0>
CONTEXT: Detected context equality 17 <slot21,0> 20 <slot21,0>
CONTEXT: Detected context equality 17 <slot26,0> 19 <slot26,0>
CONTEXT: Detected context equality 17 <slot26,0> 20 <slot26,0>
CONTEXT: Detected context equality 17 <slot26,0> 20 <slot26,0>
CONTEXT: Detected context equality 13 <slot29,0> 15 <slot29,0>
CONTEXT: Detected context equality 13 <slot29,0> 15 <slot29,0>
CONTEXT: Detected context equality 13 <slot29,0> 19 <slot29,0>
CONTEXT: Detected context equality 13 <slot29,0> 19 <slot29,0>
CONTEXT: Detected context equality 17 <slot37,0> 19 <slot37,0>
CONTEXT: Detected context equality 17 <slot37,0> 20 <slot37,0>
CONTEXT: Detected context equality 17 <slot37,0> 20 <slot37,0>
CONTEXT: Detected context equality 18 <slot39,0> 20 <slot39,0>
CONTEXT: Detected context equality 18 <slot39,0> 21 <slot39,0>
CONTEXT: Detected context equality 18 <slot39,0> 21 <slot39,0>
CONTEXT: Detected context equality 20 <slot42,0> 22 <slot42,0>
CONTEXT: Detected context equality 20 <slot42,0> 23 <slot42,0>
CONTEXT: Detected context equality 20 <slot42,0> 23 <slot42,0>
CONTEXT: Detected context equality 5 <slot52,0> 7 <slot52,0>
CONTEXT: Detected context equality 5 <slot52,0> 7 <slot52,0>
CONTEXT: Detected context equality 5 <slot52,0> 11 <slot52,0>
CONTEXT: Detected context equality 5 <slot52,0> 11 <slot52,0>
CONTEXT: Detected context equality 2 <slot58,0> 7 <slot58,0>
CONTEXT: Detected context equality 2 <slot58,0> 7 <slot58,0>
CONTEXT: Detected context equality 18 <slot64,0> 20 <slot64,0>
CONTEXT: Detected context equality 18 <slot64,0> 21 <slot64,0>
CONTEXT: Detected context equality 18 <slot64,0> 21 <slot64,0>
CONTEXT: Detected context equality 18 <slot69,0> 20 <slot69,0>
CONTEXT: Detected context equality 18 <slot69,0> 21 <slot69,0>
CONTEXT: Detected context equality 18 <slot69,0> 21 <slot69,0>
CONTEXT: Detected context equality 14 <slot72,0> 16 <slot72,0>
CONTEXT: Detected context equality 14 <slot72,0> 16 <slot72,0>
CONTEXT: Detected context equality 14 <slot72,0> 20 <slot72,0>
CONTEXT: Detected context equality 14 <slot72,0> 20 <slot72,0>
CONTEXT: Detected context equality 18 <slot80,0> 20 <slot80,0>
CONTEXT: Detected context equality 18 <slot80,0> 21 <slot80,0>
CONTEXT: Detected context equality 18 <slot80,0> 21 <slot80,0>
CONTEXT: Detected context equality 19 <slot82,0> 21 <slot82,0>
CONTEXT: Detected context equality 19 <slot82,0> 22 <slot82,0>
CONTEXT: Detected context equality 19 <slot82,0> 22 <slot82,0>
CONTEXT: Detected context equality 21 <slot85,0> 23 <slot85,0>
CONTEXT: Detected context equality 21 <slot85,0> 24 <slot85,0>
CONTEXT: Detected context equality 21 <slot85,0> 24 <slot85,0>
CONTEXT: Detected context equality 12 <slot87,0> 14 <slot87,0>
CONTEXT: Detected context equality 12 <slot87,0> 15 <slot87,0>
CONTEXT: Detected context equality 12 <slot87,0> 15 <slot87,0>
COMPACT CLONES: True
CONTRACT: WOK
-----
Block: 1033
1033Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x02', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
1033-Stack size: 4 
1033-Equals Mem:<< [<12,27>, <17,31>]>> 
1033-NonEquals Mem: << [<12,17>, <12,31>, <17,27>, <27,31>]>> 
1033-Equals Sto:<< []>> 
1033-NonEquals Sto: << []>> 
1033-Useless: []
1033-Constancy: []
1033-ContextAliasing: []

.....
-----
Block: 464_0
464_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
464_0-Stack size: 2 
464_0-Equals Mem:<< []>> 
464_0-NonEquals Mem: << [<5,2>]>> 
464_0-Equals Sto:<< []>> 
464_0-NonEquals Sto: << []>> 
464_0-Useless: []
464_0-Constancy: []
464_0-ContextAliasing: []

.....
-----
Block: 5932_2
5932_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5932_2-Stack size: 11 
5932_2-Equals Mem:<< []>> 
5932_2-NonEquals Mem: << [<5,8>]>> 
5932_2-Equals Sto:<< []>> 
5932_2-NonEquals Sto: << []>> 
5932_2-Useless: []
5932_2-Constancy: [(5, 0), (4, 32)]
5932_2-ContextAliasing: []

.....
-----
Block: 5932_1
5932_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5932_1-Stack size: 14 
5932_1-Equals Mem:<< []>> 
5932_1-NonEquals Mem: << [<5,8>]>> 
5932_1-Equals Sto:<< []>> 
5932_1-NonEquals Sto: << []>> 
5932_1-Useless: []
5932_1-Constancy: [(8, 0), (7, 32)]
5932_1-ContextAliasing: []

.....
-----
Block: 6066_0
6066_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x17cf', 'JUMPI']>> 
6066_0-Stack size: 13 
6066_0-Equals Mem:<< []>> 
6066_0-NonEquals Mem: << [<2,5>]>> 
6066_0-Equals Sto:<< []>> 
6066_0-NonEquals Sto: << []>> 
6066_0-Useless: []
6066_0-Constancy: [(7, 0), (6, 32)]
6066_0-ContextAliasing: []

.....
-----
Block: 2766
2766Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
2766-Stack size: 3 
2766-Equals Mem:<< []>> 
2766-NonEquals Mem: << [<6,1>]>> 
2766-Equals Sto:<< []>> 
2766-NonEquals Sto: << []>> 
2766-Useless: []
2766-Constancy: []
2766-ContextAliasing: []

.....
-----
Block: 6583_6
6583_6Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583_6-Stack size: 10 
6583_6-Equals Mem:<< []>> 
6583_6-NonEquals Mem: << [<5,8>]>> 
6583_6-Equals Sto:<< []>> 
6583_6-NonEquals Sto: << []>> 
6583_6-Useless: []
6583_6-Constancy: [(3, 0)]
6583_6-ContextAliasing: [(7, 7)]

.....
-----
Block: 2823
2823Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x0b42', 'DUP2', 'PUSH2 0x19cb', 'JUMP']>> 
2823-Stack size: 9 
2823-Equals Mem:<< []>> 
2823-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
2823-Equals Sto:<< [<31,43>]>> 
2823-NonEquals Sto: << []>> 
2823-Useless: []
2823-Constancy: [(2, 0)]
2823-ContextAliasing: [(6, 7)]

.....
-----
Block: 6249_39
6249_39Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_39-Stack size: 9 
6249_39-Equals Mem:<< []>> 
6249_39-NonEquals Mem: << [<5,8>]>> 
6249_39-Equals Sto:<< []>> 
6249_39-NonEquals Sto: << []>> 
6249_39-Useless: []
6249_39-Constancy: [(1, 0)]
6249_39-ContextAliasing: []

.....
-----
Block: 1829
1829Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
1829-Stack size: 2 
1829-Equals Mem:<< []>> 
1829-NonEquals Mem: << [<6,1>]>> 
1829-Equals Sto:<< []>> 
1829-NonEquals Sto: << []>> 
1829-Useless: []
1829-Constancy: []
1829-ContextAliasing: []

.....
-----
Block: 1871
1871Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
1871-Stack size: 2 
1871-Equals Mem:<< []>> 
1871-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
1871-Equals Sto:<< []>> 
1871-NonEquals Sto: << []>> 
1871-Useless: []
1871-Constancy: []
1871-ContextAliasing: []

.....
-----
Block: 6249_35
6249_35Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_35-Stack size: 10 
6249_35-Equals Mem:<< []>> 
6249_35-NonEquals Mem: << [<5,8>]>> 
6249_35-Equals Sto:<< []>> 
6249_35-NonEquals Sto: << []>> 
6249_35-Useless: []
6249_35-Constancy: []
6249_35-ContextAliasing: []

.....
-----
Block: 2979_4
2979_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
2979_4-Stack size: 6 
2979_4-Equals Mem:<< []>> 
2979_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2979_4-Equals Sto:<< []>> 
2979_4-NonEquals Sto: << []>> 
2979_4-Useless: []
2979_4-Constancy: []
2979_4-ContextAliasing: []

.....
-----
Block: 3077_4
3077_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3077_4-Stack size: 6 
3077_4-Equals Mem:<< []>> 
3077_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3077_4-Equals Sto:<< []>> 
3077_4-NonEquals Sto: << []>> 
3077_4-Useless: []
3077_4-Constancy: []
3077_4-ContextAliasing: []

.....
-----
Block: 2095
2095Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0853', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
2095-Stack size: 6 
2095-Equals Mem:<< [<18,6>]>> 
2095-NonEquals Mem: << []>> 
2095-Equals Sto:<< []>> 
2095-NonEquals Sto: << []>> 
2095-Useless: []
2095-Constancy: []
2095-ContextAliasing: []

.....
-----
Block: 2226
2226Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x08d6', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
2226-Stack size: 9 
2226-Equals Mem:<< [<18,6>]>> 
2226-NonEquals Mem: << []>> 
2226-Equals Sto:<< []>> 
2226-NonEquals Sto: << []>> 
2226-Useless: []
2226-Constancy: []
2226-ContextAliasing: []

.....
-----
Block: 2336
2336Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0944', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
2336-Stack size: 6 
2336-Equals Mem:<< [<18,6>]>> 
2336-NonEquals Mem: << []>> 
2336-Equals Sto:<< []>> 
2336-NonEquals Sto: << []>> 
2336-Useless: []
2336-Constancy: []
2336-ContextAliasing: []

.....
-----
Block: 2372
2372Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'SWAP1', 'SWAP2', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH1 0x13', 'SLOAD', 'AND', 'PUSH4 0xf305d719', 'SELFBALANCE', 'ADDRESS', 'PUSH2 0x098b', 'DUP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2372-Stack size: 3 
2372-Equals Mem:<< []>> 
2372-NonEquals Mem: << [<41,44>]>> 
2372-Equals Sto:<< [<3,23>]>> 
2372-NonEquals Sto: << [<3,25>, <3,48>, <23,25>, <23,48>, <25,48>]>> 
2372-Useless: []
2372-Constancy: []
2372-ContextAliasing: []

.....
-----
Block: 2564
2564Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0a29', 'SWAP2', 'SWAP1', 'PUSH2 0x19fe', 'JUMP']>> 
2564-Stack size: 7 
2564-Equals Mem:<< [<19,7>]>> 
2564-NonEquals Mem: << []>> 
2564-Equals Sto:<< []>> 
2564-NonEquals Sto: << []>> 
2564-Useless: []
2564-Constancy: []
2564-ContextAliasing: []

.....
-----
Block: 2686
2686Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0aa2', 'SWAP2', 'SWAP1', 'PUSH2 0x1a29', 'JUMP']>> 
2686-Stack size: 6 
2686-Equals Mem:<< [<18,6>]>> 
2686-NonEquals Mem: << []>> 
2686-Equals Sto:<< []>> 
2686-NonEquals Sto: << []>> 
2686-Useless: []
2686-Constancy: []
2686-ContextAliasing: []

.....
-----
Block: 6249_38
6249_38Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_38-Stack size: 20 
6249_38-Equals Mem:<< []>> 
6249_38-NonEquals Mem: << [<5,8>]>> 
6249_38-Equals Sto:<< []>> 
6249_38-NonEquals Sto: << []>> 
6249_38-Useless: []
6249_38-Constancy: [(11, 0), (7, 0)]
6249_38-ContextAliasing: []

.....
-----
Block: 6249_37
6249_37Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_37-Stack size: 16 
6249_37-Equals Mem:<< []>> 
6249_37-NonEquals Mem: << [<5,8>]>> 
6249_37-Equals Sto:<< []>> 
6249_37-NonEquals Sto: << []>> 
6249_37-Useless: []
6249_37-Constancy: [(7, 0), (3, 0)]
6249_37-ContextAliasing: []

.....
-----
Block: 6249_36
6249_36Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_36-Stack size: 15 
6249_36-Equals Mem:<< []>> 
6249_36-NonEquals Mem: << [<5,8>]>> 
6249_36-Equals Sto:<< []>> 
6249_36-NonEquals Sto: << []>> 
6249_36-Useless: []
6249_36-Constancy: [(6, 0), (2, 0)]
6249_36-ContextAliasing: []

.....
-----
Block: 427_0
427_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
427_0-Stack size: 3 
427_0-Equals Mem:<< []>> 
427_0-NonEquals Mem: << [<7,2>]>> 
427_0-Equals Sto:<< []>> 
427_0-NonEquals Sto: << []>> 
427_0-Useless: []
427_0-Constancy: []
427_0-ContextAliasing: []

.....
-----
Block: 464
464Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
464-Stack size: 3 
464-Equals Mem:<< []>> 
464-NonEquals Mem: << [<5,2>]>> 
464-Equals Sto:<< []>> 
464-NonEquals Sto: << []>> 
464-Useless: []
464-Constancy: []
464-ContextAliasing: []

.....
-----
Block: 3270_0
3270_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3270_0-Stack size: 9 
3270_0-Equals Mem:<< []>> 
3270_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3270_0-Equals Sto:<< []>> 
3270_0-NonEquals Sto: << []>> 
3270_0-Useless: []
3270_0-Constancy: [(4, 0)]
3270_0-ContextAliasing: []

.....
-----
Block: 3370_0
3370_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3370_0-Stack size: 9 
3370_0-Equals Mem:<< []>> 
3370_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3370_0-Equals Sto:<< []>> 
3370_0-NonEquals Sto: << []>> 
3370_0-Useless: []
3370_0-Constancy: [(4, 0)]
3370_0-ContextAliasing: []

.....
-----
Block: 3461_0
3461_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3461_0-Stack size: 9 
3461_0-Equals Mem:<< []>> 
3461_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3461_0-Equals Sto:<< []>> 
3461_0-NonEquals Sto: << []>> 
3461_0-Useless: []
3461_0-Constancy: [(4, 0)]
3461_0-ContextAliasing: []

.....
-----
Block: 3599_0
3599_0Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e4e', 'JUMPI']>> 
3599_0-Stack size: 10 
3599_0-Equals Mem:<< []>> 
3599_0-NonEquals Mem: << [<10,13>]>> 
3599_0-Equals Sto:<< []>> 
3599_0-NonEquals Sto: << []>> 
3599_0-Useless: []
3599_0-Constancy: [(5, 0), (0, 0)]
3599_0-ContextAliasing: []

.....
-----
Block: 3633_0
3633_0Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3633_0-Stack size: 11 
3633_0-Equals Mem:<< []>> 
3633_0-NonEquals Mem: << [<11,14>]>> 
3633_0-Equals Sto:<< []>> 
3633_0-NonEquals Sto: << []>> 
3633_0-Useless: []
3633_0-Constancy: [(6, 0), (1, 0)]
3633_0-ContextAliasing: []

.....
-----
Block: 5426_1
5426_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1626', 'JUMP']>> 
5426_1-Stack size: 13 
5426_1-Equals Mem:<< [<11,6>]>> 
5426_1-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5426_1-Equals Sto:<< []>> 
5426_1-NonEquals Sto: << []>> 
5426_1-Useless: []
5426_1-Constancy: [(8, 0), (3, 0)]
5426_1-ContextAliasing: []

.....
-----
Block: 5678_2
5678_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
5678_2-Stack size: 20 
5678_2-Equals Mem:<< []>> 
5678_2-NonEquals Mem: << [<6,1>]>> 
5678_2-Equals Sto:<< []>> 
5678_2-NonEquals Sto: << []>> 
5678_2-Useless: []
5678_2-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
5678_2-ContextAliasing: [(2, 19)]

.....
-----
Block: 5714_10
5714_10Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_10-Stack size: 22 
5714_10-Equals Mem:<< []>> 
5714_10-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_10-Equals Sto:<< []>> 
5714_10-NonEquals Sto: << []>> 
5714_10-Useless: []
5714_10-Constancy: [(17, 0), (12, 0), (8, 0), (3, 0)]
5714_10-ContextAliasing: [(4, 20)]

.....
-----
Block: 5738_10
5738_10Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_10-Stack size: 26 
5738_10-Equals Mem:<< []>> 
5738_10-NonEquals Mem: << [<11,5>]>> 
5738_10-Equals Sto:<< []>> 
5738_10-NonEquals Sto: << []>> 
5738_10-Useless: []
5738_10-Constancy: [(21, 0), (16, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_10-ContextAliasing: [(8, 20)]

.....
-----
Block: 6884_5
6884_5Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884_5-Stack size: 24 
6884_5-Equals Mem:<< []>> 
6884_5-NonEquals Mem: << [<4,7>]>> 
6884_5-Equals Sto:<< []>> 
6884_5-NonEquals Sto: << []>> 
6884_5-Useless: []
6884_5-Constancy: [(19, 0), (14, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6884_5-ContextAliasing: []

.....
-----
Block: 3778_0
3778_0Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f56', 'JUMPI']>> 
3778_0-Stack size: 10 
3778_0-Equals Mem:<< []>> 
3778_0-NonEquals Mem: << [<4,7>]>> 
3778_0-Equals Sto:<< []>> 
3778_0-NonEquals Sto: << []>> 
3778_0-Useless: []
3778_0-Constancy: [(5, 0)]
3778_0-ContextAliasing: []

.....
-----
Block: 3799_0
3799_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3799_0-Stack size: 10 
3799_0-Equals Mem:<< []>> 
3799_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <26,1>, <33,1>]>> 
3799_0-Equals Sto:<< []>> 
3799_0-NonEquals Sto: << []>> 
3799_0-Useless: []
3799_0-Constancy: [(5, 0)]
3799_0-ContextAliasing: []

.....
-----
Block: 3926_0
3926_0Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3926_0-Stack size: 10 
3926_0-Equals Mem:<< []>> 
3926_0-NonEquals Mem: << [<5,8>]>> 
3926_0-Equals Sto:<< []>> 
3926_0-NonEquals Sto: << []>> 
3926_0-Useless: []
3926_0-Constancy: [(5, 0)]
3926_0-ContextAliasing: []

.....
-----
Block: 3994_0
3994_0Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3994_0-Stack size: 11 
3994_0-Equals Mem:<< []>> 
3994_0-NonEquals Mem: << [<11,14>]>> 
3994_0-Equals Sto:<< []>> 
3994_0-NonEquals Sto: << []>> 
3994_0-Useless: []
3994_0-Constancy: [(6, 0)]
3994_0-ContextAliasing: []

.....
-----
Block: 4039_0
4039_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
4039_0-Stack size: 10 
4039_0-Equals Mem:<< []>> 
4039_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4039_0-Equals Sto:<< []>> 
4039_0-NonEquals Sto: << []>> 
4039_0-Useless: []
4039_0-Constancy: [(5, 0)]
4039_0-ContextAliasing: []

.....
-----
Block: 4110_0
4110_0Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x1030', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4110_0-Stack size: 10 
4110_0-Equals Mem:<< []>> 
4110_0-NonEquals Mem: << [<15,18>]>> 
4110_0-Equals Sto:<< []>> 
4110_0-NonEquals Sto: << [<2,22>]>> 
4110_0-Useless: []
4110_0-Constancy: [(5, 0)]
4110_0-ContextAliasing: []

.....
-----
Block: 6249_33
6249_33Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_33-Stack size: 16 
6249_33-Equals Mem:<< []>> 
6249_33-NonEquals Mem: << [<5,8>]>> 
6249_33-Equals Sto:<< []>> 
6249_33-NonEquals Sto: << []>> 
6249_33-Useless: []
6249_33-Constancy: [(11, 0)]
6249_33-ContextAliasing: []

.....
-----
Block: 4161_0
4161_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
4161_0-Stack size: 10 
4161_0-Equals Mem:<< []>> 
4161_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4161_0-Equals Sto:<< []>> 
4161_0-NonEquals Sto: << []>> 
4161_0-Useless: []
4161_0-Constancy: [(5, 0)]
4161_0-ContextAliasing: []

.....
-----
Block: 6249_32
6249_32Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_32-Stack size: 17 
6249_32-Equals Mem:<< []>> 
6249_32-NonEquals Mem: << [<5,8>]>> 
6249_32-Equals Sto:<< []>> 
6249_32-NonEquals Sto: << []>> 
6249_32-Useless: []
6249_32-Constancy: [(12, 0), (4, 0), (1, 0)]
6249_32-ContextAliasing: []

.....
-----
Block: 5426_2
5426_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1626', 'JUMP']>> 
5426_2-Stack size: 13 
5426_2-Equals Mem:<< [<11,6>]>> 
5426_2-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5426_2-Equals Sto:<< []>> 
5426_2-NonEquals Sto: << []>> 
5426_2-Useless: []
5426_2-Constancy: [(8, 0)]
5426_2-ContextAliasing: []

.....
-----
Block: 5678_1
5678_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
5678_1-Stack size: 20 
5678_1-Equals Mem:<< []>> 
5678_1-NonEquals Mem: << [<6,1>]>> 
5678_1-Equals Sto:<< []>> 
5678_1-NonEquals Sto: << []>> 
5678_1-Useless: []
5678_1-Constancy: [(15, 0), (6, 0), (1, 0)]
5678_1-ContextAliasing: [(2, 19)]

.....
-----
Block: 5714_9
5714_9Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_9-Stack size: 22 
5714_9-Equals Mem:<< []>> 
5714_9-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_9-Equals Sto:<< []>> 
5714_9-NonEquals Sto: << []>> 
5714_9-Useless: []
5714_9-Constancy: [(17, 0), (8, 0), (3, 0)]
5714_9-ContextAliasing: [(4, 20)]

.....
-----
Block: 5738_9
5738_9Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_9-Stack size: 26 
5738_9-Equals Mem:<< []>> 
5738_9-NonEquals Mem: << [<11,5>]>> 
5738_9-Equals Sto:<< []>> 
5738_9-NonEquals Sto: << []>> 
5738_9-Useless: []
5738_9-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_9-ContextAliasing: [(8, 20)]

.....
-----
Block: 6884_3
6884_3Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884_3-Stack size: 24 
6884_3-Equals Mem:<< []>> 
6884_3-NonEquals Mem: << [<4,7>]>> 
6884_3-Equals Sto:<< []>> 
6884_3-NonEquals Sto: << []>> 
6884_3-Useless: []
6884_3-Constancy: [(19, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6884_3-ContextAliasing: []

.....
-----
Block: 6249_31
6249_31Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_31-Stack size: 22 
6249_31-Equals Mem:<< []>> 
6249_31-NonEquals Mem: << [<5,8>]>> 
6249_31-Equals Sto:<< []>> 
6249_31-NonEquals Sto: << []>> 
6249_31-Useless: []
6249_31-Constancy: [(17, 0), (6, 0), (5, 0)]
6249_31-ContextAliasing: []

.....
-----
Block: 6884_4
6884_4Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884_4-Stack size: 22 
6884_4-Equals Mem:<< []>> 
6884_4-NonEquals Mem: << [<4,7>]>> 
6884_4-Equals Sto:<< []>> 
6884_4-NonEquals Sto: << []>> 
6884_4-Useless: []
6884_4-Constancy: [(17, 0), (6, 0), (0, 0)]
6884_4-ContextAliasing: []

.....
-----
Block: 5338_1
5338_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5338_1-Stack size: 17 
5338_1-Equals Mem:<< []>> 
5338_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5338_1-Equals Sto:<< []>> 
5338_1-NonEquals Sto: << []>> 
5338_1-Useless: []
5338_1-Constancy: [(12, 0), (1, 0)]
5338_1-ContextAliasing: []

.....
-----
Block: 4336_0
4336_0Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x1126', 'JUMPI']>> 
4336_0-Stack size: 10 
4336_0-Equals Mem:<< []>> 
4336_0-NonEquals Mem: << [<5,8>]>> 
4336_0-Equals Sto:<< []>> 
4336_0-NonEquals Sto: << [<12,14>]>> 
4336_0-Useless: []
4336_0-Constancy: [(5, 0)]
4336_0-ContextAliasing: []

.....
-----
Block: 6583_5
6583_5Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583_5-Stack size: 18 
6583_5-Equals Mem:<< []>> 
6583_5-NonEquals Mem: << [<5,8>]>> 
6583_5-Equals Sto:<< []>> 
6583_5-NonEquals Sto: << []>> 
6583_5-Useless: []
6583_5-Constancy: [(13, 0), (1, 0)]
6583_5-ContextAliasing: [(4, 15)]

.....
-----
Block: 5023_1
5023_1Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x13c3', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
5023_1-Stack size: 18 
5023_1-Equals Mem:<< [<18,6>]>> 
5023_1-NonEquals Mem: << []>> 
5023_1-Equals Sto:<< []>> 
5023_1-NonEquals Sto: << []>> 
5023_1-Useless: []
5023_1-Constancy: [(13, 0)]
5023_1-ContextAliasing: []

.....
-----
Block: 6583_4
6583_4Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583_4-Stack size: 18 
6583_4-Equals Mem:<< []>> 
6583_4-NonEquals Mem: << [<5,8>]>> 
6583_4-Equals Sto:<< []>> 
6583_4-NonEquals Sto: << []>> 
6583_4-Useless: []
6583_4-Constancy: [(13, 0)]
6583_4-ContextAliasing: [(4, 15)]

.....
-----
Block: 2979_3
2979_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
2979_3-Stack size: 18 
2979_3-Equals Mem:<< []>> 
2979_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2979_3-Equals Sto:<< []>> 
2979_3-NonEquals Sto: << []>> 
2979_3-Useless: []
2979_3-Constancy: [(13, 0)]
2979_3-ContextAliasing: []

.....
-----
Block: 3077_3
3077_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3077_3-Stack size: 18 
3077_3-Equals Mem:<< []>> 
3077_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3077_3-Equals Sto:<< []>> 
3077_3-NonEquals Sto: << []>> 
3077_3-Useless: []
3077_3-Constancy: [(13, 0)]
3077_3-ContextAliasing: []

.....
-----
Block: 5116_1
5116_1Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x1434', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1a6e', 'JUMP']>> 
5116_1-Stack size: 14 
5116_1-Equals Mem:<< []>> 
5116_1-NonEquals Mem: << [<9,4>]>> 
5116_1-Equals Sto:<< []>> 
5116_1-NonEquals Sto: << []>> 
5116_1-Useless: []
5116_1-Constancy: [(9, 0)]
5116_1-ContextAliasing: []

.....
-----
Block: 6766_1
6766_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6766_1-Stack size: 23 
6766_1-Equals Mem:<< []>> 
6766_1-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6766_1-Equals Sto:<< []>> 
6766_1-NonEquals Sto: << []>> 
6766_1-Useless: []
6766_1-Constancy: [(18, 0), (4, 0)]
6766_1-ContextAliasing: [(9, 19)]

.....
-----
Block: 6816_1
6816_1Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1a97', 'JUMP']>> 
6816_1-Stack size: 29 
6816_1-Equals Mem:<< []>> 
6816_1-NonEquals Mem: << [<9,1>]>> 
6816_1-Equals Sto:<< []>> 
6816_1-NonEquals Sto: << []>> 
6816_1-Useless: []
6816_1-Constancy: [(24, 0), (10, 0), (5, 0), (3, 32)]
6816_1-ContextAliasing: [(15, 19)]

.....
-----
Block: 6249_34
6249_34Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_34-Stack size: 22 
6249_34-Equals Mem:<< []>> 
6249_34-NonEquals Mem: << [<5,8>]>> 
6249_34-Equals Sto:<< []>> 
6249_34-NonEquals Sto: << []>> 
6249_34-Useless: []
6249_34-Constancy: [(17, 0), (12, 0), (6, 0), (5, 0)]
6249_34-ContextAliasing: []

.....
-----
Block: 6884_6
6884_6Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884_6-Stack size: 22 
6884_6-Equals Mem:<< []>> 
6884_6-NonEquals Mem: << [<4,7>]>> 
6884_6-Equals Sto:<< []>> 
6884_6-NonEquals Sto: << []>> 
6884_6-Useless: []
6884_6-Constancy: [(17, 0), (12, 0), (6, 0), (0, 0)]
6884_6-ContextAliasing: []

.....
-----
Block: 5338_2
5338_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5338_2-Stack size: 17 
5338_2-Equals Mem:<< []>> 
5338_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5338_2-Equals Sto:<< []>> 
5338_2-NonEquals Sto: << []>> 
5338_2-Useless: []
5338_2-Constancy: [(12, 0), (7, 0), (1, 0)]
5338_2-ContextAliasing: []

.....
-----
Block: 4500_0
4500_0Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x11ac', 'SWAP1', 'DUP3', 'PUSH2 0x1587', 'JUMP']>> 
4500_0-Stack size: 10 
4500_0-Equals Mem:<< []>> 
4500_0-NonEquals Mem: << [<4,7>]>> 
4500_0-Equals Sto:<< []>> 
4500_0-NonEquals Sto: << []>> 
4500_0-Useless: []
4500_0-Constancy: [(5, 0)]
4500_0-ContextAliasing: []

.....
-----
Block: 6249_30
6249_30Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_30-Stack size: 20 
6249_30-Equals Mem:<< []>> 
6249_30-NonEquals Mem: << [<5,8>]>> 
6249_30-Equals Sto:<< []>> 
6249_30-NonEquals Sto: << []>> 
6249_30-Useless: []
6249_30-Constancy: [(15, 0), (6, 0), (5, 0)]
6249_30-ContextAliasing: []

.....
-----
Block: 5534_2
5534_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5534_2-Stack size: 15 
5534_2-Equals Mem:<< []>> 
5534_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5534_2-Equals Sto:<< []>> 
5534_2-NonEquals Sto: << []>> 
5534_2-Useless: []
5534_2-Constancy: [(10, 0), (1, 0)]
5534_2-ContextAliasing: []

.....
-----
Block: 4524_0
4524_0Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x11fc', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4524_0-Stack size: 11 
4524_0-Equals Mem:<< []>> 
4524_0-NonEquals Mem: << [<5,19>, <5,8>, <5,34>, <8,19>, <8,34>, <34,13>, <34,19>, <13,19>]>> 
4524_0-Equals Sto:<< []>> 
4524_0-NonEquals Sto: << []>> 
4524_0-Useless: []
4524_0-Constancy: [(6, 0)]
4524_0-ContextAliasing: []

.....
-----
Block: 4613_0
4613_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x1227', 'SWAP1', 'DUP4', 'PUSH2 0x15e5', 'JUMP']>> 
4613_0-Stack size: 10 
4613_0-Equals Mem:<< []>> 
4613_0-NonEquals Mem: << [<11,14>]>> 
4613_0-Equals Sto:<< []>> 
4613_0-NonEquals Sto: << []>> 
4613_0-Useless: []
4613_0-Constancy: [(5, 0)]
4613_0-ContextAliasing: []

.....
-----
Block: 5605_2
5605_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12ca', 'JUMP']>> 
5605_2-Stack size: 13 
5605_2-Equals Mem:<< [<11,6>]>> 
5605_2-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5605_2-Equals Sto:<< []>> 
5605_2-NonEquals Sto: << []>> 
5605_2-Useless: []
5605_2-Constancy: [(8, 0)]
5605_2-ContextAliasing: []

.....
-----
Block: 4821_5
4821_5Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
4821_5-Stack size: 20 
4821_5-Equals Mem:<< []>> 
4821_5-NonEquals Mem: << [<6,1>]>> 
4821_5-Equals Sto:<< []>> 
4821_5-NonEquals Sto: << []>> 
4821_5-Useless: []
4821_5-Constancy: [(15, 0), (6, 0), (1, 0)]
4821_5-ContextAliasing: [(2, 19)]

.....
-----
Block: 5714_8
5714_8Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_8-Stack size: 22 
5714_8-Equals Mem:<< []>> 
5714_8-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_8-Equals Sto:<< []>> 
5714_8-NonEquals Sto: << []>> 
5714_8-Useless: []
5714_8-Constancy: [(17, 0), (8, 0), (3, 0)]
5714_8-ContextAliasing: [(4, 20)]

.....
-----
Block: 5738_8
5738_8Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_8-Stack size: 26 
5738_8-Equals Mem:<< []>> 
5738_8-NonEquals Mem: << [<11,5>]>> 
5738_8-Equals Sto:<< []>> 
5738_8-NonEquals Sto: << []>> 
5738_8-Useless: []
5738_8-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_8-ContextAliasing: [(8, 20)]

.....
-----
Block: 6249_29
6249_29Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_29-Stack size: 25 
6249_29-Equals Mem:<< []>> 
6249_29-NonEquals Mem: << [<5,8>]>> 
6249_29-Equals Sto:<< []>> 
6249_29-NonEquals Sto: << []>> 
6249_29-Useless: []
6249_29-Constancy: [(20, 0), (11, 0), (6, 0), (5, 0)]
6249_29-ContextAliasing: []

.....
-----
Block: 4647_0
4647_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x126a', 'PUSH2 0x124c', 'DUP4', 'DUP4', 'PUSH2 0x15e5', 'JUMP']>> 
4647_0-Stack size: 11 
4647_0-Equals Mem:<< []>> 
4647_0-NonEquals Mem: << [<11,14>]>> 
4647_0-Equals Sto:<< []>> 
4647_0-NonEquals Sto: << []>> 
4647_0-Useless: []
4647_0-Constancy: [(6, 0)]
4647_0-ContextAliasing: []

.....
-----
Block: 5605_3
5605_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12ca', 'JUMP']>> 
5605_3-Stack size: 14 
5605_3-Equals Mem:<< [<11,6>]>> 
5605_3-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5605_3-Equals Sto:<< []>> 
5605_3-NonEquals Sto: << []>> 
5605_3-Useless: []
5605_3-Constancy: [(9, 0)]
5605_3-ContextAliasing: []

.....
-----
Block: 4821_4
4821_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
4821_4-Stack size: 21 
4821_4-Equals Mem:<< []>> 
4821_4-NonEquals Mem: << [<6,1>]>> 
4821_4-Equals Sto:<< []>> 
4821_4-NonEquals Sto: << []>> 
4821_4-Useless: []
4821_4-Constancy: [(16, 0), (6, 0), (1, 0)]
4821_4-ContextAliasing: [(2, 20)]

.....
-----
Block: 5714_7
5714_7Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_7-Stack size: 23 
5714_7-Equals Mem:<< []>> 
5714_7-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_7-Equals Sto:<< []>> 
5714_7-NonEquals Sto: << []>> 
5714_7-Useless: []
5714_7-Constancy: [(18, 0), (8, 0), (3, 0)]
5714_7-ContextAliasing: [(4, 21)]

.....
-----
Block: 5738_7
5738_7Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_7-Stack size: 27 
5738_7-Equals Mem:<< []>> 
5738_7-NonEquals Mem: << [<11,5>]>> 
5738_7-Equals Sto:<< []>> 
5738_7-NonEquals Sto: << []>> 
5738_7-Useless: []
5738_7-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_7-ContextAliasing: [(8, 21)]

.....
-----
Block: 6249_28
6249_28Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_28-Stack size: 26 
6249_28-Equals Mem:<< []>> 
6249_28-NonEquals Mem: << [<5,8>]>> 
6249_28-Equals Sto:<< []>> 
6249_28-NonEquals Sto: << []>> 
6249_28-Useless: []
6249_28-Constancy: [(21, 0), (11, 0), (6, 0), (5, 0)]
6249_28-ContextAliasing: []

.....
-----
Block: 4684_0
4684_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1587', 'JUMP']>> 
4684_0-Stack size: 12 
4684_0-Equals Mem:<< []>> 
4684_0-NonEquals Mem: << [<11,14>]>> 
4684_0-Equals Sto:<< []>> 
4684_0-NonEquals Sto: << []>> 
4684_0-Useless: []
4684_0-Constancy: [(7, 0)]
4684_0-ContextAliasing: []

.....
-----
Block: 6249_27
6249_27Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_27-Stack size: 20 
6249_27-Equals Mem:<< []>> 
6249_27-NonEquals Mem: << [<5,8>]>> 
6249_27-Equals Sto:<< []>> 
6249_27-NonEquals Sto: << []>> 
6249_27-Useless: []
6249_27-Constancy: [(15, 0), (6, 0), (5, 0)]
6249_27-ContextAliasing: []

.....
-----
Block: 5534_1
5534_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5534_1-Stack size: 15 
5534_1-Equals Mem:<< []>> 
5534_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5534_1-Equals Sto:<< []>> 
5534_1-NonEquals Sto: << []>> 
5534_1-Useless: []
5534_1-Constancy: [(10, 0), (1, 0)]
5534_1-ContextAliasing: []

.....
-----
Block: 4714_0
4714_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x12b3', 'DUP6', 'DUP6', 'PUSH2 0x15e5', 'JUMP']>> 
4714_0-Stack size: 11 
4714_0-Equals Mem:<< []>> 
4714_0-NonEquals Mem: << [<12,15>]>> 
4714_0-Equals Sto:<< []>> 
4714_0-NonEquals Sto: << []>> 
4714_0-Useless: []
4714_0-Constancy: [(6, 0)]
4714_0-ContextAliasing: []

.....
-----
Block: 5605_4
5605_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12ca', 'JUMP']>> 
5605_4-Stack size: 16 
5605_4-Equals Mem:<< [<11,6>]>> 
5605_4-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5605_4-Equals Sto:<< []>> 
5605_4-NonEquals Sto: << []>> 
5605_4-Useless: []
5605_4-Constancy: [(11, 0)]
5605_4-ContextAliasing: []

.....
-----
Block: 4821_3
4821_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
4821_3-Stack size: 23 
4821_3-Equals Mem:<< []>> 
4821_3-NonEquals Mem: << [<6,1>]>> 
4821_3-Equals Sto:<< []>> 
4821_3-NonEquals Sto: << []>> 
4821_3-Useless: []
4821_3-Constancy: [(18, 0), (6, 0), (1, 0)]
4821_3-ContextAliasing: [(2, 22)]

.....
-----
Block: 5714_6
5714_6Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_6-Stack size: 25 
5714_6-Equals Mem:<< []>> 
5714_6-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_6-Equals Sto:<< []>> 
5714_6-NonEquals Sto: << []>> 
5714_6-Useless: []
5714_6-Constancy: [(20, 0), (8, 0), (3, 0)]
5714_6-ContextAliasing: [(4, 23)]

.....
-----
Block: 5738_6
5738_6Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_6-Stack size: 29 
5738_6-Equals Mem:<< []>> 
5738_6-NonEquals Mem: << [<11,5>]>> 
5738_6-Equals Sto:<< []>> 
5738_6-NonEquals Sto: << []>> 
5738_6-Useless: []
5738_6-Constancy: [(24, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_6-ContextAliasing: [(8, 23)]

.....
-----
Block: 6249_26
6249_26Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_26-Stack size: 28 
6249_26-Equals Mem:<< []>> 
6249_26-NonEquals Mem: << [<5,8>]>> 
6249_26-Equals Sto:<< []>> 
6249_26-NonEquals Sto: << []>> 
6249_26-Useless: []
6249_26-Constancy: [(23, 0), (11, 0), (6, 0), (5, 0)]
6249_26-ContextAliasing: []

.....
-----
Block: 427
427Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
427-Stack size: 2 
427-Equals Mem:<< []>> 
427-NonEquals Mem: << [<7,2>]>> 
427-Equals Sto:<< []>> 
427-NonEquals Sto: << []>> 
427-Useless: []
427-Constancy: []
427-ContextAliasing: []

.....
-----
Block: 847
847Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x03', 'DUP2', 'MSTORE', 'PUSH3 0x574f4b', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x0176', 'JUMP']>> 
847-Stack size: 2 
847-Equals Mem:<< [<10,4>]>> 
847-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
847-Equals Sto:<< []>> 
847-NonEquals Sto: << []>> 
847-Useless: []
847-Constancy: []
847-ContextAliasing: []

.....
-----
Block: 5714
5714Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714-Stack size: 4 
5714-Equals Mem:<< []>> 
5714-NonEquals Mem: << [<5,7>, <5,12>, <12,7>]>> 
5714-Equals Sto:<< []>> 
5714-NonEquals Sto: << []>> 
5714-Useless: []
5714-Constancy: []
5714-ContextAliasing: []

.....
-----
Block: 5738
5738Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738-Stack size: 8 
5738-Equals Mem:<< []>> 
5738-NonEquals Mem: << [<11,5>]>> 
5738-Equals Sto:<< []>> 
5738-NonEquals Sto: << []>> 
5738-Useless: []
5738-Constancy: [(3, 0), (2, 32)]
5738-ContextAliasing: []

.....
-----
Block: 788
788Instr:<<['JUMPDEST', 'POP', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
788-Stack size: 2 
788-Equals Mem:<< []>> 
788-NonEquals Mem: << [<15,5>]>> 
788-Equals Sto:<< []>> 
788-NonEquals Sto: << []>> 
788-Useless: []
788-Constancy: []
788-ContextAliasing: []

.....
-----
Block: 1630
1630Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
1630-Stack size: 2 
1630-Equals Mem:<< []>> 
1630-NonEquals Mem: << [<6,1>]>> 
1630-Equals Sto:<< []>> 
1630-NonEquals Sto: << []>> 
1630-Useless: []
1630-Constancy: []
1630-ContextAliasing: []

.....
-----
Block: 6249_22
6249_22Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_22-Stack size: 7 
6249_22-Equals Mem:<< []>> 
6249_22-NonEquals Mem: << [<5,8>]>> 
6249_22-Equals Sto:<< []>> 
6249_22-NonEquals Sto: << []>> 
6249_22-Useless: []
6249_22-Constancy: []
6249_22-ContextAliasing: []

.....
-----
Block: 6249_18
6249_18Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_18-Stack size: 7 
6249_18-Equals Mem:<< []>> 
6249_18-NonEquals Mem: << [<5,8>]>> 
6249_18-Equals Sto:<< []>> 
6249_18-NonEquals Sto: << []>> 
6249_18-Useless: []
6249_18-Constancy: []
6249_18-ContextAliasing: []

.....
-----
Block: 6249_14
6249_14Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_14-Stack size: 8 
6249_14-Equals Mem:<< []>> 
6249_14-NonEquals Mem: << [<5,8>]>> 
6249_14-Equals Sto:<< []>> 
6249_14-NonEquals Sto: << []>> 
6249_14-Useless: []
6249_14-Constancy: []
6249_14-ContextAliasing: []

.....
-----
Block: 6249_17
6249_17Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_17-Stack size: 18 
6249_17-Equals Mem:<< []>> 
6249_17-NonEquals Mem: << [<5,8>]>> 
6249_17-Equals Sto:<< []>> 
6249_17-NonEquals Sto: << []>> 
6249_17-Useless: []
6249_17-Constancy: [(11, 0), (7, 0)]
6249_17-ContextAliasing: []

.....
-----
Block: 6249_16
6249_16Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_16-Stack size: 14 
6249_16-Equals Mem:<< []>> 
6249_16-NonEquals Mem: << [<5,8>]>> 
6249_16-Equals Sto:<< []>> 
6249_16-NonEquals Sto: << []>> 
6249_16-Useless: []
6249_16-Constancy: [(7, 0), (3, 0)]
6249_16-ContextAliasing: []

.....
-----
Block: 6249_15
6249_15Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_15-Stack size: 13 
6249_15-Equals Mem:<< []>> 
6249_15-NonEquals Mem: << [<5,8>]>> 
6249_15-Equals Sto:<< []>> 
6249_15-NonEquals Sto: << []>> 
6249_15-Useless: []
6249_15-Constancy: [(6, 0), (2, 0)]
6249_15-ContextAliasing: []

.....
-----
Block: 6249_21
6249_21Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_21-Stack size: 17 
6249_21-Equals Mem:<< []>> 
6249_21-NonEquals Mem: << [<5,8>]>> 
6249_21-Equals Sto:<< []>> 
6249_21-NonEquals Sto: << []>> 
6249_21-Useless: []
6249_21-Constancy: [(11, 0), (7, 0)]
6249_21-ContextAliasing: []

.....
-----
Block: 6249_20
6249_20Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_20-Stack size: 13 
6249_20-Equals Mem:<< []>> 
6249_20-NonEquals Mem: << [<5,8>]>> 
6249_20-Equals Sto:<< []>> 
6249_20-NonEquals Sto: << []>> 
6249_20-Useless: []
6249_20-Constancy: [(7, 0), (3, 0)]
6249_20-ContextAliasing: []

.....
-----
Block: 6249_19
6249_19Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_19-Stack size: 12 
6249_19-Equals Mem:<< []>> 
6249_19-NonEquals Mem: << [<5,8>]>> 
6249_19-Equals Sto:<< []>> 
6249_19-NonEquals Sto: << []>> 
6249_19-Useless: []
6249_19-Constancy: [(6, 0), (2, 0)]
6249_19-ContextAliasing: []

.....
-----
Block: 6249_25
6249_25Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_25-Stack size: 17 
6249_25-Equals Mem:<< []>> 
6249_25-NonEquals Mem: << [<5,8>]>> 
6249_25-Equals Sto:<< []>> 
6249_25-NonEquals Sto: << []>> 
6249_25-Useless: []
6249_25-Constancy: [(11, 0), (7, 0)]
6249_25-ContextAliasing: []

.....
-----
Block: 6249_24
6249_24Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_24-Stack size: 13 
6249_24-Equals Mem:<< []>> 
6249_24-NonEquals Mem: << [<5,8>]>> 
6249_24-Equals Sto:<< []>> 
6249_24-NonEquals Sto: << []>> 
6249_24-Useless: []
6249_24-Constancy: [(7, 0), (3, 0)]
6249_24-ContextAliasing: []

.....
-----
Block: 6249_23
6249_23Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_23-Stack size: 12 
6249_23-Equals Mem:<< []>> 
6249_23-NonEquals Mem: << [<5,8>]>> 
6249_23-Equals Sto:<< []>> 
6249_23-NonEquals Sto: << []>> 
6249_23-Useless: []
6249_23-Constancy: [(6, 0), (2, 0)]
6249_23-ContextAliasing: []

.....
-----
Block: 1517
1517Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
1517-Stack size: 2 
1517-Equals Mem:<< []>> 
1517-NonEquals Mem: << [<6,1>]>> 
1517-Equals Sto:<< []>> 
1517-NonEquals Sto: << []>> 
1517-Useless: []
1517-Constancy: []
1517-ContextAliasing: []

.....
-----
Block: 690
690Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
690-Stack size: 3 
690-Equals Mem:<< []>> 
690-NonEquals Mem: << [<10,13>]>> 
690-Equals Sto:<< []>> 
690-NonEquals Sto: << []>> 
690-Useless: []
690-Constancy: []
690-ContextAliasing: []

.....
-----
Block: 1453
1453Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'DUP1', 'ISZERO', 'PUSH2 0x05cb', 'JUMPI']>> 
1453-Stack size: 2 
1453-Equals Mem:<< []>> 
1453-NonEquals Mem: << [<5,8>]>> 
1453-Equals Sto:<< []>> 
1453-NonEquals Sto: << []>> 
1453-Useless: []
1453-Constancy: []
1453-ContextAliasing: []

.....
-----
Block: 6583_3
6583_3Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583_3-Stack size: 10 
6583_3-Equals Mem:<< []>> 
6583_3-NonEquals Mem: << [<5,8>]>> 
6583_3-Equals Sto:<< []>> 
6583_3-NonEquals Sto: << []>> 
6583_3-Useless: []
6583_3-Constancy: [(1, 0)]
6583_3-ContextAliasing: [(4, 7)]

.....
-----
Block: 5023_0
5023_0Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x13c3', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
5023_0-Stack size: 10 
5023_0-Equals Mem:<< [<18,6>]>> 
5023_0-NonEquals Mem: << []>> 
5023_0-Equals Sto:<< []>> 
5023_0-NonEquals Sto: << []>> 
5023_0-Useless: []
5023_0-Constancy: []
5023_0-ContextAliasing: []

.....
-----
Block: 6583_2
6583_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583_2-Stack size: 10 
6583_2-Equals Mem:<< []>> 
6583_2-NonEquals Mem: << [<5,8>]>> 
6583_2-Equals Sto:<< []>> 
6583_2-NonEquals Sto: << []>> 
6583_2-Useless: []
6583_2-Constancy: []
6583_2-ContextAliasing: [(4, 7)]

.....
-----
Block: 2979_2
2979_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
2979_2-Stack size: 10 
2979_2-Equals Mem:<< []>> 
2979_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2979_2-Equals Sto:<< []>> 
2979_2-NonEquals Sto: << []>> 
2979_2-Useless: []
2979_2-Constancy: []
2979_2-ContextAliasing: []

.....
-----
Block: 3077_2
3077_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3077_2-Stack size: 10 
3077_2-Equals Mem:<< []>> 
3077_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3077_2-Equals Sto:<< []>> 
3077_2-NonEquals Sto: << []>> 
3077_2-Useless: []
3077_2-Constancy: []
3077_2-ContextAliasing: []

.....
-----
Block: 5116_0
5116_0Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x1434', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1a6e', 'JUMP']>> 
5116_0-Stack size: 6 
5116_0-Equals Mem:<< []>> 
5116_0-NonEquals Mem: << [<9,4>]>> 
5116_0-Equals Sto:<< []>> 
5116_0-NonEquals Sto: << []>> 
5116_0-Useless: []
5116_0-Constancy: []
5116_0-ContextAliasing: []

.....
-----
Block: 6766_0
6766_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6766_0-Stack size: 15 
6766_0-Equals Mem:<< []>> 
6766_0-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6766_0-Equals Sto:<< []>> 
6766_0-NonEquals Sto: << []>> 
6766_0-Useless: []
6766_0-Constancy: [(4, 0)]
6766_0-ContextAliasing: [(9, 11)]

.....
-----
Block: 6816_0
6816_0Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1a97', 'JUMP']>> 
6816_0-Stack size: 21 
6816_0-Equals Mem:<< []>> 
6816_0-NonEquals Mem: << [<9,1>]>> 
6816_0-Equals Sto:<< []>> 
6816_0-NonEquals Sto: << []>> 
6816_0-Useless: []
6816_0-Constancy: [(10, 0), (5, 0), (3, 32)]
6816_0-ContextAliasing: [(15, 11)]

.....
-----
Block: 615
615Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'SWAP1', 'JUMP']>> 
615-Stack size: 3 
615-Equals Mem:<< []>> 
615-NonEquals Mem: << [<10,13>]>> 
615-Equals Sto:<< []>> 
615-NonEquals Sto: << []>> 
615-Useless: []
615-Constancy: []
615-ContextAliasing: []

.....
-----
Block: 5932_0
5932_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5932_0-Stack size: 11 
5932_0-Equals Mem:<< []>> 
5932_0-NonEquals Mem: << [<5,8>]>> 
5932_0-Equals Sto:<< []>> 
5932_0-NonEquals Sto: << []>> 
5932_0-Useless: []
5932_0-Constancy: [(5, 0), (4, 32)]
5932_0-ContextAliasing: []

.....
-----
Block: 5932
5932Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5932-Stack size: 14 
5932-Equals Mem:<< []>> 
5932-NonEquals Mem: << [<5,8>]>> 
5932-Equals Sto:<< []>> 
5932-NonEquals Sto: << []>> 
5932-Useless: []
5932-Constancy: [(8, 0), (7, 32)]
5932-ContextAliasing: []

.....
-----
Block: 6066
6066Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x17cf', 'JUMPI']>> 
6066-Stack size: 13 
6066-Equals Mem:<< []>> 
6066-NonEquals Mem: << [<2,5>]>> 
6066-Equals Sto:<< []>> 
6066-NonEquals Sto: << []>> 
6066-Useless: []
6066-Constancy: [(7, 0), (6, 32)]
6066-ContextAliasing: []

.....
-----
Block: 1281
1281Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
1281-Stack size: 3 
1281-Equals Mem:<< []>> 
1281-NonEquals Mem: << [<6,1>]>> 
1281-Equals Sto:<< []>> 
1281-NonEquals Sto: << []>> 
1281-Useless: [6]
1281-Constancy: []
1281-ContextAliasing: []

.....
-----
Block: 6583_1
6583_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583_1-Stack size: 10 
6583_1-Equals Mem:<< []>> 
6583_1-NonEquals Mem: << [<5,8>]>> 
6583_1-Equals Sto:<< []>> 
6583_1-NonEquals Sto: << []>> 
6583_1-Useless: []
6583_1-Constancy: [(5, 0), (3, 0)]
6583_1-ContextAliasing: [(7, 7)]

.....
-----
Block: 1346
1346Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x057d', 'DUP2', 'PUSH2 0x19cb', 'JUMP']>> 
1346-Stack size: 9 
1346-Equals Mem:<< []>> 
1346-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
1346-Equals Sto:<< [<31,43>]>> 
1346-NonEquals Sto: << []>> 
1346-Useless: []
1346-Constancy: [(4, 0), (2, 0)]
1346-ContextAliasing: [(6, 7)]

.....
-----
Block: 6249_13
6249_13Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_13-Stack size: 9 
6249_13-Equals Mem:<< []>> 
6249_13-NonEquals Mem: << [<5,8>]>> 
6249_13-Equals Sto:<< []>> 
6249_13-NonEquals Sto: << []>> 
6249_13-Useless: []
6249_13-Constancy: [(1, 0)]
6249_13-ContextAliasing: []

.....
-----
Block: 540
540Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x09', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
540-Stack size: 2 
540-Equals Mem:<< []>> 
540-NonEquals Mem: << [<6,3>]>> 
540-Equals Sto:<< []>> 
540-NonEquals Sto: << []>> 
540-Useless: []
540-Constancy: []
540-ContextAliasing: []

.....
-----
Block: 3270
3270Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3270-Stack size: 10 
3270-Equals Mem:<< []>> 
3270-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3270-Equals Sto:<< []>> 
3270-NonEquals Sto: << []>> 
3270-Useless: []
3270-Constancy: [(4, 0)]
3270-ContextAliasing: []

.....
-----
Block: 3370
3370Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3370-Stack size: 10 
3370-Equals Mem:<< []>> 
3370-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3370-Equals Sto:<< []>> 
3370-NonEquals Sto: << []>> 
3370-Useless: []
3370-Constancy: [(4, 0)]
3370-ContextAliasing: []

.....
-----
Block: 3461
3461Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3461-Stack size: 10 
3461-Equals Mem:<< []>> 
3461-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3461-Equals Sto:<< []>> 
3461-NonEquals Sto: << []>> 
3461-Useless: []
3461-Constancy: [(4, 0)]
3461-ContextAliasing: []

.....
-----
Block: 3599
3599Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e4e', 'JUMPI']>> 
3599-Stack size: 11 
3599-Equals Mem:<< []>> 
3599-NonEquals Mem: << [<10,13>]>> 
3599-Equals Sto:<< []>> 
3599-NonEquals Sto: << []>> 
3599-Useless: []
3599-Constancy: [(5, 0), (0, 0)]
3599-ContextAliasing: []

.....
-----
Block: 3633
3633Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3633-Stack size: 12 
3633-Equals Mem:<< []>> 
3633-NonEquals Mem: << [<11,14>]>> 
3633-Equals Sto:<< []>> 
3633-NonEquals Sto: << []>> 
3633-Useless: []
3633-Constancy: [(6, 0), (1, 0)]
3633-ContextAliasing: []

.....
-----
Block: 5426
5426Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1626', 'JUMP']>> 
5426-Stack size: 14 
5426-Equals Mem:<< [<11,6>]>> 
5426-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5426-Equals Sto:<< []>> 
5426-NonEquals Sto: << []>> 
5426-Useless: []
5426-Constancy: [(8, 0), (3, 0)]
5426-ContextAliasing: []

.....
-----
Block: 5678_0
5678_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
5678_0-Stack size: 21 
5678_0-Equals Mem:<< []>> 
5678_0-NonEquals Mem: << [<6,1>]>> 
5678_0-Equals Sto:<< []>> 
5678_0-NonEquals Sto: << []>> 
5678_0-Useless: []
5678_0-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
5678_0-ContextAliasing: [(2, 20)]

.....
-----
Block: 5714_5
5714_5Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_5-Stack size: 23 
5714_5-Equals Mem:<< []>> 
5714_5-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_5-Equals Sto:<< []>> 
5714_5-NonEquals Sto: << []>> 
5714_5-Useless: []
5714_5-Constancy: [(17, 0), (12, 0), (8, 0), (3, 0)]
5714_5-ContextAliasing: [(4, 21)]

.....
-----
Block: 5738_5
5738_5Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_5-Stack size: 27 
5738_5-Equals Mem:<< []>> 
5738_5-NonEquals Mem: << [<11,5>]>> 
5738_5-Equals Sto:<< []>> 
5738_5-NonEquals Sto: << []>> 
5738_5-Useless: []
5738_5-Constancy: [(21, 0), (16, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_5-ContextAliasing: [(8, 21)]

.....
-----
Block: 6884_1
6884_1Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884_1-Stack size: 25 
6884_1-Equals Mem:<< []>> 
6884_1-NonEquals Mem: << [<4,7>]>> 
6884_1-Equals Sto:<< []>> 
6884_1-NonEquals Sto: << []>> 
6884_1-Useless: []
6884_1-Constancy: [(19, 0), (14, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6884_1-ContextAliasing: []

.....
-----
Block: 3778
3778Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f56', 'JUMPI']>> 
3778-Stack size: 11 
3778-Equals Mem:<< []>> 
3778-NonEquals Mem: << [<4,7>]>> 
3778-Equals Sto:<< []>> 
3778-NonEquals Sto: << []>> 
3778-Useless: []
3778-Constancy: [(5, 0)]
3778-ContextAliasing: []

.....
-----
Block: 3799
3799Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3799-Stack size: 11 
3799-Equals Mem:<< []>> 
3799-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <26,1>, <33,1>]>> 
3799-Equals Sto:<< []>> 
3799-NonEquals Sto: << []>> 
3799-Useless: []
3799-Constancy: [(5, 0)]
3799-ContextAliasing: []

.....
-----
Block: 3926
3926Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3926-Stack size: 11 
3926-Equals Mem:<< []>> 
3926-NonEquals Mem: << [<5,8>]>> 
3926-Equals Sto:<< []>> 
3926-NonEquals Sto: << []>> 
3926-Useless: []
3926-Constancy: [(5, 0)]
3926-ContextAliasing: []

.....
-----
Block: 3994
3994Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3994-Stack size: 12 
3994-Equals Mem:<< []>> 
3994-NonEquals Mem: << [<11,14>]>> 
3994-Equals Sto:<< []>> 
3994-NonEquals Sto: << []>> 
3994-Useless: []
3994-Constancy: [(6, 0)]
3994-ContextAliasing: []

.....
-----
Block: 4039
4039Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
4039-Stack size: 11 
4039-Equals Mem:<< []>> 
4039-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4039-Equals Sto:<< []>> 
4039-NonEquals Sto: << []>> 
4039-Useless: []
4039-Constancy: [(5, 0)]
4039-ContextAliasing: []

.....
-----
Block: 4110
4110Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x1030', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4110-Stack size: 11 
4110-Equals Mem:<< []>> 
4110-NonEquals Mem: << [<15,18>]>> 
4110-Equals Sto:<< []>> 
4110-NonEquals Sto: << [<2,22>]>> 
4110-Useless: []
4110-Constancy: [(5, 0)]
4110-ContextAliasing: []

.....
-----
Block: 6249_11
6249_11Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_11-Stack size: 17 
6249_11-Equals Mem:<< []>> 
6249_11-NonEquals Mem: << [<5,8>]>> 
6249_11-Equals Sto:<< []>> 
6249_11-NonEquals Sto: << []>> 
6249_11-Useless: []
6249_11-Constancy: [(11, 0)]
6249_11-ContextAliasing: []

.....
-----
Block: 4161
4161Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
4161-Stack size: 11 
4161-Equals Mem:<< []>> 
4161-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4161-Equals Sto:<< []>> 
4161-NonEquals Sto: << []>> 
4161-Useless: []
4161-Constancy: [(5, 0)]
4161-ContextAliasing: []

.....
-----
Block: 6249_10
6249_10Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_10-Stack size: 18 
6249_10-Equals Mem:<< []>> 
6249_10-NonEquals Mem: << [<5,8>]>> 
6249_10-Equals Sto:<< []>> 
6249_10-NonEquals Sto: << []>> 
6249_10-Useless: []
6249_10-Constancy: [(12, 0), (4, 0), (1, 0)]
6249_10-ContextAliasing: []

.....
-----
Block: 5426_0
5426_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1626', 'JUMP']>> 
5426_0-Stack size: 14 
5426_0-Equals Mem:<< [<11,6>]>> 
5426_0-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5426_0-Equals Sto:<< []>> 
5426_0-NonEquals Sto: << []>> 
5426_0-Useless: []
5426_0-Constancy: [(8, 0)]
5426_0-ContextAliasing: []

.....
-----
Block: 5678
5678Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
5678-Stack size: 21 
5678-Equals Mem:<< []>> 
5678-NonEquals Mem: << [<6,1>]>> 
5678-Equals Sto:<< []>> 
5678-NonEquals Sto: << []>> 
5678-Useless: []
5678-Constancy: [(15, 0), (6, 0), (1, 0)]
5678-ContextAliasing: [(2, 20)]

.....
-----
Block: 5714_4
5714_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_4-Stack size: 23 
5714_4-Equals Mem:<< []>> 
5714_4-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_4-Equals Sto:<< []>> 
5714_4-NonEquals Sto: << []>> 
5714_4-Useless: []
5714_4-Constancy: [(17, 0), (8, 0), (3, 0)]
5714_4-ContextAliasing: [(4, 21)]

.....
-----
Block: 5738_4
5738_4Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_4-Stack size: 27 
5738_4-Equals Mem:<< []>> 
5738_4-NonEquals Mem: << [<11,5>]>> 
5738_4-Equals Sto:<< []>> 
5738_4-NonEquals Sto: << []>> 
5738_4-Useless: []
5738_4-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_4-ContextAliasing: [(8, 21)]

.....
-----
Block: 6884
6884Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884-Stack size: 25 
6884-Equals Mem:<< []>> 
6884-NonEquals Mem: << [<4,7>]>> 
6884-Equals Sto:<< []>> 
6884-NonEquals Sto: << []>> 
6884-Useless: []
6884-Constancy: [(19, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6884-ContextAliasing: []

.....
-----
Block: 6249_9
6249_9Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_9-Stack size: 23 
6249_9-Equals Mem:<< []>> 
6249_9-NonEquals Mem: << [<5,8>]>> 
6249_9-Equals Sto:<< []>> 
6249_9-NonEquals Sto: << []>> 
6249_9-Useless: []
6249_9-Constancy: [(17, 0), (6, 0), (5, 0)]
6249_9-ContextAliasing: []

.....
-----
Block: 6884_0
6884_0Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884_0-Stack size: 23 
6884_0-Equals Mem:<< []>> 
6884_0-NonEquals Mem: << [<4,7>]>> 
6884_0-Equals Sto:<< []>> 
6884_0-NonEquals Sto: << []>> 
6884_0-Useless: []
6884_0-Constancy: [(17, 0), (6, 0), (0, 0)]
6884_0-ContextAliasing: []

.....
-----
Block: 5338
5338Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5338-Stack size: 18 
5338-Equals Mem:<< []>> 
5338-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5338-Equals Sto:<< []>> 
5338-NonEquals Sto: << []>> 
5338-Useless: []
5338-Constancy: [(12, 0), (1, 0)]
5338-ContextAliasing: []

.....
-----
Block: 4336
4336Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x1126', 'JUMPI']>> 
4336-Stack size: 11 
4336-Equals Mem:<< []>> 
4336-NonEquals Mem: << [<5,8>]>> 
4336-Equals Sto:<< []>> 
4336-NonEquals Sto: << [<12,14>]>> 
4336-Useless: []
4336-Constancy: [(5, 0)]
4336-ContextAliasing: []

.....
-----
Block: 6583_0
6583_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583_0-Stack size: 19 
6583_0-Equals Mem:<< []>> 
6583_0-NonEquals Mem: << [<5,8>]>> 
6583_0-Equals Sto:<< []>> 
6583_0-NonEquals Sto: << []>> 
6583_0-Useless: []
6583_0-Constancy: [(13, 0), (1, 0)]
6583_0-ContextAliasing: [(4, 16)]

.....
-----
Block: 5023
5023Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x13c3', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
5023-Stack size: 19 
5023-Equals Mem:<< [<18,6>]>> 
5023-NonEquals Mem: << []>> 
5023-Equals Sto:<< []>> 
5023-NonEquals Sto: << []>> 
5023-Useless: []
5023-Constancy: [(13, 0)]
5023-ContextAliasing: []

.....
-----
Block: 6583
6583Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583-Stack size: 19 
6583-Equals Mem:<< []>> 
6583-NonEquals Mem: << [<5,8>]>> 
6583-Equals Sto:<< []>> 
6583-NonEquals Sto: << []>> 
6583-Useless: []
6583-Constancy: [(13, 0)]
6583-ContextAliasing: [(4, 16)]

.....
-----
Block: 2979_1
2979_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
2979_1-Stack size: 19 
2979_1-Equals Mem:<< []>> 
2979_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2979_1-Equals Sto:<< []>> 
2979_1-NonEquals Sto: << []>> 
2979_1-Useless: []
2979_1-Constancy: [(13, 0)]
2979_1-ContextAliasing: []

.....
-----
Block: 3077_1
3077_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3077_1-Stack size: 19 
3077_1-Equals Mem:<< []>> 
3077_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3077_1-Equals Sto:<< []>> 
3077_1-NonEquals Sto: << []>> 
3077_1-Useless: []
3077_1-Constancy: [(13, 0)]
3077_1-ContextAliasing: []

.....
-----
Block: 5116
5116Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x1434', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1a6e', 'JUMP']>> 
5116-Stack size: 15 
5116-Equals Mem:<< []>> 
5116-NonEquals Mem: << [<9,4>]>> 
5116-Equals Sto:<< []>> 
5116-NonEquals Sto: << []>> 
5116-Useless: []
5116-Constancy: [(9, 0)]
5116-ContextAliasing: []

.....
-----
Block: 6766
6766Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6766-Stack size: 24 
6766-Equals Mem:<< []>> 
6766-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6766-Equals Sto:<< []>> 
6766-NonEquals Sto: << []>> 
6766-Useless: []
6766-Constancy: [(18, 0), (4, 0)]
6766-ContextAliasing: [(9, 20)]

.....
-----
Block: 6816
6816Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1a97', 'JUMP']>> 
6816-Stack size: 30 
6816-Equals Mem:<< []>> 
6816-NonEquals Mem: << [<9,1>]>> 
6816-Equals Sto:<< []>> 
6816-NonEquals Sto: << []>> 
6816-Useless: []
6816-Constancy: [(24, 0), (10, 0), (5, 0), (3, 32)]
6816-ContextAliasing: [(15, 20)]

.....
-----
Block: 6249_12
6249_12Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_12-Stack size: 23 
6249_12-Equals Mem:<< []>> 
6249_12-NonEquals Mem: << [<5,8>]>> 
6249_12-Equals Sto:<< []>> 
6249_12-NonEquals Sto: << []>> 
6249_12-Useless: []
6249_12-Constancy: [(17, 0), (12, 0), (6, 0), (5, 0)]
6249_12-ContextAliasing: []

.....
-----
Block: 6884_2
6884_2Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884_2-Stack size: 23 
6884_2-Equals Mem:<< []>> 
6884_2-NonEquals Mem: << [<4,7>]>> 
6884_2-Equals Sto:<< []>> 
6884_2-NonEquals Sto: << []>> 
6884_2-Useless: []
6884_2-Constancy: [(17, 0), (12, 0), (6, 0), (0, 0)]
6884_2-ContextAliasing: []

.....
-----
Block: 5338_0
5338_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5338_0-Stack size: 18 
5338_0-Equals Mem:<< []>> 
5338_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5338_0-Equals Sto:<< []>> 
5338_0-NonEquals Sto: << []>> 
5338_0-Useless: []
5338_0-Constancy: [(12, 0), (7, 0), (1, 0)]
5338_0-ContextAliasing: []

.....
-----
Block: 4500
4500Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x11ac', 'SWAP1', 'DUP3', 'PUSH2 0x1587', 'JUMP']>> 
4500-Stack size: 11 
4500-Equals Mem:<< []>> 
4500-NonEquals Mem: << [<4,7>]>> 
4500-Equals Sto:<< []>> 
4500-NonEquals Sto: << []>> 
4500-Useless: []
4500-Constancy: [(5, 0)]
4500-ContextAliasing: []

.....
-----
Block: 6249_8
6249_8Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_8-Stack size: 21 
6249_8-Equals Mem:<< []>> 
6249_8-NonEquals Mem: << [<5,8>]>> 
6249_8-Equals Sto:<< []>> 
6249_8-NonEquals Sto: << []>> 
6249_8-Useless: []
6249_8-Constancy: [(15, 0), (6, 0), (5, 0)]
6249_8-ContextAliasing: []

.....
-----
Block: 5534_0
5534_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5534_0-Stack size: 16 
5534_0-Equals Mem:<< []>> 
5534_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5534_0-Equals Sto:<< []>> 
5534_0-NonEquals Sto: << []>> 
5534_0-Useless: []
5534_0-Constancy: [(10, 0), (1, 0)]
5534_0-ContextAliasing: []

.....
-----
Block: 4524
4524Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x11fc', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4524-Stack size: 12 
4524-Equals Mem:<< []>> 
4524-NonEquals Mem: << [<5,19>, <5,8>, <5,34>, <8,19>, <8,34>, <34,13>, <34,19>, <13,19>]>> 
4524-Equals Sto:<< []>> 
4524-NonEquals Sto: << []>> 
4524-Useless: []
4524-Constancy: [(6, 0)]
4524-ContextAliasing: []

.....
-----
Block: 4613
4613Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x1227', 'SWAP1', 'DUP4', 'PUSH2 0x15e5', 'JUMP']>> 
4613-Stack size: 11 
4613-Equals Mem:<< []>> 
4613-NonEquals Mem: << [<11,14>]>> 
4613-Equals Sto:<< []>> 
4613-NonEquals Sto: << []>> 
4613-Useless: []
4613-Constancy: [(5, 0)]
4613-ContextAliasing: []

.....
-----
Block: 5605
5605Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12ca', 'JUMP']>> 
5605-Stack size: 14 
5605-Equals Mem:<< [<11,6>]>> 
5605-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5605-Equals Sto:<< []>> 
5605-NonEquals Sto: << []>> 
5605-Useless: []
5605-Constancy: [(8, 0)]
5605-ContextAliasing: []

.....
-----
Block: 4821_2
4821_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
4821_2-Stack size: 21 
4821_2-Equals Mem:<< []>> 
4821_2-NonEquals Mem: << [<6,1>]>> 
4821_2-Equals Sto:<< []>> 
4821_2-NonEquals Sto: << []>> 
4821_2-Useless: []
4821_2-Constancy: [(15, 0), (6, 0), (1, 0)]
4821_2-ContextAliasing: [(2, 20)]

.....
-----
Block: 5714_3
5714_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_3-Stack size: 23 
5714_3-Equals Mem:<< []>> 
5714_3-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_3-Equals Sto:<< []>> 
5714_3-NonEquals Sto: << []>> 
5714_3-Useless: []
5714_3-Constancy: [(17, 0), (8, 0), (3, 0)]
5714_3-ContextAliasing: [(4, 21)]

.....
-----
Block: 5738_3
5738_3Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_3-Stack size: 27 
5738_3-Equals Mem:<< []>> 
5738_3-NonEquals Mem: << [<11,5>]>> 
5738_3-Equals Sto:<< []>> 
5738_3-NonEquals Sto: << []>> 
5738_3-Useless: []
5738_3-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_3-ContextAliasing: [(8, 21)]

.....
-----
Block: 6249_7
6249_7Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_7-Stack size: 26 
6249_7-Equals Mem:<< []>> 
6249_7-NonEquals Mem: << [<5,8>]>> 
6249_7-Equals Sto:<< []>> 
6249_7-NonEquals Sto: << []>> 
6249_7-Useless: []
6249_7-Constancy: [(20, 0), (11, 0), (6, 0), (5, 0)]
6249_7-ContextAliasing: []

.....
-----
Block: 4647
4647Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x126a', 'PUSH2 0x124c', 'DUP4', 'DUP4', 'PUSH2 0x15e5', 'JUMP']>> 
4647-Stack size: 12 
4647-Equals Mem:<< []>> 
4647-NonEquals Mem: << [<11,14>]>> 
4647-Equals Sto:<< []>> 
4647-NonEquals Sto: << []>> 
4647-Useless: []
4647-Constancy: [(6, 0)]
4647-ContextAliasing: []

.....
-----
Block: 5605_0
5605_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12ca', 'JUMP']>> 
5605_0-Stack size: 15 
5605_0-Equals Mem:<< [<11,6>]>> 
5605_0-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5605_0-Equals Sto:<< []>> 
5605_0-NonEquals Sto: << []>> 
5605_0-Useless: []
5605_0-Constancy: [(9, 0)]
5605_0-ContextAliasing: []

.....
-----
Block: 4821_1
4821_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
4821_1-Stack size: 22 
4821_1-Equals Mem:<< []>> 
4821_1-NonEquals Mem: << [<6,1>]>> 
4821_1-Equals Sto:<< []>> 
4821_1-NonEquals Sto: << []>> 
4821_1-Useless: []
4821_1-Constancy: [(16, 0), (6, 0), (1, 0)]
4821_1-ContextAliasing: [(2, 21)]

.....
-----
Block: 5714_2
5714_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_2-Stack size: 24 
5714_2-Equals Mem:<< []>> 
5714_2-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_2-Equals Sto:<< []>> 
5714_2-NonEquals Sto: << []>> 
5714_2-Useless: []
5714_2-Constancy: [(18, 0), (8, 0), (3, 0)]
5714_2-ContextAliasing: [(4, 22)]

.....
-----
Block: 5738_2
5738_2Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_2-Stack size: 28 
5738_2-Equals Mem:<< []>> 
5738_2-NonEquals Mem: << [<11,5>]>> 
5738_2-Equals Sto:<< []>> 
5738_2-NonEquals Sto: << []>> 
5738_2-Useless: []
5738_2-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_2-ContextAliasing: [(8, 22)]

.....
-----
Block: 6249_6
6249_6Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_6-Stack size: 27 
6249_6-Equals Mem:<< []>> 
6249_6-NonEquals Mem: << [<5,8>]>> 
6249_6-Equals Sto:<< []>> 
6249_6-NonEquals Sto: << []>> 
6249_6-Useless: []
6249_6-Constancy: [(21, 0), (11, 0), (6, 0), (5, 0)]
6249_6-ContextAliasing: []

.....
-----
Block: 4684
4684Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1587', 'JUMP']>> 
4684-Stack size: 13 
4684-Equals Mem:<< []>> 
4684-NonEquals Mem: << [<11,14>]>> 
4684-Equals Sto:<< []>> 
4684-NonEquals Sto: << []>> 
4684-Useless: []
4684-Constancy: [(7, 0)]
4684-ContextAliasing: []

.....
-----
Block: 6249_5
6249_5Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_5-Stack size: 21 
6249_5-Equals Mem:<< []>> 
6249_5-NonEquals Mem: << [<5,8>]>> 
6249_5-Equals Sto:<< []>> 
6249_5-NonEquals Sto: << []>> 
6249_5-Useless: []
6249_5-Constancy: [(15, 0), (6, 0), (5, 0)]
6249_5-ContextAliasing: []

.....
-----
Block: 5534
5534Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5534-Stack size: 16 
5534-Equals Mem:<< []>> 
5534-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5534-Equals Sto:<< []>> 
5534-NonEquals Sto: << []>> 
5534-Useless: []
5534-Constancy: [(10, 0), (1, 0)]
5534-ContextAliasing: []

.....
-----
Block: 4714
4714Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x12b3', 'DUP6', 'DUP6', 'PUSH2 0x15e5', 'JUMP']>> 
4714-Stack size: 12 
4714-Equals Mem:<< []>> 
4714-NonEquals Mem: << [<12,15>]>> 
4714-Equals Sto:<< []>> 
4714-NonEquals Sto: << []>> 
4714-Useless: []
4714-Constancy: [(6, 0)]
4714-ContextAliasing: []

.....
-----
Block: 5605_1
5605_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12ca', 'JUMP']>> 
5605_1-Stack size: 17 
5605_1-Equals Mem:<< [<11,6>]>> 
5605_1-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5605_1-Equals Sto:<< []>> 
5605_1-NonEquals Sto: << []>> 
5605_1-Useless: []
5605_1-Constancy: [(11, 0)]
5605_1-ContextAliasing: []

.....
-----
Block: 4821_0
4821_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
4821_0-Stack size: 24 
4821_0-Equals Mem:<< []>> 
4821_0-NonEquals Mem: << [<6,1>]>> 
4821_0-Equals Sto:<< []>> 
4821_0-NonEquals Sto: << []>> 
4821_0-Useless: []
4821_0-Constancy: [(18, 0), (6, 0), (1, 0)]
4821_0-ContextAliasing: [(2, 23)]

.....
-----
Block: 5714_1
5714_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_1-Stack size: 26 
5714_1-Equals Mem:<< []>> 
5714_1-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_1-Equals Sto:<< []>> 
5714_1-NonEquals Sto: << []>> 
5714_1-Useless: []
5714_1-Constancy: [(20, 0), (8, 0), (3, 0)]
5714_1-ContextAliasing: [(4, 24)]

.....
-----
Block: 5738_1
5738_1Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_1-Stack size: 30 
5738_1-Equals Mem:<< []>> 
5738_1-NonEquals Mem: << [<11,5>]>> 
5738_1-Equals Sto:<< []>> 
5738_1-NonEquals Sto: << []>> 
5738_1-Useless: []
5738_1-Constancy: [(24, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5738_1-ContextAliasing: [(8, 24)]

.....
-----
Block: 6249_4
6249_4Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_4-Stack size: 29 
6249_4-Equals Mem:<< []>> 
6249_4-NonEquals Mem: << [<5,8>]>> 
6249_4-Equals Sto:<< []>> 
6249_4-NonEquals Sto: << []>> 
6249_4-Useless: []
6249_4-Constancy: [(23, 0), (11, 0), (6, 0), (5, 0)]
6249_4-ContextAliasing: []

.....
-----
Block: 4821
4821Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
4821-Stack size: 15 
4821-Equals Mem:<< []>> 
4821-NonEquals Mem: << [<6,1>]>> 
4821-Equals Sto:<< []>> 
4821-NonEquals Sto: << []>> 
4821-Useless: []
4821-Constancy: [(9, 0), (1, 0)]
4821-ContextAliasing: [(2, 14)]

.....
-----
Block: 5714_0
5714_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714_0-Stack size: 17 
5714_0-Equals Mem:<< []>> 
5714_0-NonEquals Mem: << [<5,7>, <12,7>]>> 
5714_0-Equals Sto:<< []>> 
5714_0-NonEquals Sto: << []>> 
5714_0-Useless: []
5714_0-Constancy: [(11, 0), (3, 0)]
5714_0-ContextAliasing: [(4, 15)]

.....
-----
Block: 5738_0
5738_0Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738_0-Stack size: 21 
5738_0-Equals Mem:<< []>> 
5738_0-NonEquals Mem: << [<11,5>]>> 
5738_0-Equals Sto:<< []>> 
5738_0-NonEquals Sto: << []>> 
5738_0-Useless: []
5738_0-Constancy: [(15, 0), (7, 0), (3, 0), (2, 32)]
5738_0-ContextAliasing: [(8, 15)]

.....
-----
Block: 6249_3
6249_3Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_3-Stack size: 20 
6249_3-Equals Mem:<< []>> 
6249_3-NonEquals Mem: << [<5,8>]>> 
6249_3-Equals Sto:<< []>> 
6249_3-NonEquals Sto: << []>> 
6249_3-Useless: []
6249_3-Constancy: [(14, 0), (6, 0), (5, 0)]
6249_3-ContextAliasing: []

.....
-----
Block: 2979_0
2979_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
2979_0-Stack size: 10 
2979_0-Equals Mem:<< []>> 
2979_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2979_0-Equals Sto:<< []>> 
2979_0-NonEquals Sto: << []>> 
2979_0-Useless: []
2979_0-Constancy: [(4, 0)]
2979_0-ContextAliasing: []

.....
-----
Block: 3077_0
3077_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3077_0-Stack size: 10 
3077_0-Equals Mem:<< []>> 
3077_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3077_0-Equals Sto:<< []>> 
3077_0-NonEquals Sto: << []>> 
3077_0-Useless: []
3077_0-Constancy: [(4, 0)]
3077_0-ContextAliasing: []

.....
-----
Block: 6249
6249Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249-Stack size: 8 
6249-Equals Mem:<< []>> 
6249-NonEquals Mem: << [<5,8>]>> 
6249-Equals Sto:<< []>> 
6249-NonEquals Sto: << []>> 
6249-Useless: []
6249-Constancy: [(5, 0)]
6249-ContextAliasing: []

.....
-----
Block: 6249_2
6249_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_2-Stack size: 18 
6249_2-Equals Mem:<< []>> 
6249_2-NonEquals Mem: << [<5,8>]>> 
6249_2-Equals Sto:<< []>> 
6249_2-NonEquals Sto: << []>> 
6249_2-Useless: []
6249_2-Constancy: [(15, 0), (11, 0), (7, 0)]
6249_2-ContextAliasing: []

.....
-----
Block: 6249_1
6249_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_1-Stack size: 14 
6249_1-Equals Mem:<< []>> 
6249_1-NonEquals Mem: << [<5,8>]>> 
6249_1-Equals Sto:<< []>> 
6249_1-NonEquals Sto: << []>> 
6249_1-Useless: []
6249_1-Constancy: [(11, 0), (7, 0), (3, 0)]
6249_1-ContextAliasing: []

.....
-----
Block: 6249_0
6249_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249_0-Stack size: 13 
6249_0-Equals Mem:<< []>> 
6249_0-NonEquals Mem: << [<5,8>]>> 
6249_0-Equals Sto:<< []>> 
6249_0-NonEquals Sto: << []>> 
6249_0-Useless: []
6249_0-Constancy: [(10, 0), (6, 0), (2, 0)]
6249_0-ContextAliasing: []

.....
-----
Block: 2979
2979Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
2979-Stack size: 9 
2979-Equals Mem:<< []>> 
2979-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2979-Equals Sto:<< []>> 
2979-NonEquals Sto: << []>> 
2979-Useless: []
2979-Constancy: [(4, 0)]
2979-ContextAliasing: []

.....
-----
Block: 3077
3077Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3077-Stack size: 9 
3077-Equals Mem:<< []>> 
3077-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3077-Equals Sto:<< []>> 
3077-NonEquals Sto: << []>> 
3077-Useless: []
3077-Constancy: [(4, 0)]
3077-ContextAliasing: []

.....
-----
Block: 341
341Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH8 0x2bb7b59021b7b4b7', 'PUSH1 0xc1', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE']>> 
341-Stack size: 2 
341-Equals Mem:<< [<10,4>]>> 
341-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
341-Equals Sto:<< []>> 
341-NonEquals Sto: << []>> 
341-Useless: []
341-Constancy: []
341-ContextAliasing: []

.....
-----
Block: 387
387Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
387-Stack size: 2 
387-Equals Mem:<< []>> 
387-NonEquals Mem: << []>> 
387-Equals Sto:<< []>> 
387-NonEquals Sto: << []>> 
387-Useless: []
387-Constancy: []
387-ContextAliasing: []

.....
-----
Block: 1304_14
1304_14Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_14-Stack size: 4 
1304_14-Equals Mem:<< []>> 
1304_14-NonEquals Mem: << []>> 
1304_14-Equals Sto:<< []>> 
1304_14-NonEquals Sto: << []>> 
1304_14-Useless: []
1304_14-Constancy: []
1304_14-ContextAliasing: []

.....
-----
Block: 1304_16
1304_16Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_16-Stack size: 3 
1304_16-Equals Mem:<< []>> 
1304_16-NonEquals Mem: << []>> 
1304_16-Equals Sto:<< []>> 
1304_16-NonEquals Sto: << []>> 
1304_16-Useless: []
1304_16-Constancy: []
1304_16-ContextAliasing: []

.....
-----
Block: 1304_28
1304_28Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_28-Stack size: 7 
1304_28-Equals Mem:<< []>> 
1304_28-NonEquals Mem: << []>> 
1304_28-Equals Sto:<< []>> 
1304_28-NonEquals Sto: << []>> 
1304_28-Useless: []
1304_28-Constancy: []
1304_28-ContextAliasing: []

.....
-----
Block: 6672
6672Instr:<<['JUMPDEST', 'DUP4', 'MLOAD', 'SWAP3', 'POP', 'PUSH1 0x20', 'DUP5', 'ADD', 'MLOAD', 'SWAP2', 'POP', 'PUSH1 0x40', 'DUP5', 'ADD', 'MLOAD', 'SWAP1', 'POP', 'SWAP3', 'POP', 'SWAP3', 'POP', 'SWAP3', 'JUMP']>> 
6672-Stack size: 8 
6672-Equals Mem:<< []>> 
6672-NonEquals Mem: << [<2,8>, <2,14>, <8,14>]>> 
6672-Equals Sto:<< []>> 
6672-NonEquals Sto: << []>> 
6672-Useless: []
6672-Constancy: [(2, 0), (1, 0), (0, 0)]
6672-ContextAliasing: []

.....
-----
Block: 387_1
387_1Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
387_1-Stack size: 3 
387_1-Equals Mem:<< []>> 
387_1-NonEquals Mem: << []>> 
387_1-Equals Sto:<< []>> 
387_1-NonEquals Sto: << []>> 
387_1-Useless: []
387_1-Constancy: []
387_1-ContextAliasing: []

.....
-----
Block: 387_0
387_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
387_0-Stack size: 3 
387_0-Equals Mem:<< []>> 
387_0-NonEquals Mem: << []>> 
387_0-Equals Sto:<< []>> 
387_0-NonEquals Sto: << []>> 
387_0-Useless: []
387_0-Constancy: []
387_0-ContextAliasing: []

.....
-----
Block: 1304
1304Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304-Stack size: 10 
1304-Equals Mem:<< []>> 
1304-NonEquals Mem: << []>> 
1304-Equals Sto:<< []>> 
1304-NonEquals Sto: << []>> 
1304-Useless: []
1304-Constancy: [(5, 0)]
1304-ContextAliasing: []

.....
-----
Block: 1304_26
1304_26Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_26-Stack size: 20 
1304_26-Equals Mem:<< []>> 
1304_26-NonEquals Mem: << []>> 
1304_26-Equals Sto:<< []>> 
1304_26-NonEquals Sto: << []>> 
1304_26-Useless: []
1304_26-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
1304_26-ContextAliasing: []

.....
-----
Block: 1304_25
1304_25Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_25-Stack size: 11 
1304_25-Equals Mem:<< []>> 
1304_25-NonEquals Mem: << []>> 
1304_25-Equals Sto:<< []>> 
1304_25-NonEquals Sto: << []>> 
1304_25-Useless: []
1304_25-Constancy: [(6, 0)]
1304_25-ContextAliasing: []

.....
-----
Block: 1304_23
1304_23Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_23-Stack size: 20 
1304_23-Equals Mem:<< []>> 
1304_23-NonEquals Mem: << []>> 
1304_23-Equals Sto:<< []>> 
1304_23-NonEquals Sto: << []>> 
1304_23-Useless: []
1304_23-Constancy: [(15, 0), (6, 0), (1, 0)]
1304_23-ContextAliasing: []

.....
-----
Block: 1304_24
1304_24Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_24-Stack size: 18 
1304_24-Equals Mem:<< []>> 
1304_24-NonEquals Mem: << []>> 
1304_24-Equals Sto:<< []>> 
1304_24-NonEquals Sto: << []>> 
1304_24-Useless: []
1304_24-Constancy: [(13, 0), (2, 0)]
1304_24-ContextAliasing: []

.....
-----
Block: 1304_22
1304_22Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_22-Stack size: 19 
1304_22-Equals Mem:<< []>> 
1304_22-NonEquals Mem: << []>> 
1304_22-Equals Sto:<< []>> 
1304_22-NonEquals Sto: << []>> 
1304_22-Useless: []
1304_22-Constancy: [(14, 0)]
1304_22-ContextAliasing: []

.....
-----
Block: 1304_27
1304_27Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_27-Stack size: 18 
1304_27-Equals Mem:<< []>> 
1304_27-NonEquals Mem: << []>> 
1304_27-Equals Sto:<< []>> 
1304_27-NonEquals Sto: << []>> 
1304_27-Useless: []
1304_27-Constancy: [(13, 0), (8, 0), (2, 0)]
1304_27-ContextAliasing: []

.....
-----
Block: 1304_21
1304_21Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_21-Stack size: 16 
1304_21-Equals Mem:<< []>> 
1304_21-NonEquals Mem: << []>> 
1304_21-Equals Sto:<< []>> 
1304_21-NonEquals Sto: << []>> 
1304_21-Useless: []
1304_21-Constancy: [(11, 0), (2, 0)]
1304_21-ContextAliasing: []

.....
-----
Block: 1304_20
1304_20Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_20-Stack size: 20 
1304_20-Equals Mem:<< []>> 
1304_20-NonEquals Mem: << []>> 
1304_20-Equals Sto:<< []>> 
1304_20-NonEquals Sto: << []>> 
1304_20-Useless: []
1304_20-Constancy: [(15, 0), (6, 0), (1, 0)]
1304_20-ContextAliasing: []

.....
-----
Block: 1304_19
1304_19Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_19-Stack size: 21 
1304_19-Equals Mem:<< []>> 
1304_19-NonEquals Mem: << []>> 
1304_19-Equals Sto:<< []>> 
1304_19-NonEquals Sto: << []>> 
1304_19-Useless: []
1304_19-Constancy: [(16, 0), (6, 0), (1, 0)]
1304_19-ContextAliasing: []

.....
-----
Block: 1304_18
1304_18Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_18-Stack size: 16 
1304_18-Equals Mem:<< []>> 
1304_18-NonEquals Mem: << []>> 
1304_18-Equals Sto:<< []>> 
1304_18-NonEquals Sto: << []>> 
1304_18-Useless: []
1304_18-Constancy: [(11, 0), (2, 0)]
1304_18-ContextAliasing: []

.....
-----
Block: 1304_17
1304_17Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_17-Stack size: 23 
1304_17-Equals Mem:<< []>> 
1304_17-NonEquals Mem: << []>> 
1304_17-Equals Sto:<< []>> 
1304_17-NonEquals Sto: << []>> 
1304_17-Useless: []
1304_17-Constancy: [(18, 0), (6, 0), (1, 0)]
1304_17-ContextAliasing: []

.....
-----
Block: 1304_15
1304_15Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_15-Stack size: 11 
1304_15-Equals Mem:<< []>> 
1304_15-NonEquals Mem: << []>> 
1304_15-Equals Sto:<< []>> 
1304_15-NonEquals Sto: << []>> 
1304_15-Useless: []
1304_15-Constancy: []
1304_15-ContextAliasing: []

.....
-----
Block: 1304_13
1304_13Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_13-Stack size: 11 
1304_13-Equals Mem:<< []>> 
1304_13-NonEquals Mem: << []>> 
1304_13-Equals Sto:<< []>> 
1304_13-NonEquals Sto: << []>> 
1304_13-Useless: []
1304_13-Constancy: [(5, 0)]
1304_13-ContextAliasing: []

.....
-----
Block: 1304_11
1304_11Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_11-Stack size: 21 
1304_11-Equals Mem:<< []>> 
1304_11-NonEquals Mem: << []>> 
1304_11-Equals Sto:<< []>> 
1304_11-NonEquals Sto: << []>> 
1304_11-Useless: []
1304_11-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
1304_11-ContextAliasing: []

.....
-----
Block: 1304_10
1304_10Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_10-Stack size: 12 
1304_10-Equals Mem:<< []>> 
1304_10-NonEquals Mem: << []>> 
1304_10-Equals Sto:<< []>> 
1304_10-NonEquals Sto: << []>> 
1304_10-Useless: []
1304_10-Constancy: [(6, 0)]
1304_10-ContextAliasing: []

.....
-----
Block: 1304_8
1304_8Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_8-Stack size: 21 
1304_8-Equals Mem:<< []>> 
1304_8-NonEquals Mem: << []>> 
1304_8-Equals Sto:<< []>> 
1304_8-NonEquals Sto: << []>> 
1304_8-Useless: []
1304_8-Constancy: [(15, 0), (6, 0), (1, 0)]
1304_8-ContextAliasing: []

.....
-----
Block: 1304_9
1304_9Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_9-Stack size: 19 
1304_9-Equals Mem:<< []>> 
1304_9-NonEquals Mem: << []>> 
1304_9-Equals Sto:<< []>> 
1304_9-NonEquals Sto: << []>> 
1304_9-Useless: []
1304_9-Constancy: [(13, 0), (2, 0)]
1304_9-ContextAliasing: []

.....
-----
Block: 1304_7
1304_7Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_7-Stack size: 20 
1304_7-Equals Mem:<< []>> 
1304_7-NonEquals Mem: << []>> 
1304_7-Equals Sto:<< []>> 
1304_7-NonEquals Sto: << []>> 
1304_7-Useless: []
1304_7-Constancy: [(14, 0)]
1304_7-ContextAliasing: []

.....
-----
Block: 1304_12
1304_12Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_12-Stack size: 19 
1304_12-Equals Mem:<< []>> 
1304_12-NonEquals Mem: << []>> 
1304_12-Equals Sto:<< []>> 
1304_12-NonEquals Sto: << []>> 
1304_12-Useless: []
1304_12-Constancy: [(13, 0), (8, 0), (2, 0)]
1304_12-ContextAliasing: []

.....
-----
Block: 1304_6
1304_6Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_6-Stack size: 17 
1304_6-Equals Mem:<< []>> 
1304_6-NonEquals Mem: << []>> 
1304_6-Equals Sto:<< []>> 
1304_6-NonEquals Sto: << []>> 
1304_6-Useless: []
1304_6-Constancy: [(11, 0), (2, 0)]
1304_6-ContextAliasing: []

.....
-----
Block: 1304_5
1304_5Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_5-Stack size: 21 
1304_5-Equals Mem:<< []>> 
1304_5-NonEquals Mem: << []>> 
1304_5-Equals Sto:<< []>> 
1304_5-NonEquals Sto: << []>> 
1304_5-Useless: []
1304_5-Constancy: [(15, 0), (6, 0), (1, 0)]
1304_5-ContextAliasing: []

.....
-----
Block: 1304_4
1304_4Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_4-Stack size: 22 
1304_4-Equals Mem:<< []>> 
1304_4-NonEquals Mem: << []>> 
1304_4-Equals Sto:<< []>> 
1304_4-NonEquals Sto: << []>> 
1304_4-Useless: []
1304_4-Constancy: [(16, 0), (6, 0), (1, 0)]
1304_4-ContextAliasing: []

.....
-----
Block: 1304_3
1304_3Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_3-Stack size: 17 
1304_3-Equals Mem:<< []>> 
1304_3-NonEquals Mem: << []>> 
1304_3-Equals Sto:<< []>> 
1304_3-NonEquals Sto: << []>> 
1304_3-Useless: []
1304_3-Constancy: [(11, 0), (2, 0)]
1304_3-ContextAliasing: []

.....
-----
Block: 1304_2
1304_2Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_2-Stack size: 24 
1304_2-Equals Mem:<< []>> 
1304_2-NonEquals Mem: << []>> 
1304_2-Equals Sto:<< []>> 
1304_2-NonEquals Sto: << []>> 
1304_2-Useless: []
1304_2-Constancy: [(18, 0), (6, 0), (1, 0)]
1304_2-ContextAliasing: []

.....
-----
Block: 1304_1
1304_1Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_1-Stack size: 15 
1304_1-Equals Mem:<< []>> 
1304_1-NonEquals Mem: << []>> 
1304_1-Equals Sto:<< []>> 
1304_1-NonEquals Sto: << []>> 
1304_1-Useless: []
1304_1-Constancy: [(9, 0), (1, 0)]
1304_1-ContextAliasing: []

.....
-----
Block: 1304_0
1304_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304_0-Stack size: 11 
1304_0-Equals Mem:<< []>> 
1304_0-NonEquals Mem: << []>> 
1304_0-Equals Sto:<< []>> 
1304_0-NonEquals Sto: << []>> 
1304_0-Useless: []
1304_0-Constancy: [(5, 0)]
1304_0-ContextAliasing: []

.....
-----
Block: 1708
1708Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SSTORE', 'PUSH1 0x06', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'PUSH32 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf', 'PUSH2 0x06e6', 'PUSH1 0x09', 'PUSH1 0x0a', 'PUSH2 0x195d', 'JUMP']>> 
1708-Stack size: 3 
1708-Equals Mem:<< []>> 
1708-NonEquals Mem: << []>> 
1708-Equals Sto:<< [<5,10>]>> 
1708-NonEquals Sto: << [<2,5>, <2,10>]>> 
1708-Useless: []
1708-Constancy: []
1708-ContextAliasing: []

.....
-----
Block: 1942
1942Instr:<<['JUMPDEST', 'PUSH1 0x13', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH20 0x7a250d5630b4cf539739df2c5dacb4c659f2488d', 'SWAP1', 'DUP2', 'OR', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH2 0x07df', 'SWAP1', 'ADDRESS', 'SWAP1', 'PUSH2 0x07d1', 'PUSH1 0x09', 'PUSH1 0x0a', 'PUSH2 0x195d', 'JUMP']>> 
1942-Stack size: 2 
1942-Equals Mem:<< []>> 
1942-NonEquals Mem: << []>> 
1942-Equals Sto:<< [<3,17>]>> 
1942-NonEquals Sto: << []>> 
1942-Useless: []
1942-Constancy: []
1942-ContextAliasing: []

.....
-----
Block: 2722
2722Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH3 0xff00ff', 'PUSH1 0xa0', 'SHL', 'NOT', 'AND', 'PUSH3 0x010001', 'PUSH1 0xa0', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'JUMP']>> 
2722-Stack size: 3 
2722-Equals Mem:<< []>> 
2722-NonEquals Mem: << []>> 
2722-Equals Sto:<< [<4,15>]>> 
2722-NonEquals Sto: << []>> 
2722-Useless: []
2722-Constancy: []
2722-ContextAliasing: []

.....
-----
Block: 2954
2954Instr:<<['JUMPDEST', 'PUSH1 0x09', 'DUP2', 'SWAP1', 'SSTORE', 'PUSH1 0x0a', 'SSTORE', 'JUMP']>> 
2954-Stack size: 3 
2954-Equals Mem:<< []>> 
2954-NonEquals Mem: << []>> 
2954-Equals Sto:<< []>> 
2954-NonEquals Sto: << [<4,6>]>> 
2954-Useless: []
2954-Constancy: []
2954-ContextAliasing: []

.....
-----
Block: 3670
3670Instr:<<['JUMPDEST', 'PUSH2 0x0e82', 'PUSH1 0x64', 'PUSH2 0x0e7c', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e71', 'JUMPI']>> 
3670-Stack size: 11 
3670-Equals Mem:<< []>> 
3670-NonEquals Mem: << []>> 
3670-Equals Sto:<< []>> 
3670-NonEquals Sto: << [<5,7>]>> 
3670-Useless: []
3670-Constancy: [(5, 0), (0, 0)]
3670-ContextAliasing: []

.....
-----
Block: 4297
4297Instr:<<['PUSH2 0x10ed', 'PUSH1 0x64', 'PUSH2 0x0e7c', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x10e3', 'JUMPI']>> 
4297-Stack size: 11 
4297-Equals Mem:<< []>> 
4297-NonEquals Mem: << []>> 
4297-Equals Sto:<< []>> 
4297-NonEquals Sto: << [<4,6>]>> 
4297-Useless: []
4297-Constancy: [(5, 0)]
4297-ContextAliasing: []

.....
-----
Block: 4431
4431Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4431-Stack size: 13 
4431-Equals Mem:<< []>> 
4431-NonEquals Mem: << []>> 
4431-Equals Sto:<< []>> 
4431-NonEquals Sto: << [<2,4>]>> 
4431-Useless: []
4431-Constancy: [(7, 0)]
4431-ContextAliasing: []

.....
-----
Block: 5213
5213Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5213-Stack size: 19 
5213-Equals Mem:<< []>> 
5213-NonEquals Mem: << []>> 
5213-Equals Sto:<< [<5,12>]>> 
5213-NonEquals Sto: << []>> 
5213-Useless: []
5213-Constancy: [(13, 0)]
5213-ContextAliasing: []

.....
-----
Block: 5213_0
5213_0Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5213_0-Stack size: 10 
5213_0-Equals Mem:<< []>> 
5213_0-NonEquals Mem: << []>> 
5213_0-Equals Sto:<< [<5,12>]>> 
5213_0-NonEquals Sto: << []>> 
5213_0-Useless: []
5213_0-Constancy: []
5213_0-ContextAliasing: []

.....
-----
Block: 3670_0
3670_0Instr:<<['JUMPDEST', 'PUSH2 0x0e82', 'PUSH1 0x64', 'PUSH2 0x0e7c', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e71', 'JUMPI']>> 
3670_0-Stack size: 10 
3670_0-Equals Mem:<< []>> 
3670_0-NonEquals Mem: << []>> 
3670_0-Equals Sto:<< []>> 
3670_0-NonEquals Sto: << [<5,7>]>> 
3670_0-Useless: []
3670_0-Constancy: [(5, 0), (0, 0)]
3670_0-ContextAliasing: []

.....
-----
Block: 5213_1
5213_1Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5213_1-Stack size: 18 
5213_1-Equals Mem:<< []>> 
5213_1-NonEquals Mem: << []>> 
5213_1-Equals Sto:<< [<5,12>]>> 
5213_1-NonEquals Sto: << []>> 
5213_1-Useless: []
5213_1-Constancy: [(13, 0)]
5213_1-ContextAliasing: []

.....
-----
Block: 4431_0
4431_0Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4431_0-Stack size: 12 
4431_0-Equals Mem:<< []>> 
4431_0-NonEquals Mem: << []>> 
4431_0-Equals Sto:<< []>> 
4431_0-NonEquals Sto: << [<2,4>]>> 
4431_0-Useless: []
4431_0-Constancy: [(7, 0)]
4431_0-ContextAliasing: []

.....
-----
Block: 4297_0
4297_0Instr:<<['PUSH2 0x10ed', 'PUSH1 0x64', 'PUSH2 0x0e7c', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x10e3', 'JUMPI']>> 
4297_0-Stack size: 10 
4297_0-Equals Mem:<< []>> 
4297_0-NonEquals Mem: << []>> 
4297_0-Equals Sto:<< []>> 
4297_0-NonEquals Sto: << [<4,6>]>> 
4297_0-Useless: []
4297_0-Constancy: [(5, 0)]
4297_0-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.38568603998282924s

*************************************************************
FILERES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_Ownable;12;13;2;4;2;1;0.0068635629722848535
FILERES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_SafeMath;1;1;0;1;0;0;0.0008438320364803076
FILERES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK;410;1086;73;308;231;25;0.8955347729497589


Aux path: /tmp/0x00//ethir_5b9dc4480ff64484b36de12bd1e1aced
The files generated by EthIR are stored in the following directory: /tmp/0x00/costabs/
Block: 66
66Instr:<<['JUMPDEST', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
66-Stack size: 1 
66-Equals Mem:<< [<5,16>]>> 
66-NonEquals Mem: << [<15,5>, <15,16>]>> 
66-Equals Sto:<< []>> 
66-NonEquals Sto: << []>> 
66-Useless: []
66-Constancy: []
66-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<4,15>], 'memory_deps_noneqs': [<4,14>, <14,15>]}
{'memory_deps_eqs': [<4,15>], 'memory_deps_noneqs': [<4,14>, <14,15>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('0', 'sload0'), 1), 0)}
Storage order: [(('0', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [32, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('s(5)', 's(5)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('s(5)', 's(5)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
MEJORADO: /tmp/gasol_62bae25dac4341ce9036cf28421511ac/jsons/isolated_block_0_0_input.json --- (6, 5)
{1: ((('0', 'sload0'), 1), 0)}
(('0', 'sload0'), 1)
sload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload1'), 1)
mload1
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP2 MSTORE RETURN

Optimized code stored in /tmp/0x00/Ownable_66_optimized.txt
Optimality results stored in /tmp/0x00/Ownable_66_statistics.csv

Estimated initial gas: 2166
Estimated gas optimized: 2125

Estimated initial size in bytes: 30
Estimated size optimized in bytes: 34

Initial number of instructions: 25
Final number of instructions: 11

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_Ownable_66;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;Ownable;66;2;False;True;True;JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN;JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP2 MSTORE RETURN;2166;30;25;2125;34;11;41;-4;14;True;False;False;False;0.13872864400036633;4;0;2100;2100

Block: 114
114Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'DUP2', 'SWAP1', 'MSTORE', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
114-Stack size: 2 
114-Equals Mem:<< [<1,26>]>> 
114-NonEquals Mem: << [<6,1>, <6,26>, <13,1>, <13,26>, <17,1>, <17,26>, <22,1>, <22,26>]>> 
114-Equals Sto:<< []>> 
114-NonEquals Sto: << []>> 
114-Useless: []
114-Constancy: [(0, 64)]
114-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<1,26>], 'memory_deps_noneqs': [<1,6>, <6,26>, <1,13>, <13,26>, <1,17>, <17,26>, <1,22>, <22,26>]}
{'memory_deps_eqs': [<1,26>], 'memory_deps_noneqs': [<1,6>, <6,26>, <1,13>, <13,26>, <1,17>, <17,26>, <1,22>, <22,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '32', 'mstore'), 2), (('s(13)', '35943731656364841964516503116990081338611484598491072354577564874054038349170', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(5)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(2)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
(('64', 'mload1'), 1)
mload1
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(2)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT

Optimized code stored in /tmp/0x00/Ownable_114_optimized.txt
Optimality results stored in /tmp/0x00/Ownable_114_statistics.csv

Estimated initial gas: 93
Estimated gas optimized: 93

Estimated initial size in bytes: 75
Estimated size optimized in bytes: 75

Initial number of instructions: 32
Final number of instructions: 32

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_Ownable_114;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;Ownable;114;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT;93;75;32;93;75;32;0;0;0;True;False;False;False;2.1252773639862426;1;3;0;0

Block: 1033
1033Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x02', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
1033-Stack size: 4 
1033-Equals Mem:<< [<12,27>, <17,31>]>> 
1033-NonEquals Mem: << [<12,17>, <12,31>, <17,27>, <27,31>]>> 
1033-Equals Sto:<< []>> 
1033-NonEquals Sto: << []>> 
1033-Useless: []
1033-Constancy: []
1033-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<11,26>, <16,30>], 'memory_deps_noneqs': [<11,16>, <11,30>, <16,26>, <26,30>]}
{'memory_deps_eqs': [<11,26>, <16,30>], 'memory_deps_noneqs': [<11,16>, <11,30>, <16,26>, <26,30>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{32: ((('s(3)', 'sload0'), 1), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
[OPT]: Removed mstore mstore with KECCAK
[OPT]: Removed mstore mstore with KECCAK
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '2', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(11)', 'sload0'), 1)
sload0
[(('s(11)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
SFS with rule: isolated_block_0_0_input.json
{32: ((('s(3)', 'sload0'), 1), 2)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x02 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST DUP3 DUP1 SWAP2 POP POP POP DUP2 PUSH1 0x2 DUP3 SWAP3 POP PUSH1 0x20 MSTORE SWAP1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x0 PUSH1 0x40 SWAP3 POP MSTORE PUSH1 0x0 KECCAK256 DUP2 SWAP2 POP SLOAD SWAP1 JUMP

Optimized code stored in /tmp/0x00/WOK_1033_optimized.txt
Optimality results stored in /tmp/0x00/WOK_1033_statistics.csv

Estimated initial gas: 2261
Estimated gas optimized: 2211

Estimated initial size in bytes: 42
Estimated size optimized in bytes: 55

Initial number of instructions: 36
Final number of instructions: 30

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1033;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;1033;2;True;True;False;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x02 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP;JUMPDEST DUP3 DUP1 SWAP2 POP POP POP DUP2 PUSH1 0x2 DUP3 SWAP3 POP PUSH1 0x20 MSTORE SWAP1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x0 PUSH1 0x40 SWAP3 POP MSTORE PUSH1 0x0 KECCAK256 DUP2 SWAP2 POP SLOAD SWAP1 JUMP;2261;42;36;2211;55;30;50;-13;6;True;False;False;False;2.1298048780299723;4;2;2100;2100

Block: 2766
2766Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
2766-Stack size: 3 
2766-Equals Mem:<< []>> 
2766-NonEquals Mem: << [<6,1>]>> 
2766-Equals Sto:<< []>> 
2766-NonEquals Sto: << []>> 
2766-Useless: []
2766-Constancy: []
2766-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP

Optimized sequence (basic block per line):
PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP

Optimized code stored in /tmp/0x00/WOK_2766_optimized.txt
Optimality results stored in /tmp/0x00/WOK_2766_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2766;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;2766;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP;PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.02877367998007685;1;0;0;0

Block: 2823
2823Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x0b42', 'DUP2', 'PUSH2 0x19cb', 'JUMP']>> 
2823-Stack size: 9 
2823-Equals Mem:<< []>> 
2823-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
2823-Equals Sto:<< [<31,43>]>> 
2823-NonEquals Sto: << []>> 
2823-Useless: []
2823-Constancy: [(2, 0)]
2823-ContextAliasing: [(6, 7)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>], 'storage_deps_eqs': [<30,42>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
Storage order: [(('0', 's(14)', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('s(15)', 's(17)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: [(('s(9)', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2), (('s(13)', 's(2)', 'mstore'), 2), (('0', 's(14)', 'keccak2560'), 2)]
Memory dep: [(2, 3), (1, 3)]
Memory dep simplified: [(2, 3), (1, 3)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b42 DUP2 PUSH2 0x19cb JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b42 DUP2 PUSH2 0x19cb JUMP

Optimized code stored in /tmp/0x00/WOK_2823_optimized.txt
Optimality results stored in /tmp/0x00/WOK_2823_statistics.csv

Estimated initial gas: 5172
Estimated gas optimized: 5172

Estimated initial size in bytes: 59
Estimated size optimized in bytes: 59

Initial number of instructions: 49
Final number of instructions: 49

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2823;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;2823;2;True;False;False;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b42 DUP2 PUSH2 0x19cb JUMP;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b42 DUP2 PUSH2 0x19cb JUMP;5172;59;49;5172;59;49;0;0;0;True;True;False;False;2.587311643990688;3;2;5000;5000

Block: 1829
1829Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
1829-Stack size: 2 
1829-Equals Mem:<< []>> 
1829-NonEquals Mem: << [<6,1>]>> 
1829-Equals Sto:<< []>> 
1829-NonEquals Sto: << []>> 
1829-Useless: []
1829-Constancy: []
1829-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP

Optimized sequence (basic block per line):
PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP

Optimized code stored in /tmp/0x00/WOK_1829_optimized.txt
Optimality results stored in /tmp/0x00/WOK_1829_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1829;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;1829;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP;PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.027531903993804008;1;0;0;0

Block: 1871
1871Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
1871-Stack size: 2 
1871-Equals Mem:<< []>> 
1871-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
1871-Equals Sto:<< []>> 
1871-NonEquals Sto: << []>> 
1871-Useless: []
1871-Constancy: []
1871-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '23', 'mstore'), 2), (('s(10)', '52670383177537149983225730548340231168144935501260929414795948319927108108288', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x518 JUMP

Optimized code stored in /tmp/0x00/WOK_1871_optimized.txt
Optimality results stored in /tmp/0x00/WOK_1871_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1871;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;1871;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0518 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x518 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.0948936880449764;1;3;0;0

Block: 2095
2095Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0853', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
2095-Stack size: 6 
2095-Equals Mem:<< [<18,6>]>> 
2095-NonEquals Mem: << []>> 
2095-Equals Sto:<< []>> 
2095-NonEquals Sto: << []>> 
2095-Useless: []
2095-Constancy: []
2095-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2095 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2226
2226Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x08d6', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
2226-Stack size: 9 
2226-Equals Mem:<< [<18,6>]>> 
2226-NonEquals Mem: << []>> 
2226-Equals Sto:<< []>> 
2226-NonEquals Sto: << []>> 
2226-Useless: []
2226-Constancy: []
2226-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2226 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2336
2336Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0944', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
2336-Stack size: 6 
2336-Equals Mem:<< [<18,6>]>> 
2336-NonEquals Mem: << []>> 
2336-Equals Sto:<< []>> 
2336-NonEquals Sto: << []>> 
2336-Useless: []
2336-Constancy: []
2336-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2336 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2372
2372Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'SWAP1', 'SWAP2', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH1 0x13', 'SLOAD', 'AND', 'PUSH4 0xf305d719', 'SELFBALANCE', 'ADDRESS', 'PUSH2 0x098b', 'DUP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2372-Stack size: 3 
2372-Equals Mem:<< []>> 
2372-NonEquals Mem: << [<41,44>]>> 
2372-Equals Sto:<< [<3,23>]>> 
2372-NonEquals Sto: << [<3,25>, <3,48>, <23,25>, <23,48>, <25,48>]>> 
2372-Useless: []
2372-Constancy: []
2372-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<40,43>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<40,43>], 'storage_deps_eqs': [<2,22>], 'storage_deps_noneqs': [<2,24>, <2,47>, <22,24>, <22,47>, <24,47>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('20', 'sload0'), 1), 0), 22: ((('20', 's(14)', 'sstore'), 2), 1), 24: ((('19', 'sload1'), 1), 2), 47: ((('s(6)', 'sload2'), 1), 4)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(14)', 'sstore'), 2), (('19', 'sload1'), 1), (('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: [(('0', 's(22)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
AND(ADDRESS,2^160)
[RULE]: Simplification rule type 2: {'id': 'ADDRESS_0', 'opcode': '30', 'disasm': 'ADDRESS', 'inpt_sk': [], 'outpt_sk': ['s(22)'], 'push': False, 'gas': 2, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Delete rules: [{'id': 'AND_3', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(22)'], 'outpt_sk': ['s(22)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}]
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('19', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('s(6)', 'sload2'), 1)
sload2
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 22: ((('20', 's(14)', 'sstore'), 2), 1), 24: ((('19', 'sload1'), 1), 2), 47: ((('s(6)', 'sload2'), 1), 4)}
(('20', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('19', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('s(6)', 'sload2'), 1)
sload2
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x098b DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x098b DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP

Optimized code stored in /tmp/0x00/WOK_2372_optimized.txt
Optimality results stored in /tmp/0x00/WOK_2372_statistics.csv

Estimated initial gas: 9371
Estimated gas optimized: 9371

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 71

Initial number of instructions: 51
Final number of instructions: 51

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2372;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;2372;2;True;False;False;JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x098b DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP;JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x098b DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP;9371;71;51;9371;71;51;0;0;0;True;True;False;False;2.3095340150175616;8;2;9200;9200

Block: 2564
2564Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0a29', 'SWAP2', 'SWAP1', 'PUSH2 0x19fe', 'JUMP']>> 
2564-Stack size: 7 
2564-Equals Mem:<< [<19,7>]>> 
2564-NonEquals Mem: << []>> 
2564-Equals Sto:<< []>> 
2564-NonEquals Sto: << []>> 
2564-Useless: []
2564-Constancy: []
2564-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<6,18>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<6,18>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(5)', 's(8)', '+'), 2), (('s(8)', '31', '+'), 2), (('s(12)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(5)', 's(11)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(5)', 's(8)', '+'), 2), (('s(8)', '31', '+'), 2), (('s(12)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(5)', 's(11)', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2564 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2686
2686Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0aa2', 'SWAP2', 'SWAP1', 'PUSH2 0x1a29', 'JUMP']>> 
2686-Stack size: 6 
2686-Equals Mem:<< [<18,6>]>> 
2686-NonEquals Mem: << []>> 
2686-Equals Sto:<< []>> 
2686-NonEquals Sto: << []>> 
2686-Useless: []
2686-Constancy: []
2686-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2686 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 464
464Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
464-Stack size: 2 
464-Equals Mem:<< []>> 
464-NonEquals Mem: << [<5,2>]>> 
464-Equals Sto:<< []>> 
464-NonEquals Sto: << []>> 
464-Useless: []
464-Constancy: []
464-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(0)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0183 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0183 JUMP

Optimized code stored in /tmp/0x00/WOK_464_optimized.txt
Optimality results stored in /tmp/0x00/WOK_464_statistics.csv

Estimated initial gas: 33
Estimated gas optimized: 33

Estimated initial size in bytes: 14
Estimated size optimized in bytes: 14

Initial number of instructions: 10
Final number of instructions: 10

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_464;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;464;2;False;True;True;JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0183 JUMP;JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0183 JUMP;33;14;10;33;14;10;0;0;0;True;False;False;False;0.01812459999928251;0;0;0;0

Block: 427
427Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
427-Stack size: 2 
427-Equals Mem:<< []>> 
427-NonEquals Mem: << [<7,2>]>> 
427-Equals Sto:<< []>> 
427-NonEquals Sto: << []>> 
427-Useless: []
427-Constancy: []
427-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('s(0)', 'iszero'), 1), (('s(5)', 'iszero'), 1)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('s(0)', 'iszero'), 1), (('s(5)', 'iszero'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0183 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0183 JUMP

Optimized code stored in /tmp/0x00/WOK_427_optimized.txt
Optimality results stored in /tmp/0x00/WOK_427_statistics.csv

Estimated initial gas: 39
Estimated gas optimized: 39

Estimated initial size in bytes: 16
Estimated size optimized in bytes: 16

Initial number of instructions: 12
Final number of instructions: 12

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_427;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;427;2;False;True;True;JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0183 JUMP;JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0183 JUMP;39;16;12;39;16;12;0;0;0;True;False;False;False;0.051400693017058074;0;0;0;0

Block: 847
847Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x03', 'DUP2', 'MSTORE', 'PUSH3 0x574f4b', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x0176', 'JUMP']>> 
847-Stack size: 2 
847-Equals Mem:<< [<10,4>]>> 
847-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
847-Equals Sto:<< []>> 
847-NonEquals Sto: << []>> 
847-Useless: []
847-Constancy: []
847-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>]}
{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('232', '5721931', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(3)', 'mstore'), 2), (('s(2)', '3', 'mstore'), 2), (('s(6)', '39491316375837677442800340045794642524169026412239872111967657394408129560576', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3)]
Memory dep simplified: [(2, 3), (1, 2), (0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(2)', '+'), 2), (('s(2)', '32', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(2)', '+'), 2), (('s(2)', '32', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_847 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5714
5714Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5714-Stack size: 4 
5714-Equals Mem:<< []>> 
5714-NonEquals Mem: << [<12,7>, <5,7>]>> 
5714-Equals Sto:<< []>> 
5714-NonEquals Sto: << []>> 
5714-Useless: []
5714-Constancy: []
5714-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<6,11>, <4,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<6,11>, <4,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(1)', '32', 'mstore'), 2), (('s(0)', 'mload0'), 1), (('s(7)', 's(6)', 'mstore'), 2)]
Memory dep: [(0, 2)]
Memory dep simplified: [(0, 2)]
********************IT*********************
(('s(0)', 'mload0'), 1)
mload0
[(('s(0)', 'mload0'), 1), (('s(1)', '32', '+'), 2)]
{}
(('s(0)', 'mload0'), 1)
mload0
[(('s(0)', 'mload0'), 1), (('s(1)', '32', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0

Optimized code stored in /tmp/0x00/WOK_5714_optimized.txt
Optimality results stored in /tmp/0x00/WOK_5714_statistics.csv

Estimated initial gas: 38
Estimated gas optimized: 38

Estimated initial size in bytes: 15
Estimated size optimized in bytes: 15

Initial number of instructions: 14
Final number of instructions: 14

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5714;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;5714;2;False;True;True;JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0;JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0;38;15;14;38;15;14;0;0;0;True;False;False;False;0.14710876299068332;0;1;0;0

Block: 5738
5738Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x1661', 'JUMP']>> 
5738-Stack size: 8 
5738-Equals Mem:<< []>> 
5738-NonEquals Mem: << [<11,5>]>> 
5738-Equals Sto:<< []>> 
5738-NonEquals Sto: << []>> 
5738-Useless: []
5738-Constancy: [(2, 32), (3, 0)]
5738-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,11>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,11>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(10)', 'mload0'), 1), (('s(8)', 's(12)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(10)', 'mload0'), 1)
mload0
[(('s(3)', 's(5)', '+'), 2), (('s(5)', 's(1)', '+'), 2), (('64', 's(9)', '+'), 2), (('s(5)', 's(0)', '+'), 2), (('s(3)', 's(11)', '+'), 2), (('s(10)', 'mload0'), 1)]
{}
(('s(10)', 'mload0'), 1)
mload0
[(('s(3)', 's(5)', '+'), 2), (('s(5)', 's(1)', '+'), 2), (('64', 's(9)', '+'), 2), (('s(5)', 's(0)', '+'), 2), (('s(3)', 's(11)', '+'), 2), (('s(10)', 'mload0'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1661 JUMP

Optimized sequence (basic block per line):
DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1661 JUMP

Optimized code stored in /tmp/0x00/WOK_5738_optimized.txt
Optimality results stored in /tmp/0x00/WOK_5738_statistics.csv

Estimated initial gas: 53
Estimated gas optimized: 53

Estimated initial size in bytes: 19
Estimated size optimized in bytes: 19

Initial number of instructions: 16
Final number of instructions: 16

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5738;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;5738;2;False;True;True;DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1661 JUMP;DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x1661 JUMP;53;19;16;53;19;16;0;0;0;True;False;False;False;0.6539435090380721;0;0;0;0

Block: 788
788Instr:<<['JUMPDEST', 'POP', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
788-Stack size: 2 
788-Equals Mem:<< []>> 
788-NonEquals Mem: << [<15,5>]>> 
788-Equals Sto:<< []>> 
788-NonEquals Sto: << []>> 
788-Useless: []
788-Constancy: []
788-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('0', 'sload0'), 1), 0)}
Storage order: [(('0', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(5)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('0', 'sload0'), 1), 0)}
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_788 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1630
1630Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
1630-Stack size: 2 
1630-Equals Mem:<< []>> 
1630-NonEquals Mem: << [<6,1>]>> 
1630-Equals Sto:<< []>> 
1630-NonEquals Sto: << []>> 
1630-Useless: []
1630-Constancy: []
1630-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP

Optimized sequence (basic block per line):
PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP

Optimized code stored in /tmp/0x00/WOK_1630_optimized.txt
Optimality results stored in /tmp/0x00/WOK_1630_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1630;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;1630;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP;PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.027771977009251714;1;0;0;0

Block: 1517
1517Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
1517-Stack size: 2 
1517-Equals Mem:<< []>> 
1517-NonEquals Mem: << [<6,1>]>> 
1517-Equals Sto:<< []>> 
1517-NonEquals Sto: << []>> 
1517-Useless: []
1517-Constancy: []
1517-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP

Optimized sequence (basic block per line):
PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP

Optimized code stored in /tmp/0x00/WOK_1517_optimized.txt
Optimality results stored in /tmp/0x00/WOK_1517_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1517;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;1517;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP;PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.027813261025585234;1;0;0;0

Block: 690
690Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
690-Stack size: 3 
690-Equals Mem:<< []>> 
690-NonEquals Mem: << [<10,13>]>> 
690-Equals Sto:<< []>> 
690-NonEquals Sto: << []>> 
690-Useless: []
690-Constancy: []
690-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(2)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(4)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(2)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(2)', 'sload0'), 1), 1)}
(('s(2)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_690 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1453
1453Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'DUP1', 'ISZERO', 'PUSH2 0x05cb', 'JUMPI']>> 
1453-Stack size: 2 
1453-Equals Mem:<< []>> 
1453-NonEquals Mem: << [<5,8>]>> 
1453-Equals Sto:<< []>> 
1453-NonEquals Sto: << []>> 
1453-Useless: []
1453-Constancy: []
1453-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(3)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('s(4)', 'iszero'), 1), (('address', 'address'), 0)]
{11: ((('s(3)', 'sload0'), 1), 1)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('s(4)', 'iszero'), 1), (('address', 'address'), 0)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1453 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 615
615Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'SWAP1', 'JUMP']>> 
615-Stack size: 3 
615-Equals Mem:<< []>> 
615-NonEquals Mem: << [<10,13>]>> 
615-Equals Sto:<< []>> 
615-NonEquals Sto: << []>> 
615-Useless: []
615-Constancy: []
615-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(3)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('255', 's(4)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(3)', 'sload0'), 1), 1)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('255', 's(4)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_615 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5932
5932Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5932-Stack size: 11 
5932-Equals Mem:<< []>> 
5932-NonEquals Mem: << [<5,8>]>> 
5932-Equals Sto:<< []>> 
5932-NonEquals Sto: << []>> 
5932-Useless: []
5932-Constancy: []
5932-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '65', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5932 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 6066
6066Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x17cf', 'JUMPI']>> 
6066-Stack size: 13 
6066-Equals Mem:<< []>> 
6066-NonEquals Mem: << [<2,5>]>> 
6066-Equals Sto:<< []>> 
6066-NonEquals Sto: << []>> 
6066-Useless: []
6066-Constancy: [(7, 0), (6, 32)]
6066-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 's(9)', 'mstore'), 2), (('s(8)', 's(6)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
{}
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x17cf JUMPI

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x17cf JUMPI

Optimized code stored in /tmp/0x00/WOK_6066_optimized.txt
Optimality results stored in /tmp/0x00/WOK_6066_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 26
Estimated size optimized in bytes: 26

Initial number of instructions: 23
Final number of instructions: 23

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_6066;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;6066;2;True;False;False;JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x17cf JUMPI;JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x17cf JUMPI;73;26;23;73;26;23;0;0;0;True;False;False;False;2.165884346002713;0;0;0;0

Block: 1281
1281Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP1', 'PUSH2 0x1982', 'JUMP']>> 
1281-Stack size: 3 
1281-Equals Mem:<< []>> 
1281-NonEquals Mem: << [<6,1>]>> 
1281-Equals Sto:<< []>> 
1281-NonEquals Sto: << []>> 
1281-Useless: [6]
1281-Constancy: []
1281-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP

Optimized sequence (basic block per line):
PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP

Optimized code stored in /tmp/0x00/WOK_1281_optimized.txt
Optimality results stored in /tmp/0x00/WOK_1281_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1281;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;1281;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP1 PUSH2 0x1982 JUMP;PUSH2 0x518 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1982 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.027209629013668746;1;0;0;0

Block: 1346
1346Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x057d', 'DUP2', 'PUSH2 0x19cb', 'JUMP']>> 
1346-Stack size: 9 
1346-Equals Mem:<< []>> 
1346-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
1346-Equals Sto:<< [<31,43>]>> 
1346-NonEquals Sto: << []>> 
1346-Useless: []
1346-Constancy: [(4, 0), (2, 0)]
1346-ContextAliasing: [(6, 7)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>], 'storage_deps_eqs': [<30,42>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
Storage order: [(('0', 's(14)', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('s(15)', 's(17)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: [(('s(9)', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2), (('s(13)', 's(2)', 'mstore'), 2), (('0', 's(14)', 'keccak2560'), 2)]
Memory dep: [(2, 3), (1, 3)]
Memory dep simplified: [(2, 3), (1, 3)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x057d DUP2 PUSH2 0x19cb JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x057d DUP2 PUSH2 0x19cb JUMP

Optimized code stored in /tmp/0x00/WOK_1346_optimized.txt
Optimality results stored in /tmp/0x00/WOK_1346_statistics.csv

Estimated initial gas: 5172
Estimated gas optimized: 5172

Estimated initial size in bytes: 59
Estimated size optimized in bytes: 59

Initial number of instructions: 49
Final number of instructions: 49

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1346;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;1346;2;True;False;False;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x057d DUP2 PUSH2 0x19cb JUMP;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x057d DUP2 PUSH2 0x19cb JUMP;5172;59;49;5172;59;49;0;0;0;True;True;False;False;2.5963713750243187;3;2;5000;5000

Block: 540
540Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x09', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0183', 'JUMP']>> 
540-Stack size: 2 
540-Equals Mem:<< []>> 
540-NonEquals Mem: << [<6,3>]>> 
540-Equals Sto:<< []>> 
540-NonEquals Sto: << []>> 
540-Useless: []
540-Constancy: []
540-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '9', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_540 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3270
3270Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3270-Stack size: 9 
3270-Equals Mem:<< []>> 
3270-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3270-Equals Sto:<< []>> 
3270-NonEquals Sto: << []>> 
3270-Useless: []
3270-Constancy: [(4, 0)]
3270-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('216', '431415980915', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '37', 'mstore'), 2), (('s(10)', '31354931781638678607228669297131712859107492772550336241160036866987736981860', 'mstore'), 2), (('s(12)', '45433405612597180762055095701412804886438245671210399661410036396145969725440', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized code stored in /tmp/0x00/WOK_3270_optimized.txt
Optimality results stored in /tmp/0x00/WOK_3270_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 85
Estimated size optimized in bytes: 85

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3270;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;3270;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;104;85;33;104;85;33;0;0;0;True;False;False;False;2.1226653910125606;2;4;0;0

Block: 3370
3370Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3370-Stack size: 9 
3370-Equals Mem:<< []>> 
3370-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3370-Equals Sto:<< []>> 
3370-NonEquals Sto: << []>> 
3370-Useless: []
3370-Constancy: [(4, 0)]
3370-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('232', '6648691', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '35', 'mstore'), 2), (('s(10)', '31354931781638678607228669297131712859126084785867252355217498662940140921970', 'mstore'), 2), (('s(12)', '45887578820189300338443374388718498632482616163288499555830078344056365121536', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized code stored in /tmp/0x00/WOK_3370_optimized.txt
Optimality results stored in /tmp/0x00/WOK_3370_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3370;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;3370;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.123357940989081;2;4;0;0

Block: 3461
3461Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3461-Stack size: 9 
3461-Equals Mem:<< []>> 
3461-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3461-Equals Sto:<< []>> 
3461-NonEquals Sto: << []>> 
3461-Useless: []
3461-Constancy: [(4, 0)]
3461-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('184', '2147343726488764904047', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '41', 'mstore'), 2), (('s(10)', '38196372293521921433411288587964294122161893341433871906636551770442498929184', 'mstore'), 2), (('s(12)', '52652714968805969334285930938125631089128480032472023743979857642711366500352', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized code stored in /tmp/0x00/WOK_3461_optimized.txt
Optimality results stored in /tmp/0x00/WOK_3461_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 89
Estimated size optimized in bytes: 89

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3461;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;3461;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;104;89;33;104;89;33;0;0;0;True;False;False;False;2.1220176210044883;2;4;0;0

Block: 3599
3599Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e4e', 'JUMPI']>> 
3599-Stack size: 10 
3599-Equals Mem:<< []>> 
3599-NonEquals Mem: << [<10,13>]>> 
3599-Equals Sto:<< []>> 
3599-NonEquals Sto: << []>> 
3599-Useless: []
3599-Constancy: [(5, 0), (0, 0)]
3599-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(8)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(16)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('255', 's(9)', 'and'), 2), (('s(7)', 'iszero'), 1), (('s(10)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(8)', 'sload0'), 1), 1)}
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('255', 's(9)', 'and'), 2), (('s(7)', 'iszero'), 1), (('s(10)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3599 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3633
3633Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3633-Stack size: 11 
3633-Equals Mem:<< []>> 
3633-NonEquals Mem: << [<11,14>]>> 
3633-Equals Sto:<< []>> 
3633-NonEquals Sto: << []>> 
3633-Useless: []
3633-Constancy: [(1, 0), (6, 0)]
3633-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3633 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5426
5426Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1626', 'JUMP']>> 
5426-Stack size: 13 
5426-Equals Mem:<< [<11,6>]>> 
5426-NonEquals Mem: << [<11,15>, <15,20>, <15,6>, <20,6>, <11,20>]>> 
5426-Equals Sto:<< []>> 
5426-NonEquals Sto: << []>> 
5426-Useless: []
5426-Constancy: [(8, 0)]
5426-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2), (('s(8)', '26', 'mstore'), 2), (('s(12)', '37714057306925736537727338326753656978887423192446994710127794316522513498112', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x152b DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x1626 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x152b DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x1626 JUMP

Optimized code stored in /tmp/0x00/WOK_5426_optimized.txt
Optimality results stored in /tmp/0x00/WOK_5426_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 65
Estimated size optimized in bytes: 65

Initial number of instructions: 24
Final number of instructions: 24

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5426;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;5426;2;True;True;False;JUMPDEST PUSH0 PUSH2 0x152b DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x1626 JUMP;JUMPDEST PUSH0 PUSH2 0x152b DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x1626 JUMP;73;65;24;73;65;24;0;0;0;True;False;False;False;2.1302788340253755;0;1;0;0

Block: 3778
3778Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f56', 'JUMPI']>> 
3778-Stack size: 10 
3778-Equals Mem:<< []>> 
3778-NonEquals Mem: << [<4,7>]>> 
3778-Equals Sto:<< []>> 
3778-NonEquals Sto: << []>> 
3778-Useless: []
3778-Constancy: [(5, 0)]
3778-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(4)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(6)', 'mstore'), 2), (('32', '5', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(4)', 'sload0'), 1)
sload0
[(('number', 'number'), 0), (('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1), (('s(3)', 's(5)', 'gt'), 2), (('origin', 'origin'), 0)]
{11: ((('s(4)', 'sload0'), 1), 1)}
(('s(4)', 'sload0'), 1)
sload0
[(('number', 'number'), 0), (('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1), (('s(3)', 's(5)', 'gt'), 2), (('origin', 'origin'), 0)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3778 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3799
3799Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3799-Stack size: 10 
3799-Equals Mem:<< []>> 
3799-NonEquals Mem: << [<33,1>, <6,1>, <11,1>, <16,1>, <21,1>, <26,1>]>> 
3799-Equals Sto:<< []>> 
3799-NonEquals Sto: << []>> 
3799-Useless: []
3799-Constancy: [(5, 0)]
3799-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,33>, <1,6>, <1,11>, <1,16>, <1,21>, <1,26>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,33>, <1,6>, <1,11>, <1,16>, <1,21>, <1,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('185', '298657957751934857751', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '73', 'mstore'), 2), (('s(10)', '43175464300754785199614199185070010317087193698741912792988322009422349034092', 'mstore'), 2), (('s(12)', '45860600759840658865901563111326240759021334497413467019838167414095995691883', 'mstore'), 2), (('s(14)', '14646143631966502206444807779315018622133502848875313473344638166890690117632', 'mstore'), 2)]
Memory dep: [(5, 6), (4, 6), (3, 6), (2, 6), (1, 6), (4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(5, 6), (4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('164', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2), (('s(3)', '132', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('164', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2), (('s(3)', '132', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x0518 JUMP

Optimized code stored in /tmp/0x00/WOK_3799_optimized.txt
Optimality results stored in /tmp/0x00/WOK_3799_statistics.csv

Estimated initial gas: 119
Estimated gas optimized: 119

Estimated initial size in bytes: 127
Estimated size optimized in bytes: 127

Initial number of instructions: 38
Final number of instructions: 38

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3799;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;3799;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x0518 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x0518 JUMP;119;127;38;119;127;38;0;0;0;True;False;False;False;2.1835574680007994;2;5;0;0

Block: 3926
3926Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3926-Stack size: 10 
3926-Equals Mem:<< []>> 
3926-NonEquals Mem: << [<5,8>]>> 
3926-Equals Sto:<< []>> 
3926-NonEquals Sto: << []>> 
3926-Useless: []
3926-Constancy: [(5, 0)]
3926-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{13: ((('s(1)', 's(2)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(1)', 's(2)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(0)', 'mstore'), 2), (('32', '5', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
{13: ((('s(1)', 's(2)', 'sstore'), 2), 1)}
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3926 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3994
3994Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3994-Stack size: 11 
3994-Equals Mem:<< []>> 
3994-NonEquals Mem: << [<11,14>]>> 
3994-Equals Sto:<< []>> 
3994-NonEquals Sto: << []>> 
3994-Useless: []
3994-Constancy: [(6, 0)]
3994-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '3', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3994 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4039
4039Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
4039-Stack size: 10 
4039-Equals Mem:<< []>> 
4039-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
4039-Equals Sto:<< []>> 
4039-NonEquals Sto: << []>> 
4039-Useless: []
4039-Constancy: [(5, 0)]
4039-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '25', 'mstore'), 2), (('s(10)', '31422294206539596639392900159971917510378963875690889976315079369673265905664', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x518 JUMP

Optimized code stored in /tmp/0x00/WOK_4039_optimized.txt
Optimality results stored in /tmp/0x00/WOK_4039_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4039;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;4039;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0518 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x518 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.0956183840171434;1;3;0;0

Block: 4110
4110Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x1030', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4110-Stack size: 10 
4110-Equals Mem:<< []>> 
4110-NonEquals Mem: << [<15,18>]>> 
4110-Equals Sto:<< []>> 
4110-NonEquals Sto: << [<2,22>]>> 
4110-Useless: []
4110-Constancy: [(5, 0)]
4110-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<14,17>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<14,17>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<1,21>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('16', 'sload0'), 1), 0), 21: ((('s(7)', 'sload1'), 1), 2)}
Storage order: [(('16', 'sload0'), 1), (('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('16', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
(('s(7)', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('16', 'sload0'), 1), 0), 21: ((('s(7)', 'sload1'), 1), 2)}
(('16', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
(('s(7)', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4110 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4161
4161Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
4161-Stack size: 10 
4161-Equals Mem:<< []>> 
4161-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
4161-Equals Sto:<< []>> 
4161-NonEquals Sto: << []>> 
4161-Useless: []
4161-Constancy: [(5, 0)]
4161-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '26', 'mstore'), 2), (('s(10)', '31422294206539596639392900160051577764598592111541354583441290478353383424000', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x518 JUMP

Optimized code stored in /tmp/0x00/WOK_4161_optimized.txt
Optimality results stored in /tmp/0x00/WOK_4161_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4161;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;4161;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0518 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x518 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.0950296770315617;1;3;0;0

Block: 5678
5678Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
5678-Stack size: 20 
5678-Equals Mem:<< []>> 
5678-NonEquals Mem: << [<6,1>]>> 
5678-Equals Sto:<< []>> 
5678-NonEquals Sto: << []>> 
5678-Useless: []
5678-Constancy: [(1, 0), (15, 0), (6, 0)]
5678-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP2 SWAP1 PUSH2 0x1652 JUMP

Optimized sequence (basic block per line):
PUSH2 0x518 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x1652 JUMP

Optimized code stored in /tmp/0x00/WOK_5678_optimized.txt
Optimality results stored in /tmp/0x00/WOK_5678_statistics.csv

Estimated initial gas: 47
Estimated gas optimized: 41

Estimated initial size in bytes: 24
Estimated size optimized in bytes: 51

Initial number of instructions: 14
Final number of instructions: 12

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5678;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;5678;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP2 SWAP1 PUSH2 0x1652 JUMP;PUSH2 0x518 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x1652 JUMP;47;24;14;41;51;12;6;-27;2;True;False;False;False;0.0726901960442774;1;0;0;0

Block: 6884
6884Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6884-Stack size: 22 
6884-Equals Mem:<< []>> 
6884-NonEquals Mem: << [<4,7>]>> 
6884-Equals Sto:<< []>> 
6884-NonEquals Sto: << []>> 
6884-Useless: []
6884-Constancy: [(0, 0)]
6884-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '18', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_6884 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5338
5338Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5338-Stack size: 17 
5338-Equals Mem:<< []>> 
5338-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5338-Equals Sto:<< []>> 
5338-NonEquals Sto: << []>> 
5338-Useless: []
5338-Constancy: [(1, 0), (12, 0)]
5338-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('248', '119', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '33', 'mstore'), 2), (('s(10)', '37714057306925736537727341711534603569002632158006504148307520321239491439727', 'mstore'), 2), (('s(12)', '53825228981408700216425575062632269666168469434418855940216611316178368856064', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized code stored in /tmp/0x00/WOK_5338_optimized.txt
Optimality results stored in /tmp/0x00/WOK_5338_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 81
Estimated size optimized in bytes: 81

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5338;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;5338;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;104;81;33;104;81;33;0;0;0;True;False;False;False;2.122032657964155;2;4;0;0

Block: 4336
4336Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x1126', 'JUMPI']>> 
4336-Stack size: 10 
4336-Equals Mem:<< []>> 
4336-NonEquals Mem: << [<5,8>]>> 
4336-Equals Sto:<< []>> 
4336-NonEquals Sto: << [<12,14>]>> 
4336-Useless: []
4336-Constancy: [(5, 0)]
4336-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<11,13>]}
[RULE]: Evaluate expression ('168', '1', 'shl')
{11: ((('s(15)', 'sload0'), 1), 1), 13: ((('20', 'sload1'), 1), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('20', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(17)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
(('20', 'sload1'), 1)
sload1
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
SFS with rule: isolated_block_0_0_input.json
{11: ((('s(15)', 'sload0'), 1), 1), 13: ((('20', 'sload1'), 1), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
(('20', 'sload1'), 1)
sload1
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4336 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5023
5023Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x13c3', 'SWAP2', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
5023-Stack size: 10 
5023-Equals Mem:<< [<18,6>]>> 
5023-NonEquals Mem: << []>> 
5023-Equals Sto:<< []>> 
5023-NonEquals Sto: << []>> 
5023-Useless: []
5023-Constancy: []
5023-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5023 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 6583
6583Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6583-Stack size: 10 
6583-Equals Mem:<< []>> 
6583-NonEquals Mem: << [<5,8>]>> 
6583-Equals Sto:<< []>> 
6583-NonEquals Sto: << []>> 
6583-Useless: []
6583-Constancy: []
6583-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '50', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_6583 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5116
5116Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x1434', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1a6e', 'JUMP']>> 
5116-Stack size: 6 
5116-Equals Mem:<< []>> 
5116-NonEquals Mem: << [<9,4>]>> 
5116-Equals Sto:<< []>> 
5116-NonEquals Sto: << []>> 
5116-Useless: []
5116-Constancy: []
5116-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,8>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,8>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('224', '2031798599', 'shl')
{1: ((('19', 'sload0'), 1), 0)}
Storage order: [(('19', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(13)', '54777181867431389256758088925318348688193376272078599187764269278199109648384', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('19', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('19', 'sload0'), 1), 0)}
(('19', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x1434 SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1a6e JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x1434 SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1a6e JUMP

Optimized code stored in /tmp/0x00/WOK_5116_optimized.txt
Optimality results stored in /tmp/0x00/WOK_5116_statistics.csv

Estimated initial gas: 2208
Estimated gas optimized: 2208

Estimated initial size in bytes: 56
Estimated size optimized in bytes: 56

Initial number of instructions: 37
Final number of instructions: 37

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5116;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;5116;2;True;False;False;JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x1434 SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1a6e JUMP;JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x1434 SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1a6e JUMP;2208;56;37;2208;56;37;0;0;0;True;False;False;False;2.2045125150470994;3;0;2100;2100

Block: 6766
6766Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6766-Stack size: 15 
6766-Equals Mem:<< []>> 
6766-NonEquals Mem: << [<13,21>, <7,21>, <24,21>, <18,21>]>> 
6766-Equals Sto:<< []>> 
6766-NonEquals Sto: << []>> 
6766-Useless: []
6766-Constancy: [(4, 0)]
6766-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,20>, <6,20>, <20,23>, <17,20>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,20>, <6,20>, <20,23>, <17,20>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(5)', 's(0)', 'mstore'), 2), (('s(15)', 's(1)', 'mstore'), 2), (('s(16)', '160', 'mstore'), 2), (('s(2)', 'mload0'), 1), (('s(17)', 's(12)', 'mstore'), 2)]
Memory dep: [(2, 4), (1, 4), (0, 4), (1, 2), (0, 2), (0, 1)]
Memory dep simplified: [(2, 4), (1, 2), (0, 1)]
********************IT*********************
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', 'mload0'), 1), (('s(5)', '192', '+'), 2), (('s(2)', '32', '+'), 2), (('s(5)', '32', '+'), 2), (('s(5)', '64', '+'), 2), (('s(5)', '160', '+'), 2)]
{}
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', 'mload0'), 1), (('s(5)', '192', '+'), 2), (('s(2)', '32', '+'), 2), (('s(5)', '32', '+'), 2), (('s(5)', '64', '+'), 2), (('s(5)', '160', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0

Optimized code stored in /tmp/0x00/WOK_6766_optimized.txt
Optimality results stored in /tmp/0x00/WOK_6766_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 102

Estimated initial size in bytes: 41
Estimated size optimized in bytes: 41

Initial number of instructions: 36
Final number of instructions: 36

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_6766;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;6766;2;True;False;False;JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0;JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0;102;41;36;102;41;36;0;0;0;True;False;False;False;2.277699284022674;0;3;0;0

Block: 6816
6816Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1a97', 'JUMP']>> 
6816-Stack size: 21 
6816-Equals Mem:<< []>> 
6816-NonEquals Mem: << [<9,1>]>> 
6816-Equals Sto:<< []>> 
6816-NonEquals Sto: << []>> 
6816-Useless: []
6816-Constancy: [(5, 0), (10, 0), (3, 32)]
6816-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,9>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,9>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(0)', 'mload0'), 1), (('s(2)', 's(9)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(0)', 'mload0'), 1)
mload0
[(('1', 's(4)', '+'), 2), (('s(1)', 's(2)', '+'), 2), (('s(1)', 's(0)', '+'), 2), (('s(0)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('s(0)', 'mload0'), 1)
mload0
[(('1', 's(4)', '+'), 2), (('s(1)', 's(2)', '+'), 2), (('s(1)', 's(0)', '+'), 2), (('s(0)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP5 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x01 ADD PUSH2 0x1a97 JUMP

Optimized sequence (basic block per line):
PUSH1 0x1 ADD DUP4 DUP6 ADD SWAP5 MLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP4 DUP6 ADD SWAP4 MSTORE PUSH2 0x1a97 JUMP

Optimized code stored in /tmp/0x00/WOK_6816_optimized.txt
Optimality results stored in /tmp/0x00/WOK_6816_statistics.csv

Estimated initial gas: 71
Estimated gas optimized: 53

Estimated initial size in bytes: 28
Estimated size optimized in bytes: 39

Initial number of instructions: 22
Final number of instructions: 16

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_6816;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;6816;2;True;True;False;DUP5 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x01 ADD PUSH2 0x1a97 JUMP;PUSH1 0x1 ADD DUP4 DUP6 ADD SWAP5 MLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP4 DUP6 ADD SWAP4 MSTORE PUSH2 0x1a97 JUMP;71;28;22;53;39;16;18;-11;6;True;False;False;False;2.0951186820166185;2;0;0;0

Block: 4500
4500Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x11ac', 'SWAP1', 'DUP3', 'PUSH2 0x1587', 'JUMP']>> 
4500-Stack size: 10 
4500-Equals Mem:<< []>> 
4500-NonEquals Mem: << [<4,7>]>> 
4500-Equals Sto:<< []>> 
4500-NonEquals Sto: << []>> 
4500-Useless: []
4500-Constancy: [(5, 0)]
4500-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(7)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('address', 'address'), 0)]
{11: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('address', 'address'), 0)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4500 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4524
4524Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x11fc', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4524-Stack size: 11 
4524-Equals Mem:<< []>> 
4524-NonEquals Mem: << [<13,19>, <5,34>, <8,34>, <5,8>, <34,13>, <34,19>, <5,19>, <8,19>]>> 
4524-Equals Sto:<< []>> 
4524-NonEquals Sto: << []>> 
4524-Useless: []
4524-Constancy: [(6, 0)]
4524-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,18>, <4,33>, <7,33>, <4,7>, <12,33>, <18,33>, <4,18>, <7,18>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,18>, <4,33>, <7,33>, <4,7>, <12,33>, <18,33>, <4,18>, <7,18>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(16)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(16)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2), (('64', 'mload0'), 1), (('s(10)', 's(3)', 'mstore'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(10)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('address', 'address'), 0), (('0', '64', 'keccak2560'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(16)', 's(4)', 'sstore'), 2), 1)}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(10)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('address', 'address'), 0), (('0', '64', 'keccak2560'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x11fc SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x11fc SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized code stored in /tmp/0x00/WOK_4524_optimized.txt
Optimality results stored in /tmp/0x00/WOK_4524_statistics.csv

Estimated initial gas: 5142
Estimated gas optimized: 5142

Estimated initial size in bytes: 80
Estimated size optimized in bytes: 80

Initial number of instructions: 39
Final number of instructions: 39

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4524;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;4524;2;True;False;False;JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x11fc SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x11fc SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;5142;80;39;5142;80;39;0;0;0;True;False;False;False;2.228055510960985;2;2;5000;5000

Block: 4613
4613Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x1227', 'SWAP1', 'DUP4', 'PUSH2 0x15e5', 'JUMP']>> 
4613-Stack size: 10 
4613-Equals Mem:<< []>> 
4613-NonEquals Mem: << [<11,14>]>> 
4613-Equals Sto:<< []>> 
4613-NonEquals Sto: << []>> 
4613-Useless: []
4613-Constancy: [(5, 0)]
4613-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(8)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(8)', 'sload0'), 1), 1)}
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4613 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5605
5605Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x152b', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x12ca', 'JUMP']>> 
5605-Stack size: 13 
5605-Equals Mem:<< [<11,6>]>> 
5605-NonEquals Mem: << [<11,15>, <15,20>, <15,6>, <20,6>, <11,20>]>> 
5605-Equals Sto:<< []>> 
5605-NonEquals Sto: << []>> 
5605-Useless: []
5605-Constancy: []
5605-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2), (('s(8)', '30', 'mstore'), 2), (('s(12)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x152b DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x12ca JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x152b DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x12ca JUMP

Optimized code stored in /tmp/0x00/WOK_5605_optimized.txt
Optimality results stored in /tmp/0x00/WOK_5605_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 65
Estimated size optimized in bytes: 65

Initial number of instructions: 24
Final number of instructions: 24

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5605;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;5605;2;True;True;False;JUMPDEST PUSH0 PUSH2 0x152b DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x12ca JUMP;JUMPDEST PUSH0 PUSH2 0x152b DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x12ca JUMP;73;65;24;73;65;24;0;0;0;True;False;False;False;2.1289958200068213;0;1;0;0

Block: 4647
4647Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x126a', 'PUSH2 0x124c', 'DUP4', 'DUP4', 'PUSH2 0x15e5', 'JUMP']>> 
4647-Stack size: 11 
4647-Equals Mem:<< []>> 
4647-NonEquals Mem: << [<11,14>]>> 
4647-Equals Sto:<< []>> 
4647-NonEquals Sto: << []>> 
4647-Useless: []
4647-Constancy: [(6, 0)]
4647-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(12)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(12)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(12)', 's(4)', 'sstore'), 2), 1)}
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4647 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4684
4684Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1587', 'JUMP']>> 
4684-Stack size: 12 
4684-Equals Mem:<< []>> 
4684-NonEquals Mem: << [<11,14>]>> 
4684-Equals Sto:<< []>> 
4684-NonEquals Sto: << []>> 
4684-Useless: []
4684-Constancy: [(7, 0)]
4684-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(7)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(7)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(7)', 'sload0'), 1), 1)}
(('s(7)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4684 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5534
5534Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
5534-Stack size: 15 
5534-Equals Mem:<< []>> 
5534-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
5534-Equals Sto:<< []>> 
5534-NonEquals Sto: << []>> 
5534-Useless: []
5534-Constancy: [(1, 0), (10, 0)]
5534-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '27', 'mstore'), 2), (('s(10)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x518 JUMP

Optimized code stored in /tmp/0x00/WOK_5534_optimized.txt
Optimality results stored in /tmp/0x00/WOK_5534_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5534;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;5534;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x0518 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x518 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.0941140920040198;1;3;0;0

Block: 4714
4714Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x12b3', 'DUP6', 'DUP6', 'PUSH2 0x15e5', 'JUMP']>> 
4714-Stack size: 11 
4714-Equals Mem:<< []>> 
4714-NonEquals Mem: << [<12,15>]>> 
4714-Equals Sto:<< []>> 
4714-NonEquals Sto: << []>> 
4714-Useless: []
4714-Constancy: [(6, 0)]
4714-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{21: ((('s(20)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(20)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{21: ((('s(20)', 's(4)', 'sstore'), 2), 1)}
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4714 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4821
4821Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x0518', 'SWAP2', 'SWAP1', 'PUSH2 0x1652', 'JUMP']>> 
4821-Stack size: 15 
4821-Equals Mem:<< []>> 
4821-NonEquals Mem: << [<6,1>]>> 
4821-Equals Sto:<< []>> 
4821-NonEquals Sto: << []>> 
4821-Useless: []
4821-Constancy: [(1, 0)]
4821-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP2 SWAP1 PUSH2 0x1652 JUMP

Optimized sequence (basic block per line):
PUSH2 0x518 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x1652 JUMP

Optimized code stored in /tmp/0x00/WOK_4821_optimized.txt
Optimality results stored in /tmp/0x00/WOK_4821_statistics.csv

Estimated initial gas: 47
Estimated gas optimized: 41

Estimated initial size in bytes: 24
Estimated size optimized in bytes: 51

Initial number of instructions: 14
Final number of instructions: 12

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4821;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;4821;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x0518 SWAP2 SWAP1 PUSH2 0x1652 JUMP;PUSH2 0x518 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x1652 JUMP;47;24;14;41;51;12;6;-27;2;True;False;False;False;0.07137265900382772;1;0;0;0

Block: 6249
6249Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6249-Stack size: 7 
6249-Equals Mem:<< []>> 
6249-NonEquals Mem: << [<5,8>]>> 
6249-Equals Sto:<< []>> 
6249-NonEquals Sto: << []>> 
6249-Useless: []
6249-Constancy: []
6249-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '17', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_6249 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2979
2979Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
2979-Stack size: 6 
2979-Equals Mem:<< []>> 
2979-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2979-Equals Sto:<< []>> 
2979-NonEquals Sto: << []>> 
2979-Useless: []
2979-Constancy: []
2979-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('224', '1919251315', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '36', 'mstore'), 2), (('s(10)', '31354931781638678487916134672869638484047149969764982831501014746446650500196', 'mstore'), 2), (('s(12)', '51742913093258732729005998692887265601192425265805909375210916622055285719040', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized code stored in /tmp/0x00/WOK_2979_optimized.txt
Optimality results stored in /tmp/0x00/WOK_2979_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2979;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;2979;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.1209428520523943;2;4;0;0

Block: 3077
3077Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x0518', 'JUMP']>> 
3077-Stack size: 6 
3077-Equals Mem:<< []>> 
3077-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3077-Equals Sto:<< []>> 
3077-NonEquals Sto: << []>> 
3077-Useless: []
3077-Constancy: []
3077-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('240', '29555', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '34', 'mstore'), 2), (('s(10)', '31354931781638678487916134672869638488806705378895508030211234510262059168357', 'mstore'), 2), (('s(12)', '52219164999525148860834357634456956735281286572158918307284071279203377479680', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP

Optimized code stored in /tmp/0x00/WOK_3077_optimized.txt
Optimality results stored in /tmp/0x00/WOK_3077_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 82
Estimated size optimized in bytes: 82

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3077;0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol;WOK;3077;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x0518 JUMP;104;82;33;104;82;33;0;0;0;True;False;False;False;2.1229635210474953;2;4;0;0

Block: 341
341Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH8 0x2bb7b59021b7b4b7', 'PUSH1 0xc1', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE']>> 
341-Stack size: 2 
341-Equals Mem:<< [<10,4>]>> 
341-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
341-Equals Sto:<< []>> 
341-NonEquals Sto: << []>> 
341-Useless: []
341-Constancy: []
341-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>]}
{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('193', '3150186095014556855', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(2)', 'mstore'), 2), (('s(1)', '8', 'mstore'), 2), (('s(5)', '39548077207613732100443509970294615743696583705611435806977201768478445404160', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3)]
Memory dep simplified: [(2, 3), (1, 2), (0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(1)', '+'), 2), (('s(1)', '32', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(1)', '+'), 2), (('s(1)', '32', '+'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_341 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 387
387Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
387-Stack size: 2 
387-Equals Mem:<< []>> 
387-NonEquals Mem: << []>> 
387-Equals Sto:<< []>> 
387-NonEquals Sto: << []>> 
387-Useless: []
387-Constancy: []
387-ContextAliasing: []

Block: 6672
6672Instr:<<['JUMPDEST', 'DUP4', 'MLOAD', 'SWAP3', 'POP', 'PUSH1 0x20', 'DUP5', 'ADD', 'MLOAD', 'SWAP2', 'POP', 'PUSH1 0x40', 'DUP5', 'ADD', 'MLOAD', 'SWAP1', 'POP', 'SWAP3', 'POP', 'SWAP3', 'POP', 'SWAP3', 'JUMP']>> 
6672-Stack size: 8 
6672-Equals Mem:<< []>> 
6672-NonEquals Mem: << [<2,8>, <2,14>, <8,14>]>> 
6672-Equals Sto:<< []>> 
6672-NonEquals Sto: << []>> 
6672-Useless: []
6672-Constancy: [(2, 0), (1, 0), (0, 0)]
6672-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,7>, <1,13>, <7,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,7>, <1,13>, <7,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(2)', 'mload0'), 1), (('s(8)', 'mload1'), 1), (('s(6)', 'mload2'), 1)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(8)', 'mload1'), 1)
mload1
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(6)', 'mload2'), 1)
mload2
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
{}
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(8)', 'mload1'), 1)
mload1
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(6)', 'mload2'), 1)
mload2
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_6672 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1304
1304Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1304-Stack size: 3 
1304-Equals Mem:<< []>> 
1304-NonEquals Mem: << []>> 
1304-Equals Sto:<< []>> 
1304-NonEquals Sto: << []>> 
1304-Useless: []
1304-Constancy: []
1304-ContextAliasing: []

Block: 1708
1708Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SSTORE', 'PUSH1 0x06', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'PUSH32 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf', 'PUSH2 0x06e6', 'PUSH1 0x09', 'PUSH1 0x0a', 'PUSH2 0x195d', 'JUMP']>> 
1708-Stack size: 3 
1708-Equals Mem:<< []>> 
1708-NonEquals Mem: << []>> 
1708-Equals Sto:<< [<5,10>]>> 
1708-NonEquals Sto: << [<2,5>, <2,10>]>> 
1708-Useless: []
1708-Constancy: []
1708-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<4,9>], 'storage_deps_noneqs': [<1,4>, <1,9>]}
{1: ((('16', 's(0)', 'sstore'), 2), 0), 4: ((('6', 'sload0'), 1), 1), 9: ((('6', 's(5)', 'sstore'), 2), 2)}
Storage order: [(('16', 's(0)', 'sstore'), 2), (('6', 'sload0'), 1), (('6', 's(5)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('6', 'sload0'), 1)
sload0
[(('6', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(6)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('16', 's(0)', 'sstore'), 2), 0), 4: ((('6', 'sload0'), 1), 1), 9: ((('6', 's(5)', 'sstore'), 2), 2)}
(('6', 'sload0'), 1)
sload0
[(('6', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(6)', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1708 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1942
1942Instr:<<['JUMPDEST', 'PUSH1 0x13', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH20 0x7a250d5630b4cf539739df2c5dacb4c659f2488d', 'SWAP1', 'DUP2', 'OR', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH2 0x07df', 'SWAP1', 'ADDRESS', 'SWAP1', 'PUSH2 0x07d1', 'PUSH1 0x09', 'PUSH1 0x0a', 'PUSH2 0x195d', 'JUMP']>> 
1942-Stack size: 2 
1942-Equals Mem:<< []>> 
1942-NonEquals Mem: << []>> 
1942-Equals Sto:<< [<3,17>]>> 
1942-NonEquals Sto: << []>> 
1942-Useless: []
1942-Constancy: []
1942-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<2,16>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('19', 'sload0'), 1), 0), 16: ((('19', 's(8)', 'sstore'), 2), 1)}
Storage order: [(('19', 'sload0'), 1), (('19', 's(8)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('19', 'sload0'), 1)
sload0
[(('address', 'address'), 0), (('19', 'sload0'), 1), ((115792089237316195423570985007226406215939081747436879206741300988257197096960, 's(12)', 'and'), 2), (('697323163401596485410334513241460920685086001293', 's(9)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('19', 'sload0'), 1), 0), 16: ((('19', 's(8)', 'sstore'), 2), 1)}
(('19', 'sload0'), 1)
sload0
[(('address', 'address'), 0), (('19', 'sload0'), 1), ((115792089237316195423570985007226406215939081747436879206741300988257197096960, 's(12)', 'and'), 2), (('697323163401596485410334513241460920685086001293', 's(9)', 'or'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_1942 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2722
2722Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH3 0xff00ff', 'PUSH1 0xa0', 'SHL', 'NOT', 'AND', 'PUSH3 0x010001', 'PUSH1 0xa0', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'JUMP']>> 
2722-Stack size: 3 
2722-Equals Mem:<< []>> 
2722-NonEquals Mem: << []>> 
2722-Equals Sto:<< [<4,15>]>> 
2722-NonEquals Sto: << []>> 
2722-Useless: []
2722-Constancy: []
2722-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<3,14>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '65537', 'shl')
[RULE]: Evaluate expression ('160', '16711935', 'shl')
{2: ((('20', 'sload0'), 1), 0), 14: ((('20', 's(1)', 'sstore'), 2), 1)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(1)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423546560488322440230209654367955723644191490340890530021375, 's(5)', 'and'), 2), (('95782432805755384550314892881727040259190851069018112', 's(3)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 14: ((('20', 's(1)', 'sstore'), 2), 1)}
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423546560488322440230209654367955723644191490340890530021375, 's(5)', 'and'), 2), (('95782432805755384550314892881727040259190851069018112', 's(3)', 'or'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2722 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2954
2954Instr:<<['JUMPDEST', 'PUSH1 0x09', 'DUP2', 'SWAP1', 'SSTORE', 'PUSH1 0x0a', 'SSTORE', 'JUMP']>> 
2954-Stack size: 3 
2954-Equals Mem:<< []>> 
2954-NonEquals Mem: << []>> 
2954-Equals Sto:<< []>> 
2954-NonEquals Sto: << [<4,6>]>> 
2954-Useless: []
2954-Constancy: []
2954-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<3,5>]}
{3: ((('9', 's(0)', 'sstore'), 2), 0), 5: ((('10', 's(0)', 'sstore'), 2), 1)}
Storage order: [(('9', 's(0)', 'sstore'), 2), (('10', 's(0)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
{3: ((('9', 's(0)', 'sstore'), 2), 0), 5: ((('10', 's(0)', 'sstore'), 2), 1)}
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_2954 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3670
3670Instr:<<['JUMPDEST', 'PUSH2 0x0e82', 'PUSH1 0x64', 'PUSH2 0x0e7c', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e71', 'JUMPI']>> 
3670-Stack size: 10 
3670-Equals Mem:<< []>> 
3670-NonEquals Mem: << []>> 
3670-Equals Sto:<< []>> 
3670-NonEquals Sto: << [<5,7>]>> 
3670-Useless: []
3670-Constancy: [(5, 0), (0, 0)]
3670-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<4,6>]}
{4: ((('11', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
Storage order: [(('11', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('11', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
{4: ((('11', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
(('11', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_3670 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4297
4297Instr:<<['PUSH2 0x10ed', 'PUSH1 0x64', 'PUSH2 0x0e7c', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x10e3', 'JUMPI']>> 
4297-Stack size: 10 
4297-Equals Mem:<< []>> 
4297-NonEquals Mem: << []>> 
4297-Equals Sto:<< []>> 
4297-NonEquals Sto: << [<4,6>]>> 
4297-Useless: []
4297-Constancy: [(5, 0)]
4297-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<4,6>]}
{4: ((('12', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
Storage order: [(('12', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('12', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
{4: ((('12', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
(('12', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4297 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4431
4431Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4431-Stack size: 12 
4431-Equals Mem:<< []>> 
4431-NonEquals Mem: << []>> 
4431-Equals Sto:<< []>> 
4431-NonEquals Sto: << [<2,4>]>> 
4431-Useless: []
4431-Constancy: [(7, 0)]
4431-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<2,4>]}
{1: ((('13', 'sload0'), 1), 0), 3: ((('14', 'sload1'), 1), 1)}
Storage order: [(('13', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('13', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
{1: ((('13', 'sload0'), 1), 0), 3: ((('14', 'sload1'), 1), 1)}
(('13', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_4431 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5213
5213Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5213-Stack size: 10 
5213-Equals Mem:<< []>> 
5213-NonEquals Mem: << []>> 
5213-Equals Sto:<< [<5,12>]>> 
5213-NonEquals Sto: << []>> 
5213-Useless: []
5213-Constancy: []
5213-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<4,11>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('168', '255', 'shl')
{3: ((('20', 'sload0'), 1), 0), 11: ((('20', 's(6)', 'sstore'), 2), 1)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(6)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(8)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{3: ((('20', 'sload0'), 1), 0), 11: ((('20', 's(6)', 'sstore'), 2), 1)}
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(8)', 'and'), 2)]
BLOCK 0x003f3ab9aaa64d04979c01b753be169b09b522ca.sol_WOK_5213 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
