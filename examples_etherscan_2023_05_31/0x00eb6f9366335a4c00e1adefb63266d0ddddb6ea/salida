Green Main
*************************************************************
Compilation time: 0.3090737310121767s
*************************************************************
File: Ownable
Build CFG: 0.004922293999698013s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis Ownable
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract Ownable: 3
Memory read accesses ContractOwnable: 8
Memory write accesses ContractOwnable: 6
********************************** INIT
COMPACT CLONES: True
CONTRACT: Ownable
-----
Block: 66
66Instr:<<['JUMPDEST', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
66-Stack size: 1 
66-Equals Mem:<< [<5,16>]>> 
66-NonEquals Mem: << [<15,5>, <15,16>]>> 
66-Equals Sto:<< []>> 
66-NonEquals Sto: << []>> 
66-Useless: []
66-Constancy: []
66-ContextAliasing: []

.....
-----
Block: 114
114Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'DUP2', 'SWAP1', 'MSTORE', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
114-Stack size: 2 
114-Equals Mem:<< [<1,26>]>> 
114-NonEquals Mem: << [<6,1>, <6,26>, <13,1>, <13,26>, <17,1>, <17,26>, <22,1>, <22,26>]>> 
114-Equals Sto:<< []>> 
114-NonEquals Sto: << []>> 
114-Useless: []
114-Constancy: [(0, 64)]
114-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.0016264289733953774s

*************************************************************
File: SafeMath
Build CFG: 0.0004985730047337711s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis SafeMath
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract SafeMath: 0
Memory read accesses ContractSafeMath: 0
Memory write accesses ContractSafeMath: 1
********************************** INIT
COMPACT CLONES: True
CONTRACT: SafeMath
********************************** END
Memory Analysis: 0.00012084597256034613s

*************************************************************
File: Slowpoke
Build CFG: 0.40047273196978495s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis Slowpoke
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract Slowpoke: 90
Memory read accesses ContractSlowpoke: 308
Memory write accesses ContractSlowpoke: 555
********************************** INIT
CONTEXT: Detected context equality 17 <slot22,0> 19 <slot22,0>
CONTEXT: Detected context equality 17 <slot22,0> 20 <slot22,0>
CONTEXT: Detected context equality 17 <slot22,0> 20 <slot22,0>
CONTEXT: Detected context equality 17 <slot24,0> 19 <slot24,0>
CONTEXT: Detected context equality 17 <slot24,0> 20 <slot24,0>
CONTEXT: Detected context equality 17 <slot24,0> 20 <slot24,0>
CONTEXT: Detected context equality 13 <slot27,0> 15 <slot27,0>
CONTEXT: Detected context equality 13 <slot27,0> 15 <slot27,0>
CONTEXT: Detected context equality 13 <slot27,0> 19 <slot27,0>
CONTEXT: Detected context equality 13 <slot27,0> 19 <slot27,0>
CONTEXT: Detected context equality 17 <slot36,0> 19 <slot36,0>
CONTEXT: Detected context equality 17 <slot36,0> 20 <slot36,0>
CONTEXT: Detected context equality 17 <slot36,0> 20 <slot36,0>
CONTEXT: Detected context equality 18 <slot38,0> 20 <slot38,0>
CONTEXT: Detected context equality 18 <slot38,0> 21 <slot38,0>
CONTEXT: Detected context equality 18 <slot38,0> 21 <slot38,0>
CONTEXT: Detected context equality 20 <slot41,0> 22 <slot41,0>
CONTEXT: Detected context equality 20 <slot41,0> 23 <slot41,0>
CONTEXT: Detected context equality 20 <slot41,0> 23 <slot41,0>
CONTEXT: Detected context equality 5 <slot51,0> 7 <slot51,0>
CONTEXT: Detected context equality 5 <slot51,0> 7 <slot51,0>
CONTEXT: Detected context equality 5 <slot51,0> 11 <slot51,0>
CONTEXT: Detected context equality 5 <slot51,0> 11 <slot51,0>
CONTEXT: Detected context equality 18 <slot64,0> 20 <slot64,0>
CONTEXT: Detected context equality 18 <slot64,0> 21 <slot64,0>
CONTEXT: Detected context equality 18 <slot64,0> 21 <slot64,0>
CONTEXT: Detected context equality 18 <slot66,0> 20 <slot66,0>
CONTEXT: Detected context equality 18 <slot66,0> 21 <slot66,0>
CONTEXT: Detected context equality 18 <slot66,0> 21 <slot66,0>
CONTEXT: Detected context equality 14 <slot69,0> 16 <slot69,0>
CONTEXT: Detected context equality 14 <slot69,0> 16 <slot69,0>
CONTEXT: Detected context equality 14 <slot69,0> 20 <slot69,0>
CONTEXT: Detected context equality 14 <slot69,0> 20 <slot69,0>
CONTEXT: Detected context equality 18 <slot78,0> 20 <slot78,0>
CONTEXT: Detected context equality 18 <slot78,0> 21 <slot78,0>
CONTEXT: Detected context equality 18 <slot78,0> 21 <slot78,0>
CONTEXT: Detected context equality 19 <slot80,0> 21 <slot80,0>
CONTEXT: Detected context equality 19 <slot80,0> 22 <slot80,0>
CONTEXT: Detected context equality 19 <slot80,0> 22 <slot80,0>
CONTEXT: Detected context equality 21 <slot83,0> 23 <slot83,0>
CONTEXT: Detected context equality 21 <slot83,0> 24 <slot83,0>
CONTEXT: Detected context equality 21 <slot83,0> 24 <slot83,0>
CONTEXT: Detected context equality 12 <slot85,0> 14 <slot85,0>
CONTEXT: Detected context equality 12 <slot85,0> 15 <slot85,0>
CONTEXT: Detected context equality 12 <slot85,0> 15 <slot85,0>
COMPACT CLONES: True
CONTRACT: Slowpoke
-----
Block: 941
941Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x02', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
941-Stack size: 4 
941-Equals Mem:<< [<12,27>, <17,31>]>> 
941-NonEquals Mem: << [<12,17>, <12,31>, <17,27>, <27,31>]>> 
941-Equals Sto:<< []>> 
941-NonEquals Sto: << []>> 
941-Useless: []
941-Constancy: []
941-ContextAliasing: []

.....
-----
Block: 431_0
431_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
431_0-Stack size: 2 
431_0-Equals Mem:<< []>> 
431_0-NonEquals Mem: << [<5,2>]>> 
431_0-Equals Sto:<< []>> 
431_0-NonEquals Sto: << []>> 
431_0-Useless: []
431_0-Constancy: []
431_0-ContextAliasing: []

.....
-----
Block: 1565
1565Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP1', 'PUSH2 0x1694', 'JUMP']>> 
1565-Stack size: 2 
1565-Equals Mem:<< []>> 
1565-NonEquals Mem: << [<6,1>]>> 
1565-Equals Sto:<< []>> 
1565-NonEquals Sto: << []>> 
1565-Useless: []
1565-Constancy: []
1565-ContextAliasing: []

.....
-----
Block: 1607
1607Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
1607-Stack size: 2 
1607-Equals Mem:<< []>> 
1607-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
1607-Equals Sto:<< []>> 
1607-NonEquals Sto: << []>> 
1607-Useless: []
1607-Constancy: []
1607-ContextAliasing: []

.....
-----
Block: 5499_34
5499_34Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_34-Stack size: 10 
5499_34-Equals Mem:<< []>> 
5499_34-NonEquals Mem: << [<5,8>]>> 
5499_34-Equals Sto:<< []>> 
5499_34-NonEquals Sto: << []>> 
5499_34-Useless: []
5499_34-Constancy: []
5499_34-ContextAliasing: []

.....
-----
Block: 2499_4
2499_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2499_4-Stack size: 6 
2499_4-Equals Mem:<< []>> 
2499_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2499_4-Equals Sto:<< []>> 
2499_4-NonEquals Sto: << []>> 
2499_4-Useless: []
2499_4-Constancy: []
2499_4-ContextAliasing: []

.....
-----
Block: 2597_4
2597_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2597_4-Stack size: 6 
2597_4-Equals Mem:<< []>> 
2597_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2597_4-Equals Sto:<< []>> 
2597_4-NonEquals Sto: << []>> 
2597_4-Useless: []
2597_4-Constancy: []
2597_4-ContextAliasing: []

.....
-----
Block: 1831
1831Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x074b', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
1831-Stack size: 6 
1831-Equals Mem:<< [<18,6>]>> 
1831-NonEquals Mem: << []>> 
1831-Equals Sto:<< []>> 
1831-NonEquals Sto: << []>> 
1831-Useless: []
1831-Constancy: []
1831-ContextAliasing: []

.....
-----
Block: 1962
1962Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x07ce', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
1962-Stack size: 9 
1962-Equals Mem:<< [<18,6>]>> 
1962-NonEquals Mem: << []>> 
1962-Equals Sto:<< []>> 
1962-NonEquals Sto: << []>> 
1962-Useless: []
1962-Constancy: []
1962-ContextAliasing: []

.....
-----
Block: 2072
2072Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x083c', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
2072-Stack size: 6 
2072-Equals Mem:<< [<18,6>]>> 
2072-NonEquals Mem: << []>> 
2072-Equals Sto:<< []>> 
2072-NonEquals Sto: << []>> 
2072-Useless: []
2072-Constancy: []
2072-ContextAliasing: []

.....
-----
Block: 2108
2108Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'SWAP1', 'SWAP2', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH1 0x13', 'SLOAD', 'AND', 'PUSH4 0xf305d719', 'SELFBALANCE', 'ADDRESS', 'PUSH2 0x0883', 'DUP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2108-Stack size: 3 
2108-Equals Mem:<< []>> 
2108-NonEquals Mem: << [<41,44>]>> 
2108-Equals Sto:<< [<3,23>]>> 
2108-NonEquals Sto: << [<3,25>, <3,48>, <23,25>, <23,48>, <25,48>]>> 
2108-Useless: []
2108-Constancy: []
2108-ContextAliasing: []

.....
-----
Block: 2300
2300Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0921', 'SWAP2', 'SWAP1', 'PUSH2 0x16e4', 'JUMP']>> 
2300-Stack size: 7 
2300-Equals Mem:<< [<19,7>]>> 
2300-NonEquals Mem: << []>> 
2300-Equals Sto:<< []>> 
2300-NonEquals Sto: << []>> 
2300-Useless: []
2300-Constancy: []
2300-ContextAliasing: []

.....
-----
Block: 2422
2422Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x099a', 'SWAP2', 'SWAP1', 'PUSH2 0x170f', 'JUMP']>> 
2422-Stack size: 6 
2422-Equals Mem:<< [<18,6>]>> 
2422-NonEquals Mem: << []>> 
2422-Equals Sto:<< []>> 
2422-NonEquals Sto: << []>> 
2422-Useless: []
2422-Constancy: []
2422-ContextAliasing: []

.....
-----
Block: 5499_37
5499_37Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_37-Stack size: 20 
5499_37-Equals Mem:<< []>> 
5499_37-NonEquals Mem: << [<5,8>]>> 
5499_37-Equals Sto:<< []>> 
5499_37-NonEquals Sto: << []>> 
5499_37-Useless: []
5499_37-Constancy: [(11, 0), (7, 0)]
5499_37-ContextAliasing: []

.....
-----
Block: 5499_36
5499_36Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_36-Stack size: 16 
5499_36-Equals Mem:<< []>> 
5499_36-NonEquals Mem: << [<5,8>]>> 
5499_36-Equals Sto:<< []>> 
5499_36-NonEquals Sto: << []>> 
5499_36-Useless: []
5499_36-Constancy: [(7, 0), (3, 0)]
5499_36-ContextAliasing: []

.....
-----
Block: 5499_35
5499_35Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_35-Stack size: 15 
5499_35-Equals Mem:<< []>> 
5499_35-NonEquals Mem: << [<5,8>]>> 
5499_35-Equals Sto:<< []>> 
5499_35-NonEquals Sto: << []>> 
5499_35-Useless: []
5499_35-Constancy: [(6, 0), (2, 0)]
5499_35-ContextAliasing: []

.....
-----
Block: 394_0
394_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
394_0-Stack size: 3 
394_0-Equals Mem:<< []>> 
394_0-NonEquals Mem: << [<7,2>]>> 
394_0-Equals Sto:<< []>> 
394_0-NonEquals Sto: << []>> 
394_0-Useless: []
394_0-Constancy: []
394_0-ContextAliasing: []

.....
-----
Block: 431
431Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
431-Stack size: 3 
431-Equals Mem:<< []>> 
431-NonEquals Mem: << [<5,2>]>> 
431-Equals Sto:<< []>> 
431-NonEquals Sto: << []>> 
431-Useless: []
431-Constancy: []
431-ContextAliasing: []

.....
-----
Block: 2790_0
2790_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2790_0-Stack size: 9 
2790_0-Equals Mem:<< []>> 
2790_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2790_0-Equals Sto:<< []>> 
2790_0-NonEquals Sto: << []>> 
2790_0-Useless: []
2790_0-Constancy: [(4, 0)]
2790_0-ContextAliasing: []

.....
-----
Block: 2890_0
2890_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2890_0-Stack size: 9 
2890_0-Equals Mem:<< []>> 
2890_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2890_0-Equals Sto:<< []>> 
2890_0-NonEquals Sto: << []>> 
2890_0-Useless: []
2890_0-Constancy: [(4, 0)]
2890_0-ContextAliasing: []

.....
-----
Block: 2981_0
2981_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2981_0-Stack size: 9 
2981_0-Equals Mem:<< []>> 
2981_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2981_0-Equals Sto:<< []>> 
2981_0-NonEquals Sto: << []>> 
2981_0-Useless: []
2981_0-Constancy: [(4, 0)]
2981_0-ContextAliasing: []

.....
-----
Block: 3119_0
3119_0Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0c6e', 'JUMPI']>> 
3119_0-Stack size: 10 
3119_0-Equals Mem:<< []>> 
3119_0-NonEquals Mem: << [<10,13>]>> 
3119_0-Equals Sto:<< []>> 
3119_0-NonEquals Sto: << []>> 
3119_0-Useless: []
3119_0-Constancy: [(5, 0), (0, 0)]
3119_0-ContextAliasing: []

.....
-----
Block: 3153_0
3153_0Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3153_0-Stack size: 11 
3153_0-Equals Mem:<< []>> 
3153_0-NonEquals Mem: << [<11,14>]>> 
3153_0-Equals Sto:<< []>> 
3153_0-NonEquals Sto: << []>> 
3153_0-Useless: []
3153_0-Constancy: [(6, 0), (1, 0)]
3153_0-ContextAliasing: []

.....
-----
Block: 3251_0
3251_0Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0d1b', 'JUMPI']>> 
3251_0-Stack size: 10 
3251_0-Equals Mem:<< []>> 
3251_0-NonEquals Mem: << [<4,7>]>> 
3251_0-Equals Sto:<< []>> 
3251_0-NonEquals Sto: << []>> 
3251_0-Useless: []
3251_0-Constancy: [(5, 0), (0, 0)]
3251_0-ContextAliasing: []

.....
-----
Block: 3272_0
3272_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x3bb2b217', 'PUSH1 0xe1', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3272_0-Stack size: 10 
3272_0-Equals Mem:<< []>> 
3272_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3272_0-Equals Sto:<< []>> 
3272_0-NonEquals Sto: << []>> 
3272_0-Useless: []
3272_0-Constancy: [(5, 0), (0, 0)]
3272_0-ContextAliasing: []

.....
-----
Block: 3355_0
3355_0Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3355_0-Stack size: 10 
3355_0-Equals Mem:<< []>> 
3355_0-NonEquals Mem: << [<5,8>]>> 
3355_0-Equals Sto:<< []>> 
3355_0-NonEquals Sto: << []>> 
3355_0-Useless: []
3355_0-Constancy: [(5, 0), (0, 0)]
3355_0-ContextAliasing: []

.....
-----
Block: 3423_0
3423_0Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3423_0-Stack size: 11 
3423_0-Equals Mem:<< []>> 
3423_0-NonEquals Mem: << [<11,14>]>> 
3423_0-Equals Sto:<< []>> 
3423_0-NonEquals Sto: << []>> 
3423_0-Useless: []
3423_0-Constancy: [(6, 0), (1, 0)]
3423_0-ContextAliasing: []

.....
-----
Block: 3468_0
3468_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3468_0-Stack size: 10 
3468_0-Equals Mem:<< []>> 
3468_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
3468_0-Equals Sto:<< []>> 
3468_0-NonEquals Sto: << []>> 
3468_0-Useless: []
3468_0-Constancy: [(5, 0), (0, 0)]
3468_0-ContextAliasing: []

.....
-----
Block: 3539_0
3539_0Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x0df5', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
3539_0-Stack size: 10 
3539_0-Equals Mem:<< []>> 
3539_0-NonEquals Mem: << [<15,18>]>> 
3539_0-Equals Sto:<< []>> 
3539_0-NonEquals Sto: << [<2,22>]>> 
3539_0-Useless: []
3539_0-Constancy: [(5, 0), (0, 0)]
3539_0-ContextAliasing: []

.....
-----
Block: 5499_33
5499_33Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_33-Stack size: 16 
5499_33-Equals Mem:<< []>> 
5499_33-NonEquals Mem: << [<5,8>]>> 
5499_33-Equals Sto:<< []>> 
5499_33-NonEquals Sto: << []>> 
5499_33-Useless: []
5499_33-Constancy: [(11, 0), (6, 0)]
5499_33-ContextAliasing: []

.....
-----
Block: 3590_0
3590_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3590_0-Stack size: 10 
3590_0-Equals Mem:<< []>> 
3590_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
3590_0-Equals Sto:<< []>> 
3590_0-NonEquals Sto: << []>> 
3590_0-Useless: []
3590_0-Constancy: [(5, 0), (0, 0)]
3590_0-ContextAliasing: []

.....
-----
Block: 5499_32
5499_32Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_32-Stack size: 17 
5499_32-Equals Mem:<< []>> 
5499_32-NonEquals Mem: << [<5,8>]>> 
5499_32-Equals Sto:<< []>> 
5499_32-NonEquals Sto: << []>> 
5499_32-Useless: []
5499_32-Constancy: [(12, 0), (7, 0), (4, 0), (1, 0)]
5499_32-ContextAliasing: []

.....
-----
Block: 4927_1
4927_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1433', 'JUMP']>> 
4927_1-Stack size: 13 
4927_1-Equals Mem:<< [<11,6>]>> 
4927_1-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
4927_1-Equals Sto:<< []>> 
4927_1-NonEquals Sto: << []>> 
4927_1-Useless: []
4927_1-Constancy: [(8, 0), (3, 0)]
4927_1-ContextAliasing: []

.....
-----
Block: 5179_2
5179_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
5179_2-Stack size: 20 
5179_2-Equals Mem:<< []>> 
5179_2-NonEquals Mem: << [<6,1>]>> 
5179_2-Equals Sto:<< []>> 
5179_2-NonEquals Sto: << []>> 
5179_2-Useless: []
5179_2-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
5179_2-ContextAliasing: [(2, 19)]

.....
-----
Block: 5215_10
5215_10Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_10-Stack size: 22 
5215_10-Equals Mem:<< []>> 
5215_10-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_10-Equals Sto:<< []>> 
5215_10-NonEquals Sto: << []>> 
5215_10-Useless: []
5215_10-Constancy: [(17, 0), (12, 0), (8, 0), (3, 0)]
5215_10-ContextAliasing: [(4, 20)]

.....
-----
Block: 5239_10
5239_10Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_10-Stack size: 26 
5239_10-Equals Mem:<< []>> 
5239_10-NonEquals Mem: << [<11,5>]>> 
5239_10-Equals Sto:<< []>> 
5239_10-NonEquals Sto: << []>> 
5239_10-Useless: []
5239_10-Constancy: [(21, 0), (16, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_10-ContextAliasing: [(8, 20)]

.....
-----
Block: 6134_5
6134_5Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134_5-Stack size: 24 
6134_5-Equals Mem:<< []>> 
6134_5-NonEquals Mem: << [<4,7>]>> 
6134_5-Equals Sto:<< []>> 
6134_5-NonEquals Sto: << []>> 
6134_5-Useless: []
6134_5-Constancy: [(19, 0), (14, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6134_5-ContextAliasing: []

.....
-----
Block: 4927_2
4927_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1433', 'JUMP']>> 
4927_2-Stack size: 13 
4927_2-Equals Mem:<< [<11,6>]>> 
4927_2-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
4927_2-Equals Sto:<< []>> 
4927_2-NonEquals Sto: << []>> 
4927_2-Useless: []
4927_2-Constancy: [(8, 0)]
4927_2-ContextAliasing: []

.....
-----
Block: 5179_1
5179_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
5179_1-Stack size: 20 
5179_1-Equals Mem:<< []>> 
5179_1-NonEquals Mem: << [<6,1>]>> 
5179_1-Equals Sto:<< []>> 
5179_1-NonEquals Sto: << []>> 
5179_1-Useless: []
5179_1-Constancy: [(15, 0), (6, 0), (1, 0)]
5179_1-ContextAliasing: [(2, 19)]

.....
-----
Block: 5215_9
5215_9Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_9-Stack size: 22 
5215_9-Equals Mem:<< []>> 
5215_9-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_9-Equals Sto:<< []>> 
5215_9-NonEquals Sto: << []>> 
5215_9-Useless: []
5215_9-Constancy: [(17, 0), (8, 0), (3, 0)]
5215_9-ContextAliasing: [(4, 20)]

.....
-----
Block: 5239_9
5239_9Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_9-Stack size: 26 
5239_9-Equals Mem:<< []>> 
5239_9-NonEquals Mem: << [<11,5>]>> 
5239_9-Equals Sto:<< []>> 
5239_9-NonEquals Sto: << []>> 
5239_9-Useless: []
5239_9-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_9-ContextAliasing: [(8, 20)]

.....
-----
Block: 6134_3
6134_3Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134_3-Stack size: 24 
6134_3-Equals Mem:<< []>> 
6134_3-NonEquals Mem: << [<4,7>]>> 
6134_3-Equals Sto:<< []>> 
6134_3-NonEquals Sto: << []>> 
6134_3-Useless: []
6134_3-Constancy: [(19, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6134_3-ContextAliasing: []

.....
-----
Block: 5499_30
5499_30Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_30-Stack size: 22 
5499_30-Equals Mem:<< []>> 
5499_30-NonEquals Mem: << [<5,8>]>> 
5499_30-Equals Sto:<< []>> 
5499_30-NonEquals Sto: << []>> 
5499_30-Useless: []
5499_30-Constancy: [(17, 0), (6, 0), (5, 0)]
5499_30-ContextAliasing: []

.....
-----
Block: 6134_4
6134_4Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134_4-Stack size: 22 
6134_4-Equals Mem:<< []>> 
6134_4-NonEquals Mem: << [<4,7>]>> 
6134_4-Equals Sto:<< []>> 
6134_4-NonEquals Sto: << []>> 
6134_4-Useless: []
6134_4-Constancy: [(17, 0), (6, 0), (0, 0)]
6134_4-ContextAliasing: []

.....
-----
Block: 4839_1
4839_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
4839_1-Stack size: 17 
4839_1-Equals Mem:<< []>> 
4839_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
4839_1-Equals Sto:<< []>> 
4839_1-NonEquals Sto: << []>> 
4839_1-Useless: []
4839_1-Constancy: [(12, 0), (1, 0)]
4839_1-ContextAliasing: []

.....
-----
Block: 3812_0
3812_0Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0f1a', 'JUMPI']>> 
3812_0-Stack size: 10 
3812_0-Equals Mem:<< []>> 
3812_0-NonEquals Mem: << [<5,8>]>> 
3812_0-Equals Sto:<< []>> 
3812_0-NonEquals Sto: << [<12,14>]>> 
3812_0-Useless: []
3812_0-Constancy: [(5, 0)]
3812_0-ContextAliasing: []

.....
-----
Block: 5996_4
5996_4Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5996_4-Stack size: 18 
5996_4-Equals Mem:<< []>> 
5996_4-NonEquals Mem: << [<5,8>]>> 
5996_4-Equals Sto:<< []>> 
5996_4-NonEquals Sto: << []>> 
5996_4-Useless: []
5996_4-Constancy: [(13, 0), (1, 0)]
5996_4-ContextAliasing: [(4, 15)]

.....
-----
Block: 4523_1
4523_1Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x11cf', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
4523_1-Stack size: 18 
4523_1-Equals Mem:<< [<18,6>]>> 
4523_1-NonEquals Mem: << []>> 
4523_1-Equals Sto:<< []>> 
4523_1-NonEquals Sto: << []>> 
4523_1-Useless: []
4523_1-Constancy: [(13, 0)]
4523_1-ContextAliasing: []

.....
-----
Block: 5996_3
5996_3Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5996_3-Stack size: 18 
5996_3-Equals Mem:<< []>> 
5996_3-NonEquals Mem: << [<5,8>]>> 
5996_3-Equals Sto:<< []>> 
5996_3-NonEquals Sto: << []>> 
5996_3-Useless: []
5996_3-Constancy: [(13, 0)]
5996_3-ContextAliasing: [(4, 15)]

.....
-----
Block: 2499_3
2499_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2499_3-Stack size: 18 
2499_3-Equals Mem:<< []>> 
2499_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2499_3-Equals Sto:<< []>> 
2499_3-NonEquals Sto: << []>> 
2499_3-Useless: []
2499_3-Constancy: [(13, 0)]
2499_3-ContextAliasing: []

.....
-----
Block: 2597_3
2597_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2597_3-Stack size: 18 
2597_3-Equals Mem:<< []>> 
2597_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2597_3-Equals Sto:<< []>> 
2597_3-NonEquals Sto: << []>> 
2597_3-Useless: []
2597_3-Constancy: [(13, 0)]
2597_3-ContextAliasing: []

.....
-----
Block: 4616_1
4616_1Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x1240', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1780', 'JUMP']>> 
4616_1-Stack size: 14 
4616_1-Equals Mem:<< []>> 
4616_1-NonEquals Mem: << [<9,4>]>> 
4616_1-Equals Sto:<< []>> 
4616_1-NonEquals Sto: << []>> 
4616_1-Useless: []
4616_1-Constancy: [(9, 0)]
4616_1-ContextAliasing: []

.....
-----
Block: 6016_1
6016_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6016_1-Stack size: 23 
6016_1-Equals Mem:<< []>> 
6016_1-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6016_1-Equals Sto:<< []>> 
6016_1-NonEquals Sto: << []>> 
6016_1-Useless: []
6016_1-Constancy: [(18, 0), (4, 0)]
6016_1-ContextAliasing: [(9, 19)]

.....
-----
Block: 6066_1
6066_1Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x17a9', 'JUMP']>> 
6066_1-Stack size: 29 
6066_1-Equals Mem:<< []>> 
6066_1-NonEquals Mem: << [<9,1>]>> 
6066_1-Equals Sto:<< []>> 
6066_1-NonEquals Sto: << []>> 
6066_1-Useless: []
6066_1-Constancy: [(24, 0), (10, 0), (5, 0), (3, 32)]
6066_1-ContextAliasing: [(15, 19)]

.....
-----
Block: 5499_31
5499_31Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_31-Stack size: 22 
5499_31-Equals Mem:<< []>> 
5499_31-NonEquals Mem: << [<5,8>]>> 
5499_31-Equals Sto:<< []>> 
5499_31-NonEquals Sto: << []>> 
5499_31-Useless: []
5499_31-Constancy: [(17, 0), (12, 0), (6, 0), (5, 0)]
5499_31-ContextAliasing: []

.....
-----
Block: 6134_6
6134_6Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134_6-Stack size: 22 
6134_6-Equals Mem:<< []>> 
6134_6-NonEquals Mem: << [<4,7>]>> 
6134_6-Equals Sto:<< []>> 
6134_6-NonEquals Sto: << []>> 
6134_6-Useless: []
6134_6-Constancy: [(17, 0), (12, 0), (6, 0), (0, 0)]
6134_6-ContextAliasing: []

.....
-----
Block: 4839_2
4839_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
4839_2-Stack size: 17 
4839_2-Equals Mem:<< []>> 
4839_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
4839_2-Equals Sto:<< []>> 
4839_2-NonEquals Sto: << []>> 
4839_2-Useless: []
4839_2-Constancy: [(12, 0), (7, 0), (1, 0)]
4839_2-ContextAliasing: []

.....
-----
Block: 3976_0
3976_0Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x0fa0', 'SWAP1', 'DUP3', 'PUSH2 0x1394', 'JUMP']>> 
3976_0-Stack size: 10 
3976_0-Equals Mem:<< []>> 
3976_0-NonEquals Mem: << [<4,7>]>> 
3976_0-Equals Sto:<< []>> 
3976_0-NonEquals Sto: << []>> 
3976_0-Useless: []
3976_0-Constancy: [(5, 0)]
3976_0-ContextAliasing: []

.....
-----
Block: 5499_29
5499_29Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_29-Stack size: 20 
5499_29-Equals Mem:<< []>> 
5499_29-NonEquals Mem: << [<5,8>]>> 
5499_29-Equals Sto:<< []>> 
5499_29-NonEquals Sto: << []>> 
5499_29-Useless: []
5499_29-Constancy: [(15, 0), (6, 0), (5, 0)]
5499_29-ContextAliasing: []

.....
-----
Block: 5035_2
5035_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
5035_2-Stack size: 15 
5035_2-Equals Mem:<< []>> 
5035_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5035_2-Equals Sto:<< []>> 
5035_2-NonEquals Sto: << []>> 
5035_2-Useless: []
5035_2-Constancy: [(10, 0), (1, 0)]
5035_2-ContextAliasing: []

.....
-----
Block: 4000_0
4000_0Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x0ff0', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4000_0-Stack size: 11 
4000_0-Equals Mem:<< []>> 
4000_0-NonEquals Mem: << [<5,19>, <5,8>, <5,34>, <8,19>, <8,34>, <34,13>, <34,19>, <13,19>]>> 
4000_0-Equals Sto:<< []>> 
4000_0-NonEquals Sto: << []>> 
4000_0-Useless: []
4000_0-Constancy: [(6, 0)]
4000_0-ContextAliasing: []

.....
-----
Block: 4089_0
4089_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x101b', 'SWAP1', 'DUP4', 'PUSH2 0x13f2', 'JUMP']>> 
4089_0-Stack size: 10 
4089_0-Equals Mem:<< []>> 
4089_0-NonEquals Mem: << [<11,14>]>> 
4089_0-Equals Sto:<< []>> 
4089_0-NonEquals Sto: << []>> 
4089_0-Useless: []
4089_0-Constancy: [(5, 0)]
4089_0-ContextAliasing: []

.....
-----
Block: 5106_2
5106_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x10be', 'JUMP']>> 
5106_2-Stack size: 13 
5106_2-Equals Mem:<< [<11,6>]>> 
5106_2-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5106_2-Equals Sto:<< []>> 
5106_2-NonEquals Sto: << []>> 
5106_2-Useless: []
5106_2-Constancy: [(8, 0)]
5106_2-ContextAliasing: []

.....
-----
Block: 4297_5
4297_5Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
4297_5-Stack size: 20 
4297_5-Equals Mem:<< []>> 
4297_5-NonEquals Mem: << [<6,1>]>> 
4297_5-Equals Sto:<< []>> 
4297_5-NonEquals Sto: << []>> 
4297_5-Useless: []
4297_5-Constancy: [(15, 0), (6, 0), (1, 0)]
4297_5-ContextAliasing: [(2, 19)]

.....
-----
Block: 5215_8
5215_8Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_8-Stack size: 22 
5215_8-Equals Mem:<< []>> 
5215_8-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_8-Equals Sto:<< []>> 
5215_8-NonEquals Sto: << []>> 
5215_8-Useless: []
5215_8-Constancy: [(17, 0), (8, 0), (3, 0)]
5215_8-ContextAliasing: [(4, 20)]

.....
-----
Block: 5239_8
5239_8Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_8-Stack size: 26 
5239_8-Equals Mem:<< []>> 
5239_8-NonEquals Mem: << [<11,5>]>> 
5239_8-Equals Sto:<< []>> 
5239_8-NonEquals Sto: << []>> 
5239_8-Useless: []
5239_8-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_8-ContextAliasing: [(8, 20)]

.....
-----
Block: 5499_28
5499_28Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_28-Stack size: 25 
5499_28-Equals Mem:<< []>> 
5499_28-NonEquals Mem: << [<5,8>]>> 
5499_28-Equals Sto:<< []>> 
5499_28-NonEquals Sto: << []>> 
5499_28-Useless: []
5499_28-Constancy: [(20, 0), (11, 0), (6, 0), (5, 0)]
5499_28-ContextAliasing: []

.....
-----
Block: 4123_0
4123_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x105e', 'PUSH2 0x1040', 'DUP4', 'DUP4', 'PUSH2 0x13f2', 'JUMP']>> 
4123_0-Stack size: 11 
4123_0-Equals Mem:<< []>> 
4123_0-NonEquals Mem: << [<11,14>]>> 
4123_0-Equals Sto:<< []>> 
4123_0-NonEquals Sto: << []>> 
4123_0-Useless: []
4123_0-Constancy: [(6, 0)]
4123_0-ContextAliasing: []

.....
-----
Block: 5106_3
5106_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x10be', 'JUMP']>> 
5106_3-Stack size: 14 
5106_3-Equals Mem:<< [<11,6>]>> 
5106_3-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5106_3-Equals Sto:<< []>> 
5106_3-NonEquals Sto: << []>> 
5106_3-Useless: []
5106_3-Constancy: [(9, 0)]
5106_3-ContextAliasing: []

.....
-----
Block: 4297_4
4297_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
4297_4-Stack size: 21 
4297_4-Equals Mem:<< []>> 
4297_4-NonEquals Mem: << [<6,1>]>> 
4297_4-Equals Sto:<< []>> 
4297_4-NonEquals Sto: << []>> 
4297_4-Useless: []
4297_4-Constancy: [(16, 0), (6, 0), (1, 0)]
4297_4-ContextAliasing: [(2, 20)]

.....
-----
Block: 5215_7
5215_7Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_7-Stack size: 23 
5215_7-Equals Mem:<< []>> 
5215_7-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_7-Equals Sto:<< []>> 
5215_7-NonEquals Sto: << []>> 
5215_7-Useless: []
5215_7-Constancy: [(18, 0), (8, 0), (3, 0)]
5215_7-ContextAliasing: [(4, 21)]

.....
-----
Block: 5239_7
5239_7Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_7-Stack size: 27 
5239_7-Equals Mem:<< []>> 
5239_7-NonEquals Mem: << [<11,5>]>> 
5239_7-Equals Sto:<< []>> 
5239_7-NonEquals Sto: << []>> 
5239_7-Useless: []
5239_7-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_7-ContextAliasing: [(8, 21)]

.....
-----
Block: 5499_27
5499_27Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_27-Stack size: 26 
5499_27-Equals Mem:<< []>> 
5499_27-NonEquals Mem: << [<5,8>]>> 
5499_27-Equals Sto:<< []>> 
5499_27-NonEquals Sto: << []>> 
5499_27-Useless: []
5499_27-Constancy: [(21, 0), (11, 0), (6, 0), (5, 0)]
5499_27-ContextAliasing: []

.....
-----
Block: 4160_0
4160_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1394', 'JUMP']>> 
4160_0-Stack size: 12 
4160_0-Equals Mem:<< []>> 
4160_0-NonEquals Mem: << [<11,14>]>> 
4160_0-Equals Sto:<< []>> 
4160_0-NonEquals Sto: << []>> 
4160_0-Useless: []
4160_0-Constancy: [(7, 0)]
4160_0-ContextAliasing: []

.....
-----
Block: 5499_26
5499_26Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_26-Stack size: 20 
5499_26-Equals Mem:<< []>> 
5499_26-NonEquals Mem: << [<5,8>]>> 
5499_26-Equals Sto:<< []>> 
5499_26-NonEquals Sto: << []>> 
5499_26-Useless: []
5499_26-Constancy: [(15, 0), (6, 0), (5, 0)]
5499_26-ContextAliasing: []

.....
-----
Block: 5035_1
5035_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
5035_1-Stack size: 15 
5035_1-Equals Mem:<< []>> 
5035_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5035_1-Equals Sto:<< []>> 
5035_1-NonEquals Sto: << []>> 
5035_1-Useless: []
5035_1-Constancy: [(10, 0), (1, 0)]
5035_1-ContextAliasing: []

.....
-----
Block: 4190_0
4190_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x10a7', 'DUP6', 'DUP6', 'PUSH2 0x13f2', 'JUMP']>> 
4190_0-Stack size: 11 
4190_0-Equals Mem:<< []>> 
4190_0-NonEquals Mem: << [<12,15>]>> 
4190_0-Equals Sto:<< []>> 
4190_0-NonEquals Sto: << []>> 
4190_0-Useless: []
4190_0-Constancy: [(6, 0)]
4190_0-ContextAliasing: []

.....
-----
Block: 5106_4
5106_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x10be', 'JUMP']>> 
5106_4-Stack size: 16 
5106_4-Equals Mem:<< [<11,6>]>> 
5106_4-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5106_4-Equals Sto:<< []>> 
5106_4-NonEquals Sto: << []>> 
5106_4-Useless: []
5106_4-Constancy: [(11, 0)]
5106_4-ContextAliasing: []

.....
-----
Block: 4297_3
4297_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
4297_3-Stack size: 23 
4297_3-Equals Mem:<< []>> 
4297_3-NonEquals Mem: << [<6,1>]>> 
4297_3-Equals Sto:<< []>> 
4297_3-NonEquals Sto: << []>> 
4297_3-Useless: []
4297_3-Constancy: [(18, 0), (6, 0), (1, 0)]
4297_3-ContextAliasing: [(2, 22)]

.....
-----
Block: 5215_6
5215_6Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_6-Stack size: 25 
5215_6-Equals Mem:<< []>> 
5215_6-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_6-Equals Sto:<< []>> 
5215_6-NonEquals Sto: << []>> 
5215_6-Useless: []
5215_6-Constancy: [(20, 0), (8, 0), (3, 0)]
5215_6-ContextAliasing: [(4, 23)]

.....
-----
Block: 5239_6
5239_6Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_6-Stack size: 29 
5239_6-Equals Mem:<< []>> 
5239_6-NonEquals Mem: << [<11,5>]>> 
5239_6-Equals Sto:<< []>> 
5239_6-NonEquals Sto: << []>> 
5239_6-Useless: []
5239_6-Constancy: [(24, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_6-ContextAliasing: [(8, 23)]

.....
-----
Block: 5499_25
5499_25Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_25-Stack size: 28 
5499_25-Equals Mem:<< []>> 
5499_25-NonEquals Mem: << [<5,8>]>> 
5499_25-Equals Sto:<< []>> 
5499_25-NonEquals Sto: << []>> 
5499_25-Useless: []
5499_25-Constancy: [(23, 0), (11, 0), (6, 0), (5, 0)]
5499_25-ContextAliasing: []

.....
-----
Block: 394
394Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
394-Stack size: 2 
394-Equals Mem:<< []>> 
394-NonEquals Mem: << [<7,2>]>> 
394-Equals Sto:<< []>> 
394-NonEquals Sto: << []>> 
394-Useless: []
394-Constancy: []
394-ContextAliasing: []

.....
-----
Block: 783
783Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x06', 'DUP2', 'MSTORE', 'PUSH6 0x0534c4f574f5', 'PUSH1 0xd4', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x0155', 'JUMP']>> 
783-Stack size: 2 
783-Equals Mem:<< [<10,4>]>> 
783-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
783-Equals Sto:<< []>> 
783-NonEquals Sto: << []>> 
783-Useless: []
783-Constancy: []
783-ContextAliasing: []

.....
-----
Block: 5215
5215Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215-Stack size: 4 
5215-Equals Mem:<< []>> 
5215-NonEquals Mem: << [<5,7>, <5,12>, <12,7>]>> 
5215-Equals Sto:<< []>> 
5215-NonEquals Sto: << []>> 
5215-Useless: []
5215-Constancy: []
5215-ContextAliasing: []

.....
-----
Block: 5239
5239Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239-Stack size: 8 
5239-Equals Mem:<< []>> 
5239-NonEquals Mem: << [<11,5>]>> 
5239-Equals Sto:<< []>> 
5239-NonEquals Sto: << []>> 
5239-Useless: []
5239-Constancy: [(3, 0), (2, 32)]
5239-ContextAliasing: []

.....
-----
Block: 724
724Instr:<<['JUMPDEST', 'POP', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
724-Stack size: 2 
724-Equals Mem:<< []>> 
724-NonEquals Mem: << [<15,5>]>> 
724-Equals Sto:<< []>> 
724-NonEquals Sto: << []>> 
724-Useless: []
724-Constancy: []
724-ContextAliasing: []

.....
-----
Block: 1366
1366Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP1', 'PUSH2 0x1694', 'JUMP']>> 
1366-Stack size: 2 
1366-Equals Mem:<< []>> 
1366-NonEquals Mem: << [<6,1>]>> 
1366-Equals Sto:<< []>> 
1366-NonEquals Sto: << []>> 
1366-Useless: []
1366-Constancy: []
1366-ContextAliasing: []

.....
-----
Block: 5499_21
5499_21Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_21-Stack size: 7 
5499_21-Equals Mem:<< []>> 
5499_21-NonEquals Mem: << [<5,8>]>> 
5499_21-Equals Sto:<< []>> 
5499_21-NonEquals Sto: << []>> 
5499_21-Useless: []
5499_21-Constancy: []
5499_21-ContextAliasing: []

.....
-----
Block: 5499_17
5499_17Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_17-Stack size: 7 
5499_17-Equals Mem:<< []>> 
5499_17-NonEquals Mem: << [<5,8>]>> 
5499_17-Equals Sto:<< []>> 
5499_17-NonEquals Sto: << []>> 
5499_17-Useless: []
5499_17-Constancy: []
5499_17-ContextAliasing: []

.....
-----
Block: 5499_13
5499_13Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_13-Stack size: 8 
5499_13-Equals Mem:<< []>> 
5499_13-NonEquals Mem: << [<5,8>]>> 
5499_13-Equals Sto:<< []>> 
5499_13-NonEquals Sto: << []>> 
5499_13-Useless: []
5499_13-Constancy: []
5499_13-ContextAliasing: []

.....
-----
Block: 5499_16
5499_16Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_16-Stack size: 18 
5499_16-Equals Mem:<< []>> 
5499_16-NonEquals Mem: << [<5,8>]>> 
5499_16-Equals Sto:<< []>> 
5499_16-NonEquals Sto: << []>> 
5499_16-Useless: []
5499_16-Constancy: [(11, 0), (7, 0)]
5499_16-ContextAliasing: []

.....
-----
Block: 5499_15
5499_15Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_15-Stack size: 14 
5499_15-Equals Mem:<< []>> 
5499_15-NonEquals Mem: << [<5,8>]>> 
5499_15-Equals Sto:<< []>> 
5499_15-NonEquals Sto: << []>> 
5499_15-Useless: []
5499_15-Constancy: [(7, 0), (3, 0)]
5499_15-ContextAliasing: []

.....
-----
Block: 5499_14
5499_14Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_14-Stack size: 13 
5499_14-Equals Mem:<< []>> 
5499_14-NonEquals Mem: << [<5,8>]>> 
5499_14-Equals Sto:<< []>> 
5499_14-NonEquals Sto: << []>> 
5499_14-Useless: []
5499_14-Constancy: [(6, 0), (2, 0)]
5499_14-ContextAliasing: []

.....
-----
Block: 5499_20
5499_20Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_20-Stack size: 17 
5499_20-Equals Mem:<< []>> 
5499_20-NonEquals Mem: << [<5,8>]>> 
5499_20-Equals Sto:<< []>> 
5499_20-NonEquals Sto: << []>> 
5499_20-Useless: []
5499_20-Constancy: [(11, 0), (7, 0)]
5499_20-ContextAliasing: []

.....
-----
Block: 5499_19
5499_19Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_19-Stack size: 13 
5499_19-Equals Mem:<< []>> 
5499_19-NonEquals Mem: << [<5,8>]>> 
5499_19-Equals Sto:<< []>> 
5499_19-NonEquals Sto: << []>> 
5499_19-Useless: []
5499_19-Constancy: [(7, 0), (3, 0)]
5499_19-ContextAliasing: []

.....
-----
Block: 5499_18
5499_18Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_18-Stack size: 12 
5499_18-Equals Mem:<< []>> 
5499_18-NonEquals Mem: << [<5,8>]>> 
5499_18-Equals Sto:<< []>> 
5499_18-NonEquals Sto: << []>> 
5499_18-Useless: []
5499_18-Constancy: [(6, 0), (2, 0)]
5499_18-ContextAliasing: []

.....
-----
Block: 5499_24
5499_24Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_24-Stack size: 17 
5499_24-Equals Mem:<< []>> 
5499_24-NonEquals Mem: << [<5,8>]>> 
5499_24-Equals Sto:<< []>> 
5499_24-NonEquals Sto: << []>> 
5499_24-Useless: []
5499_24-Constancy: [(11, 0), (7, 0)]
5499_24-ContextAliasing: []

.....
-----
Block: 5499_23
5499_23Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_23-Stack size: 13 
5499_23-Equals Mem:<< []>> 
5499_23-NonEquals Mem: << [<5,8>]>> 
5499_23-Equals Sto:<< []>> 
5499_23-NonEquals Sto: << []>> 
5499_23-Useless: []
5499_23-Constancy: [(7, 0), (3, 0)]
5499_23-ContextAliasing: []

.....
-----
Block: 5499_22
5499_22Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_22-Stack size: 12 
5499_22-Equals Mem:<< []>> 
5499_22-NonEquals Mem: << [<5,8>]>> 
5499_22-Equals Sto:<< []>> 
5499_22-NonEquals Sto: << []>> 
5499_22-Useless: []
5499_22-Constancy: [(6, 0), (2, 0)]
5499_22-ContextAliasing: []

.....
-----
Block: 1244
1244Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP1', 'PUSH2 0x1694', 'JUMP']>> 
1244-Stack size: 2 
1244-Equals Mem:<< []>> 
1244-NonEquals Mem: << [<6,1>]>> 
1244-Equals Sto:<< []>> 
1244-NonEquals Sto: << []>> 
1244-Useless: []
1244-Constancy: []
1244-ContextAliasing: []

.....
-----
Block: 626
626Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
626-Stack size: 3 
626-Equals Mem:<< []>> 
626-NonEquals Mem: << [<10,13>]>> 
626-Equals Sto:<< []>> 
626-NonEquals Sto: << []>> 
626-Useless: []
626-Constancy: []
626-ContextAliasing: []

.....
-----
Block: 1176
1176Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'DUP1', 'ISZERO', 'PUSH2 0x04b6', 'JUMPI']>> 
1176-Stack size: 2 
1176-Equals Mem:<< []>> 
1176-NonEquals Mem: << [<5,8>]>> 
1176-Equals Sto:<< []>> 
1176-NonEquals Sto: << []>> 
1176-Useless: []
1176-Constancy: []
1176-ContextAliasing: []

.....
-----
Block: 5996_2
5996_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5996_2-Stack size: 10 
5996_2-Equals Mem:<< []>> 
5996_2-NonEquals Mem: << [<5,8>]>> 
5996_2-Equals Sto:<< []>> 
5996_2-NonEquals Sto: << []>> 
5996_2-Useless: []
5996_2-Constancy: [(1, 0)]
5996_2-ContextAliasing: [(4, 7)]

.....
-----
Block: 4523_0
4523_0Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x11cf', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
4523_0-Stack size: 10 
4523_0-Equals Mem:<< [<18,6>]>> 
4523_0-NonEquals Mem: << []>> 
4523_0-Equals Sto:<< []>> 
4523_0-NonEquals Sto: << []>> 
4523_0-Useless: []
4523_0-Constancy: []
4523_0-ContextAliasing: []

.....
-----
Block: 5996_1
5996_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5996_1-Stack size: 10 
5996_1-Equals Mem:<< []>> 
5996_1-NonEquals Mem: << [<5,8>]>> 
5996_1-Equals Sto:<< []>> 
5996_1-NonEquals Sto: << []>> 
5996_1-Useless: []
5996_1-Constancy: []
5996_1-ContextAliasing: [(4, 7)]

.....
-----
Block: 2499_2
2499_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2499_2-Stack size: 10 
2499_2-Equals Mem:<< []>> 
2499_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2499_2-Equals Sto:<< []>> 
2499_2-NonEquals Sto: << []>> 
2499_2-Useless: []
2499_2-Constancy: []
2499_2-ContextAliasing: []

.....
-----
Block: 2597_2
2597_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2597_2-Stack size: 10 
2597_2-Equals Mem:<< []>> 
2597_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2597_2-Equals Sto:<< []>> 
2597_2-NonEquals Sto: << []>> 
2597_2-Useless: []
2597_2-Constancy: []
2597_2-ContextAliasing: []

.....
-----
Block: 4616_0
4616_0Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x1240', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1780', 'JUMP']>> 
4616_0-Stack size: 6 
4616_0-Equals Mem:<< []>> 
4616_0-NonEquals Mem: << [<9,4>]>> 
4616_0-Equals Sto:<< []>> 
4616_0-NonEquals Sto: << []>> 
4616_0-Useless: []
4616_0-Constancy: []
4616_0-ContextAliasing: []

.....
-----
Block: 6016_0
6016_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6016_0-Stack size: 15 
6016_0-Equals Mem:<< []>> 
6016_0-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6016_0-Equals Sto:<< []>> 
6016_0-NonEquals Sto: << []>> 
6016_0-Useless: []
6016_0-Constancy: [(4, 0)]
6016_0-ContextAliasing: [(9, 11)]

.....
-----
Block: 6066_0
6066_0Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x17a9', 'JUMP']>> 
6066_0-Stack size: 21 
6066_0-Equals Mem:<< []>> 
6066_0-NonEquals Mem: << [<9,1>]>> 
6066_0-Equals Sto:<< []>> 
6066_0-NonEquals Sto: << []>> 
6066_0-Useless: []
6066_0-Constancy: [(10, 0), (5, 0), (3, 32)]
6066_0-ContextAliasing: [(15, 11)]

.....
-----
Block: 549
549Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'SWAP1', 'JUMP']>> 
549-Stack size: 3 
549-Equals Mem:<< []>> 
549-NonEquals Mem: << [<10,13>]>> 
549-Equals Sto:<< []>> 
549-NonEquals Sto: << []>> 
549-Useless: []
549-Constancy: []
549-ContextAliasing: []

.....
-----
Block: 507
507Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
507-Stack size: 2 
507-Equals Mem:<< []>> 
507-NonEquals Mem: << [<6,3>]>> 
507-Equals Sto:<< []>> 
507-NonEquals Sto: << []>> 
507-Useless: []
507-Constancy: []
507-ContextAliasing: []

.....
-----
Block: 2790
2790Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2790-Stack size: 10 
2790-Equals Mem:<< []>> 
2790-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2790-Equals Sto:<< []>> 
2790-NonEquals Sto: << []>> 
2790-Useless: []
2790-Constancy: [(4, 0)]
2790-ContextAliasing: []

.....
-----
Block: 2890
2890Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2890-Stack size: 10 
2890-Equals Mem:<< []>> 
2890-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2890-Equals Sto:<< []>> 
2890-NonEquals Sto: << []>> 
2890-Useless: []
2890-Constancy: [(4, 0)]
2890-ContextAliasing: []

.....
-----
Block: 2981
2981Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2981-Stack size: 10 
2981-Equals Mem:<< []>> 
2981-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2981-Equals Sto:<< []>> 
2981-NonEquals Sto: << []>> 
2981-Useless: []
2981-Constancy: [(4, 0)]
2981-ContextAliasing: []

.....
-----
Block: 3119
3119Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0c6e', 'JUMPI']>> 
3119-Stack size: 11 
3119-Equals Mem:<< []>> 
3119-NonEquals Mem: << [<10,13>]>> 
3119-Equals Sto:<< []>> 
3119-NonEquals Sto: << []>> 
3119-Useless: []
3119-Constancy: [(5, 0), (0, 0)]
3119-ContextAliasing: []

.....
-----
Block: 3153
3153Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3153-Stack size: 12 
3153-Equals Mem:<< []>> 
3153-NonEquals Mem: << [<11,14>]>> 
3153-Equals Sto:<< []>> 
3153-NonEquals Sto: << []>> 
3153-Useless: []
3153-Constancy: [(6, 0), (1, 0)]
3153-ContextAliasing: []

.....
-----
Block: 3251
3251Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0d1b', 'JUMPI']>> 
3251-Stack size: 11 
3251-Equals Mem:<< []>> 
3251-NonEquals Mem: << [<4,7>]>> 
3251-Equals Sto:<< []>> 
3251-NonEquals Sto: << []>> 
3251-Useless: []
3251-Constancy: [(5, 0), (0, 0)]
3251-ContextAliasing: []

.....
-----
Block: 3272
3272Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x3bb2b217', 'PUSH1 0xe1', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3272-Stack size: 11 
3272-Equals Mem:<< []>> 
3272-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3272-Equals Sto:<< []>> 
3272-NonEquals Sto: << []>> 
3272-Useless: []
3272-Constancy: [(5, 0), (0, 0)]
3272-ContextAliasing: []

.....
-----
Block: 3355
3355Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3355-Stack size: 11 
3355-Equals Mem:<< []>> 
3355-NonEquals Mem: << [<5,8>]>> 
3355-Equals Sto:<< []>> 
3355-NonEquals Sto: << []>> 
3355-Useless: []
3355-Constancy: [(5, 0), (0, 0)]
3355-ContextAliasing: []

.....
-----
Block: 3423
3423Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3423-Stack size: 12 
3423-Equals Mem:<< []>> 
3423-NonEquals Mem: << [<11,14>]>> 
3423-Equals Sto:<< []>> 
3423-NonEquals Sto: << []>> 
3423-Useless: []
3423-Constancy: [(6, 0), (1, 0)]
3423-ContextAliasing: []

.....
-----
Block: 3468
3468Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3468-Stack size: 11 
3468-Equals Mem:<< []>> 
3468-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
3468-Equals Sto:<< []>> 
3468-NonEquals Sto: << []>> 
3468-Useless: []
3468-Constancy: [(5, 0), (0, 0)]
3468-ContextAliasing: []

.....
-----
Block: 3539
3539Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x0df5', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
3539-Stack size: 11 
3539-Equals Mem:<< []>> 
3539-NonEquals Mem: << [<15,18>]>> 
3539-Equals Sto:<< []>> 
3539-NonEquals Sto: << [<2,22>]>> 
3539-Useless: []
3539-Constancy: [(5, 0), (0, 0)]
3539-ContextAliasing: []

.....
-----
Block: 5499_12
5499_12Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_12-Stack size: 17 
5499_12-Equals Mem:<< []>> 
5499_12-NonEquals Mem: << [<5,8>]>> 
5499_12-Equals Sto:<< []>> 
5499_12-NonEquals Sto: << []>> 
5499_12-Useless: []
5499_12-Constancy: [(11, 0), (6, 0)]
5499_12-ContextAliasing: []

.....
-----
Block: 3590
3590Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3590-Stack size: 11 
3590-Equals Mem:<< []>> 
3590-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
3590-Equals Sto:<< []>> 
3590-NonEquals Sto: << []>> 
3590-Useless: []
3590-Constancy: [(5, 0), (0, 0)]
3590-ContextAliasing: []

.....
-----
Block: 5499_11
5499_11Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_11-Stack size: 18 
5499_11-Equals Mem:<< []>> 
5499_11-NonEquals Mem: << [<5,8>]>> 
5499_11-Equals Sto:<< []>> 
5499_11-NonEquals Sto: << []>> 
5499_11-Useless: []
5499_11-Constancy: [(12, 0), (7, 0), (4, 0), (1, 0)]
5499_11-ContextAliasing: []

.....
-----
Block: 4927
4927Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1433', 'JUMP']>> 
4927-Stack size: 14 
4927-Equals Mem:<< [<11,6>]>> 
4927-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
4927-Equals Sto:<< []>> 
4927-NonEquals Sto: << []>> 
4927-Useless: []
4927-Constancy: [(8, 0), (3, 0)]
4927-ContextAliasing: []

.....
-----
Block: 5179_0
5179_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
5179_0-Stack size: 21 
5179_0-Equals Mem:<< []>> 
5179_0-NonEquals Mem: << [<6,1>]>> 
5179_0-Equals Sto:<< []>> 
5179_0-NonEquals Sto: << []>> 
5179_0-Useless: []
5179_0-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
5179_0-ContextAliasing: [(2, 20)]

.....
-----
Block: 5215_5
5215_5Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_5-Stack size: 23 
5215_5-Equals Mem:<< []>> 
5215_5-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_5-Equals Sto:<< []>> 
5215_5-NonEquals Sto: << []>> 
5215_5-Useless: []
5215_5-Constancy: [(17, 0), (12, 0), (8, 0), (3, 0)]
5215_5-ContextAliasing: [(4, 21)]

.....
-----
Block: 5239_5
5239_5Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_5-Stack size: 27 
5239_5-Equals Mem:<< []>> 
5239_5-NonEquals Mem: << [<11,5>]>> 
5239_5-Equals Sto:<< []>> 
5239_5-NonEquals Sto: << []>> 
5239_5-Useless: []
5239_5-Constancy: [(21, 0), (16, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_5-ContextAliasing: [(8, 21)]

.....
-----
Block: 6134_1
6134_1Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134_1-Stack size: 25 
6134_1-Equals Mem:<< []>> 
6134_1-NonEquals Mem: << [<4,7>]>> 
6134_1-Equals Sto:<< []>> 
6134_1-NonEquals Sto: << []>> 
6134_1-Useless: []
6134_1-Constancy: [(19, 0), (14, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6134_1-ContextAliasing: []

.....
-----
Block: 4927_0
4927_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1433', 'JUMP']>> 
4927_0-Stack size: 14 
4927_0-Equals Mem:<< [<11,6>]>> 
4927_0-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
4927_0-Equals Sto:<< []>> 
4927_0-NonEquals Sto: << []>> 
4927_0-Useless: []
4927_0-Constancy: [(8, 0)]
4927_0-ContextAliasing: []

.....
-----
Block: 5179
5179Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
5179-Stack size: 21 
5179-Equals Mem:<< []>> 
5179-NonEquals Mem: << [<6,1>]>> 
5179-Equals Sto:<< []>> 
5179-NonEquals Sto: << []>> 
5179-Useless: []
5179-Constancy: [(15, 0), (6, 0), (1, 0)]
5179-ContextAliasing: [(2, 20)]

.....
-----
Block: 5215_4
5215_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_4-Stack size: 23 
5215_4-Equals Mem:<< []>> 
5215_4-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_4-Equals Sto:<< []>> 
5215_4-NonEquals Sto: << []>> 
5215_4-Useless: []
5215_4-Constancy: [(17, 0), (8, 0), (3, 0)]
5215_4-ContextAliasing: [(4, 21)]

.....
-----
Block: 5239_4
5239_4Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_4-Stack size: 27 
5239_4-Equals Mem:<< []>> 
5239_4-NonEquals Mem: << [<11,5>]>> 
5239_4-Equals Sto:<< []>> 
5239_4-NonEquals Sto: << []>> 
5239_4-Useless: []
5239_4-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_4-ContextAliasing: [(8, 21)]

.....
-----
Block: 6134
6134Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134-Stack size: 25 
6134-Equals Mem:<< []>> 
6134-NonEquals Mem: << [<4,7>]>> 
6134-Equals Sto:<< []>> 
6134-NonEquals Sto: << []>> 
6134-Useless: []
6134-Constancy: [(19, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6134-ContextAliasing: []

.....
-----
Block: 5499_9
5499_9Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_9-Stack size: 23 
5499_9-Equals Mem:<< []>> 
5499_9-NonEquals Mem: << [<5,8>]>> 
5499_9-Equals Sto:<< []>> 
5499_9-NonEquals Sto: << []>> 
5499_9-Useless: []
5499_9-Constancy: [(17, 0), (6, 0), (5, 0)]
5499_9-ContextAliasing: []

.....
-----
Block: 6134_0
6134_0Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134_0-Stack size: 23 
6134_0-Equals Mem:<< []>> 
6134_0-NonEquals Mem: << [<4,7>]>> 
6134_0-Equals Sto:<< []>> 
6134_0-NonEquals Sto: << []>> 
6134_0-Useless: []
6134_0-Constancy: [(17, 0), (6, 0), (0, 0)]
6134_0-ContextAliasing: []

.....
-----
Block: 4839
4839Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
4839-Stack size: 18 
4839-Equals Mem:<< []>> 
4839-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
4839-Equals Sto:<< []>> 
4839-NonEquals Sto: << []>> 
4839-Useless: []
4839-Constancy: [(12, 0), (1, 0)]
4839-ContextAliasing: []

.....
-----
Block: 3812
3812Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0f1a', 'JUMPI']>> 
3812-Stack size: 11 
3812-Equals Mem:<< []>> 
3812-NonEquals Mem: << [<5,8>]>> 
3812-Equals Sto:<< []>> 
3812-NonEquals Sto: << [<12,14>]>> 
3812-Useless: []
3812-Constancy: [(5, 0)]
3812-ContextAliasing: []

.....
-----
Block: 5996_0
5996_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5996_0-Stack size: 19 
5996_0-Equals Mem:<< []>> 
5996_0-NonEquals Mem: << [<5,8>]>> 
5996_0-Equals Sto:<< []>> 
5996_0-NonEquals Sto: << []>> 
5996_0-Useless: []
5996_0-Constancy: [(13, 0), (1, 0)]
5996_0-ContextAliasing: [(4, 16)]

.....
-----
Block: 4523
4523Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x11cf', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
4523-Stack size: 19 
4523-Equals Mem:<< [<18,6>]>> 
4523-NonEquals Mem: << []>> 
4523-Equals Sto:<< []>> 
4523-NonEquals Sto: << []>> 
4523-Useless: []
4523-Constancy: [(13, 0)]
4523-ContextAliasing: []

.....
-----
Block: 5996
5996Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5996-Stack size: 19 
5996-Equals Mem:<< []>> 
5996-NonEquals Mem: << [<5,8>]>> 
5996-Equals Sto:<< []>> 
5996-NonEquals Sto: << []>> 
5996-Useless: []
5996-Constancy: [(13, 0)]
5996-ContextAliasing: [(4, 16)]

.....
-----
Block: 2499_1
2499_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2499_1-Stack size: 19 
2499_1-Equals Mem:<< []>> 
2499_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2499_1-Equals Sto:<< []>> 
2499_1-NonEquals Sto: << []>> 
2499_1-Useless: []
2499_1-Constancy: [(13, 0)]
2499_1-ContextAliasing: []

.....
-----
Block: 2597_1
2597_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2597_1-Stack size: 19 
2597_1-Equals Mem:<< []>> 
2597_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2597_1-Equals Sto:<< []>> 
2597_1-NonEquals Sto: << []>> 
2597_1-Useless: []
2597_1-Constancy: [(13, 0)]
2597_1-ContextAliasing: []

.....
-----
Block: 4616
4616Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x1240', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1780', 'JUMP']>> 
4616-Stack size: 15 
4616-Equals Mem:<< []>> 
4616-NonEquals Mem: << [<9,4>]>> 
4616-Equals Sto:<< []>> 
4616-NonEquals Sto: << []>> 
4616-Useless: []
4616-Constancy: [(9, 0)]
4616-ContextAliasing: []

.....
-----
Block: 6016
6016Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6016-Stack size: 24 
6016-Equals Mem:<< []>> 
6016-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6016-Equals Sto:<< []>> 
6016-NonEquals Sto: << []>> 
6016-Useless: []
6016-Constancy: [(18, 0), (4, 0)]
6016-ContextAliasing: [(9, 20)]

.....
-----
Block: 6066
6066Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x17a9', 'JUMP']>> 
6066-Stack size: 30 
6066-Equals Mem:<< []>> 
6066-NonEquals Mem: << [<9,1>]>> 
6066-Equals Sto:<< []>> 
6066-NonEquals Sto: << []>> 
6066-Useless: []
6066-Constancy: [(24, 0), (10, 0), (5, 0), (3, 32)]
6066-ContextAliasing: [(15, 20)]

.....
-----
Block: 5499_10
5499_10Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_10-Stack size: 23 
5499_10-Equals Mem:<< []>> 
5499_10-NonEquals Mem: << [<5,8>]>> 
5499_10-Equals Sto:<< []>> 
5499_10-NonEquals Sto: << []>> 
5499_10-Useless: []
5499_10-Constancy: [(17, 0), (12, 0), (6, 0), (5, 0)]
5499_10-ContextAliasing: []

.....
-----
Block: 6134_2
6134_2Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134_2-Stack size: 23 
6134_2-Equals Mem:<< []>> 
6134_2-NonEquals Mem: << [<4,7>]>> 
6134_2-Equals Sto:<< []>> 
6134_2-NonEquals Sto: << []>> 
6134_2-Useless: []
6134_2-Constancy: [(17, 0), (12, 0), (6, 0), (0, 0)]
6134_2-ContextAliasing: []

.....
-----
Block: 4839_0
4839_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
4839_0-Stack size: 18 
4839_0-Equals Mem:<< []>> 
4839_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
4839_0-Equals Sto:<< []>> 
4839_0-NonEquals Sto: << []>> 
4839_0-Useless: []
4839_0-Constancy: [(12, 0), (7, 0), (1, 0)]
4839_0-ContextAliasing: []

.....
-----
Block: 3976
3976Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x0fa0', 'SWAP1', 'DUP3', 'PUSH2 0x1394', 'JUMP']>> 
3976-Stack size: 11 
3976-Equals Mem:<< []>> 
3976-NonEquals Mem: << [<4,7>]>> 
3976-Equals Sto:<< []>> 
3976-NonEquals Sto: << []>> 
3976-Useless: []
3976-Constancy: [(5, 0)]
3976-ContextAliasing: []

.....
-----
Block: 5499_8
5499_8Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_8-Stack size: 21 
5499_8-Equals Mem:<< []>> 
5499_8-NonEquals Mem: << [<5,8>]>> 
5499_8-Equals Sto:<< []>> 
5499_8-NonEquals Sto: << []>> 
5499_8-Useless: []
5499_8-Constancy: [(15, 0), (6, 0), (5, 0)]
5499_8-ContextAliasing: []

.....
-----
Block: 5035_0
5035_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
5035_0-Stack size: 16 
5035_0-Equals Mem:<< []>> 
5035_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5035_0-Equals Sto:<< []>> 
5035_0-NonEquals Sto: << []>> 
5035_0-Useless: []
5035_0-Constancy: [(10, 0), (1, 0)]
5035_0-ContextAliasing: []

.....
-----
Block: 4000
4000Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x0ff0', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4000-Stack size: 12 
4000-Equals Mem:<< []>> 
4000-NonEquals Mem: << [<5,19>, <5,8>, <5,34>, <8,19>, <8,34>, <34,13>, <34,19>, <13,19>]>> 
4000-Equals Sto:<< []>> 
4000-NonEquals Sto: << []>> 
4000-Useless: []
4000-Constancy: [(6, 0)]
4000-ContextAliasing: []

.....
-----
Block: 4089
4089Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x101b', 'SWAP1', 'DUP4', 'PUSH2 0x13f2', 'JUMP']>> 
4089-Stack size: 11 
4089-Equals Mem:<< []>> 
4089-NonEquals Mem: << [<11,14>]>> 
4089-Equals Sto:<< []>> 
4089-NonEquals Sto: << []>> 
4089-Useless: []
4089-Constancy: [(5, 0)]
4089-ContextAliasing: []

.....
-----
Block: 5106
5106Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x10be', 'JUMP']>> 
5106-Stack size: 14 
5106-Equals Mem:<< [<11,6>]>> 
5106-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5106-Equals Sto:<< []>> 
5106-NonEquals Sto: << []>> 
5106-Useless: []
5106-Constancy: [(8, 0)]
5106-ContextAliasing: []

.....
-----
Block: 4297_2
4297_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
4297_2-Stack size: 21 
4297_2-Equals Mem:<< []>> 
4297_2-NonEquals Mem: << [<6,1>]>> 
4297_2-Equals Sto:<< []>> 
4297_2-NonEquals Sto: << []>> 
4297_2-Useless: []
4297_2-Constancy: [(15, 0), (6, 0), (1, 0)]
4297_2-ContextAliasing: [(2, 20)]

.....
-----
Block: 5215_3
5215_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_3-Stack size: 23 
5215_3-Equals Mem:<< []>> 
5215_3-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_3-Equals Sto:<< []>> 
5215_3-NonEquals Sto: << []>> 
5215_3-Useless: []
5215_3-Constancy: [(17, 0), (8, 0), (3, 0)]
5215_3-ContextAliasing: [(4, 21)]

.....
-----
Block: 5239_3
5239_3Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_3-Stack size: 27 
5239_3-Equals Mem:<< []>> 
5239_3-NonEquals Mem: << [<11,5>]>> 
5239_3-Equals Sto:<< []>> 
5239_3-NonEquals Sto: << []>> 
5239_3-Useless: []
5239_3-Constancy: [(21, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_3-ContextAliasing: [(8, 21)]

.....
-----
Block: 5499_7
5499_7Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_7-Stack size: 26 
5499_7-Equals Mem:<< []>> 
5499_7-NonEquals Mem: << [<5,8>]>> 
5499_7-Equals Sto:<< []>> 
5499_7-NonEquals Sto: << []>> 
5499_7-Useless: []
5499_7-Constancy: [(20, 0), (11, 0), (6, 0), (5, 0)]
5499_7-ContextAliasing: []

.....
-----
Block: 4123
4123Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x105e', 'PUSH2 0x1040', 'DUP4', 'DUP4', 'PUSH2 0x13f2', 'JUMP']>> 
4123-Stack size: 12 
4123-Equals Mem:<< []>> 
4123-NonEquals Mem: << [<11,14>]>> 
4123-Equals Sto:<< []>> 
4123-NonEquals Sto: << []>> 
4123-Useless: []
4123-Constancy: [(6, 0)]
4123-ContextAliasing: []

.....
-----
Block: 5106_0
5106_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x10be', 'JUMP']>> 
5106_0-Stack size: 15 
5106_0-Equals Mem:<< [<11,6>]>> 
5106_0-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5106_0-Equals Sto:<< []>> 
5106_0-NonEquals Sto: << []>> 
5106_0-Useless: []
5106_0-Constancy: [(9, 0)]
5106_0-ContextAliasing: []

.....
-----
Block: 4297_1
4297_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
4297_1-Stack size: 22 
4297_1-Equals Mem:<< []>> 
4297_1-NonEquals Mem: << [<6,1>]>> 
4297_1-Equals Sto:<< []>> 
4297_1-NonEquals Sto: << []>> 
4297_1-Useless: []
4297_1-Constancy: [(16, 0), (6, 0), (1, 0)]
4297_1-ContextAliasing: [(2, 21)]

.....
-----
Block: 5215_2
5215_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_2-Stack size: 24 
5215_2-Equals Mem:<< []>> 
5215_2-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_2-Equals Sto:<< []>> 
5215_2-NonEquals Sto: << []>> 
5215_2-Useless: []
5215_2-Constancy: [(18, 0), (8, 0), (3, 0)]
5215_2-ContextAliasing: [(4, 22)]

.....
-----
Block: 5239_2
5239_2Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_2-Stack size: 28 
5239_2-Equals Mem:<< []>> 
5239_2-NonEquals Mem: << [<11,5>]>> 
5239_2-Equals Sto:<< []>> 
5239_2-NonEquals Sto: << []>> 
5239_2-Useless: []
5239_2-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_2-ContextAliasing: [(8, 22)]

.....
-----
Block: 5499_6
5499_6Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_6-Stack size: 27 
5499_6-Equals Mem:<< []>> 
5499_6-NonEquals Mem: << [<5,8>]>> 
5499_6-Equals Sto:<< []>> 
5499_6-NonEquals Sto: << []>> 
5499_6-Useless: []
5499_6-Constancy: [(21, 0), (11, 0), (6, 0), (5, 0)]
5499_6-ContextAliasing: []

.....
-----
Block: 4160
4160Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1394', 'JUMP']>> 
4160-Stack size: 13 
4160-Equals Mem:<< []>> 
4160-NonEquals Mem: << [<11,14>]>> 
4160-Equals Sto:<< []>> 
4160-NonEquals Sto: << []>> 
4160-Useless: []
4160-Constancy: [(7, 0)]
4160-ContextAliasing: []

.....
-----
Block: 5499_5
5499_5Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_5-Stack size: 21 
5499_5-Equals Mem:<< []>> 
5499_5-NonEquals Mem: << [<5,8>]>> 
5499_5-Equals Sto:<< []>> 
5499_5-NonEquals Sto: << []>> 
5499_5-Useless: []
5499_5-Constancy: [(15, 0), (6, 0), (5, 0)]
5499_5-ContextAliasing: []

.....
-----
Block: 5035
5035Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
5035-Stack size: 16 
5035-Equals Mem:<< []>> 
5035-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5035-Equals Sto:<< []>> 
5035-NonEquals Sto: << []>> 
5035-Useless: []
5035-Constancy: [(10, 0), (1, 0)]
5035-ContextAliasing: []

.....
-----
Block: 4190
4190Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x10a7', 'DUP6', 'DUP6', 'PUSH2 0x13f2', 'JUMP']>> 
4190-Stack size: 12 
4190-Equals Mem:<< []>> 
4190-NonEquals Mem: << [<12,15>]>> 
4190-Equals Sto:<< []>> 
4190-NonEquals Sto: << []>> 
4190-Useless: []
4190-Constancy: [(6, 0)]
4190-ContextAliasing: []

.....
-----
Block: 5106_1
5106_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x10be', 'JUMP']>> 
5106_1-Stack size: 17 
5106_1-Equals Mem:<< [<11,6>]>> 
5106_1-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5106_1-Equals Sto:<< []>> 
5106_1-NonEquals Sto: << []>> 
5106_1-Useless: []
5106_1-Constancy: [(11, 0)]
5106_1-ContextAliasing: []

.....
-----
Block: 4297_0
4297_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
4297_0-Stack size: 24 
4297_0-Equals Mem:<< []>> 
4297_0-NonEquals Mem: << [<6,1>]>> 
4297_0-Equals Sto:<< []>> 
4297_0-NonEquals Sto: << []>> 
4297_0-Useless: []
4297_0-Constancy: [(18, 0), (6, 0), (1, 0)]
4297_0-ContextAliasing: [(2, 23)]

.....
-----
Block: 5215_1
5215_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_1-Stack size: 26 
5215_1-Equals Mem:<< []>> 
5215_1-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_1-Equals Sto:<< []>> 
5215_1-NonEquals Sto: << []>> 
5215_1-Useless: []
5215_1-Constancy: [(20, 0), (8, 0), (3, 0)]
5215_1-ContextAliasing: [(4, 24)]

.....
-----
Block: 5239_1
5239_1Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_1-Stack size: 30 
5239_1-Equals Mem:<< []>> 
5239_1-NonEquals Mem: << [<11,5>]>> 
5239_1-Equals Sto:<< []>> 
5239_1-NonEquals Sto: << []>> 
5239_1-Useless: []
5239_1-Constancy: [(24, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5239_1-ContextAliasing: [(8, 24)]

.....
-----
Block: 5499_4
5499_4Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_4-Stack size: 29 
5499_4-Equals Mem:<< []>> 
5499_4-NonEquals Mem: << [<5,8>]>> 
5499_4-Equals Sto:<< []>> 
5499_4-NonEquals Sto: << []>> 
5499_4-Useless: []
5499_4-Constancy: [(23, 0), (11, 0), (6, 0), (5, 0)]
5499_4-ContextAliasing: []

.....
-----
Block: 4297
4297Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
4297-Stack size: 15 
4297-Equals Mem:<< []>> 
4297-NonEquals Mem: << [<6,1>]>> 
4297-Equals Sto:<< []>> 
4297-NonEquals Sto: << []>> 
4297-Useless: []
4297-Constancy: [(9, 0), (1, 0)]
4297-ContextAliasing: [(2, 14)]

.....
-----
Block: 5215_0
5215_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215_0-Stack size: 17 
5215_0-Equals Mem:<< []>> 
5215_0-NonEquals Mem: << [<5,7>, <12,7>]>> 
5215_0-Equals Sto:<< []>> 
5215_0-NonEquals Sto: << []>> 
5215_0-Useless: []
5215_0-Constancy: [(11, 0), (3, 0)]
5215_0-ContextAliasing: [(4, 15)]

.....
-----
Block: 5239_0
5239_0Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239_0-Stack size: 21 
5239_0-Equals Mem:<< []>> 
5239_0-NonEquals Mem: << [<11,5>]>> 
5239_0-Equals Sto:<< []>> 
5239_0-NonEquals Sto: << []>> 
5239_0-Useless: []
5239_0-Constancy: [(15, 0), (7, 0), (3, 0), (2, 32)]
5239_0-ContextAliasing: [(8, 15)]

.....
-----
Block: 5499_3
5499_3Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_3-Stack size: 20 
5499_3-Equals Mem:<< []>> 
5499_3-NonEquals Mem: << [<5,8>]>> 
5499_3-Equals Sto:<< []>> 
5499_3-NonEquals Sto: << []>> 
5499_3-Useless: []
5499_3-Constancy: [(14, 0), (6, 0), (5, 0)]
5499_3-ContextAliasing: []

.....
-----
Block: 2499_0
2499_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2499_0-Stack size: 10 
2499_0-Equals Mem:<< []>> 
2499_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2499_0-Equals Sto:<< []>> 
2499_0-NonEquals Sto: << []>> 
2499_0-Useless: []
2499_0-Constancy: [(4, 0)]
2499_0-ContextAliasing: []

.....
-----
Block: 2597_0
2597_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2597_0-Stack size: 10 
2597_0-Equals Mem:<< []>> 
2597_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2597_0-Equals Sto:<< []>> 
2597_0-NonEquals Sto: << []>> 
2597_0-Useless: []
2597_0-Constancy: [(4, 0)]
2597_0-ContextAliasing: []

.....
-----
Block: 5499
5499Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499-Stack size: 8 
5499-Equals Mem:<< []>> 
5499-NonEquals Mem: << [<5,8>]>> 
5499-Equals Sto:<< []>> 
5499-NonEquals Sto: << []>> 
5499-Useless: []
5499-Constancy: [(5, 0)]
5499-ContextAliasing: []

.....
-----
Block: 5499_2
5499_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_2-Stack size: 18 
5499_2-Equals Mem:<< []>> 
5499_2-NonEquals Mem: << [<5,8>]>> 
5499_2-Equals Sto:<< []>> 
5499_2-NonEquals Sto: << []>> 
5499_2-Useless: []
5499_2-Constancy: [(15, 0), (11, 0), (7, 0)]
5499_2-ContextAliasing: []

.....
-----
Block: 5499_1
5499_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_1-Stack size: 14 
5499_1-Equals Mem:<< []>> 
5499_1-NonEquals Mem: << [<5,8>]>> 
5499_1-Equals Sto:<< []>> 
5499_1-NonEquals Sto: << []>> 
5499_1-Useless: []
5499_1-Constancy: [(11, 0), (7, 0), (3, 0)]
5499_1-ContextAliasing: []

.....
-----
Block: 5499_0
5499_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499_0-Stack size: 13 
5499_0-Equals Mem:<< []>> 
5499_0-NonEquals Mem: << [<5,8>]>> 
5499_0-Equals Sto:<< []>> 
5499_0-NonEquals Sto: << []>> 
5499_0-Useless: []
5499_0-Constancy: [(10, 0), (6, 0), (2, 0)]
5499_0-ContextAliasing: []

.....
-----
Block: 2499
2499Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2499-Stack size: 9 
2499-Equals Mem:<< []>> 
2499-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2499-Equals Sto:<< []>> 
2499-NonEquals Sto: << []>> 
2499-Useless: []
2499-Constancy: [(4, 0)]
2499-ContextAliasing: []

.....
-----
Block: 2597
2597Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2597-Stack size: 9 
2597-Equals Mem:<< []>> 
2597-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2597-Equals Sto:<< []>> 
2597-NonEquals Sto: << []>> 
2597-Useless: []
2597-Constancy: [(4, 0)]
2597-ContextAliasing: []

.....
-----
Block: 308
308Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH8 0x536c6f77706f6b65', 'PUSH1 0xc0', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE']>> 
308-Stack size: 2 
308-Equals Mem:<< [<10,4>]>> 
308-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
308-Equals Sto:<< []>> 
308-NonEquals Sto: << []>> 
308-Useless: []
308-Constancy: []
308-ContextAliasing: []

.....
-----
Block: 354
354Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
354-Stack size: 2 
354-Equals Mem:<< []>> 
354-NonEquals Mem: << []>> 
354-Equals Sto:<< []>> 
354-NonEquals Sto: << []>> 
354-Useless: []
354-Constancy: []
354-ContextAliasing: []

.....
-----
Block: 1267_15
1267_15Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_15-Stack size: 3 
1267_15-Equals Mem:<< []>> 
1267_15-NonEquals Mem: << []>> 
1267_15-Equals Sto:<< []>> 
1267_15-NonEquals Sto: << []>> 
1267_15-Useless: []
1267_15-Constancy: []
1267_15-ContextAliasing: []

.....
-----
Block: 1267_27
1267_27Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_27-Stack size: 7 
1267_27-Equals Mem:<< []>> 
1267_27-NonEquals Mem: << []>> 
1267_27-Equals Sto:<< []>> 
1267_27-NonEquals Sto: << []>> 
1267_27-Useless: []
1267_27-Constancy: []
1267_27-ContextAliasing: []

.....
-----
Block: 5878
5878Instr:<<['JUMPDEST', 'DUP4', 'MLOAD', 'SWAP3', 'POP', 'PUSH1 0x20', 'DUP5', 'ADD', 'MLOAD', 'SWAP2', 'POP', 'PUSH1 0x40', 'DUP5', 'ADD', 'MLOAD', 'SWAP1', 'POP', 'SWAP3', 'POP', 'SWAP3', 'POP', 'SWAP3', 'JUMP']>> 
5878-Stack size: 8 
5878-Equals Mem:<< []>> 
5878-NonEquals Mem: << [<2,8>, <2,14>, <8,14>]>> 
5878-Equals Sto:<< []>> 
5878-NonEquals Sto: << []>> 
5878-Useless: []
5878-Constancy: [(2, 0), (1, 0), (0, 0)]
5878-ContextAliasing: []

.....
-----
Block: 354_1
354_1Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
354_1-Stack size: 3 
354_1-Equals Mem:<< []>> 
354_1-NonEquals Mem: << []>> 
354_1-Equals Sto:<< []>> 
354_1-NonEquals Sto: << []>> 
354_1-Useless: []
354_1-Constancy: []
354_1-ContextAliasing: []

.....
-----
Block: 354_0
354_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
354_0-Stack size: 3 
354_0-Equals Mem:<< []>> 
354_0-NonEquals Mem: << []>> 
354_0-Equals Sto:<< []>> 
354_0-NonEquals Sto: << []>> 
354_0-Useless: []
354_0-Constancy: []
354_0-ContextAliasing: []

.....
-----
Block: 1267
1267Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267-Stack size: 10 
1267-Equals Mem:<< []>> 
1267-NonEquals Mem: << []>> 
1267-Equals Sto:<< []>> 
1267-NonEquals Sto: << []>> 
1267-Useless: []
1267-Constancy: [(5, 0)]
1267-ContextAliasing: []

.....
-----
Block: 1267_26
1267_26Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_26-Stack size: 11 
1267_26-Equals Mem:<< []>> 
1267_26-NonEquals Mem: << []>> 
1267_26-Equals Sto:<< []>> 
1267_26-NonEquals Sto: << []>> 
1267_26-Useless: []
1267_26-Constancy: [(6, 0), (1, 0)]
1267_26-ContextAliasing: []

.....
-----
Block: 1267_24
1267_24Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_24-Stack size: 20 
1267_24-Equals Mem:<< []>> 
1267_24-NonEquals Mem: << []>> 
1267_24-Equals Sto:<< []>> 
1267_24-NonEquals Sto: << []>> 
1267_24-Useless: []
1267_24-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
1267_24-ContextAliasing: []

.....
-----
Block: 1267_22
1267_22Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_22-Stack size: 20 
1267_22-Equals Mem:<< []>> 
1267_22-NonEquals Mem: << []>> 
1267_22-Equals Sto:<< []>> 
1267_22-NonEquals Sto: << []>> 
1267_22-Useless: []
1267_22-Constancy: [(15, 0), (6, 0), (1, 0)]
1267_22-ContextAliasing: []

.....
-----
Block: 1267_23
1267_23Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_23-Stack size: 18 
1267_23-Equals Mem:<< []>> 
1267_23-NonEquals Mem: << []>> 
1267_23-Equals Sto:<< []>> 
1267_23-NonEquals Sto: << []>> 
1267_23-Useless: []
1267_23-Constancy: [(13, 0), (2, 0)]
1267_23-ContextAliasing: []

.....
-----
Block: 1267_21
1267_21Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_21-Stack size: 19 
1267_21-Equals Mem:<< []>> 
1267_21-NonEquals Mem: << []>> 
1267_21-Equals Sto:<< []>> 
1267_21-NonEquals Sto: << []>> 
1267_21-Useless: []
1267_21-Constancy: [(14, 0)]
1267_21-ContextAliasing: []

.....
-----
Block: 1267_25
1267_25Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_25-Stack size: 18 
1267_25-Equals Mem:<< []>> 
1267_25-NonEquals Mem: << []>> 
1267_25-Equals Sto:<< []>> 
1267_25-NonEquals Sto: << []>> 
1267_25-Useless: []
1267_25-Constancy: [(13, 0), (8, 0), (2, 0)]
1267_25-ContextAliasing: []

.....
-----
Block: 1267_20
1267_20Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_20-Stack size: 16 
1267_20-Equals Mem:<< []>> 
1267_20-NonEquals Mem: << []>> 
1267_20-Equals Sto:<< []>> 
1267_20-NonEquals Sto: << []>> 
1267_20-Useless: []
1267_20-Constancy: [(11, 0), (2, 0)]
1267_20-ContextAliasing: []

.....
-----
Block: 1267_19
1267_19Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_19-Stack size: 20 
1267_19-Equals Mem:<< []>> 
1267_19-NonEquals Mem: << []>> 
1267_19-Equals Sto:<< []>> 
1267_19-NonEquals Sto: << []>> 
1267_19-Useless: []
1267_19-Constancy: [(15, 0), (6, 0), (1, 0)]
1267_19-ContextAliasing: []

.....
-----
Block: 1267_18
1267_18Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_18-Stack size: 21 
1267_18-Equals Mem:<< []>> 
1267_18-NonEquals Mem: << []>> 
1267_18-Equals Sto:<< []>> 
1267_18-NonEquals Sto: << []>> 
1267_18-Useless: []
1267_18-Constancy: [(16, 0), (6, 0), (1, 0)]
1267_18-ContextAliasing: []

.....
-----
Block: 1267_17
1267_17Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_17-Stack size: 16 
1267_17-Equals Mem:<< []>> 
1267_17-NonEquals Mem: << []>> 
1267_17-Equals Sto:<< []>> 
1267_17-NonEquals Sto: << []>> 
1267_17-Useless: []
1267_17-Constancy: [(11, 0), (2, 0)]
1267_17-ContextAliasing: []

.....
-----
Block: 1267_16
1267_16Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_16-Stack size: 23 
1267_16-Equals Mem:<< []>> 
1267_16-NonEquals Mem: << []>> 
1267_16-Equals Sto:<< []>> 
1267_16-NonEquals Sto: << []>> 
1267_16-Useless: []
1267_16-Constancy: [(18, 0), (6, 0), (1, 0)]
1267_16-ContextAliasing: []

.....
-----
Block: 1267_14
1267_14Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_14-Stack size: 11 
1267_14-Equals Mem:<< []>> 
1267_14-NonEquals Mem: << []>> 
1267_14-Equals Sto:<< []>> 
1267_14-NonEquals Sto: << []>> 
1267_14-Useless: []
1267_14-Constancy: []
1267_14-ContextAliasing: []

.....
-----
Block: 1267_13
1267_13Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_13-Stack size: 11 
1267_13-Equals Mem:<< []>> 
1267_13-NonEquals Mem: << []>> 
1267_13-Equals Sto:<< []>> 
1267_13-NonEquals Sto: << []>> 
1267_13-Useless: []
1267_13-Constancy: [(5, 0)]
1267_13-ContextAliasing: []

.....
-----
Block: 1267_12
1267_12Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_12-Stack size: 12 
1267_12-Equals Mem:<< []>> 
1267_12-NonEquals Mem: << []>> 
1267_12-Equals Sto:<< []>> 
1267_12-NonEquals Sto: << []>> 
1267_12-Useless: []
1267_12-Constancy: [(6, 0), (1, 0)]
1267_12-ContextAliasing: []

.....
-----
Block: 1267_10
1267_10Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_10-Stack size: 21 
1267_10-Equals Mem:<< []>> 
1267_10-NonEquals Mem: << []>> 
1267_10-Equals Sto:<< []>> 
1267_10-NonEquals Sto: << []>> 
1267_10-Useless: []
1267_10-Constancy: [(15, 0), (10, 0), (6, 0), (1, 0)]
1267_10-ContextAliasing: []

.....
-----
Block: 1267_8
1267_8Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_8-Stack size: 21 
1267_8-Equals Mem:<< []>> 
1267_8-NonEquals Mem: << []>> 
1267_8-Equals Sto:<< []>> 
1267_8-NonEquals Sto: << []>> 
1267_8-Useless: []
1267_8-Constancy: [(15, 0), (6, 0), (1, 0)]
1267_8-ContextAliasing: []

.....
-----
Block: 1267_9
1267_9Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_9-Stack size: 19 
1267_9-Equals Mem:<< []>> 
1267_9-NonEquals Mem: << []>> 
1267_9-Equals Sto:<< []>> 
1267_9-NonEquals Sto: << []>> 
1267_9-Useless: []
1267_9-Constancy: [(13, 0), (2, 0)]
1267_9-ContextAliasing: []

.....
-----
Block: 1267_7
1267_7Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_7-Stack size: 20 
1267_7-Equals Mem:<< []>> 
1267_7-NonEquals Mem: << []>> 
1267_7-Equals Sto:<< []>> 
1267_7-NonEquals Sto: << []>> 
1267_7-Useless: []
1267_7-Constancy: [(14, 0)]
1267_7-ContextAliasing: []

.....
-----
Block: 1267_11
1267_11Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_11-Stack size: 19 
1267_11-Equals Mem:<< []>> 
1267_11-NonEquals Mem: << []>> 
1267_11-Equals Sto:<< []>> 
1267_11-NonEquals Sto: << []>> 
1267_11-Useless: []
1267_11-Constancy: [(13, 0), (8, 0), (2, 0)]
1267_11-ContextAliasing: []

.....
-----
Block: 1267_6
1267_6Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_6-Stack size: 17 
1267_6-Equals Mem:<< []>> 
1267_6-NonEquals Mem: << []>> 
1267_6-Equals Sto:<< []>> 
1267_6-NonEquals Sto: << []>> 
1267_6-Useless: []
1267_6-Constancy: [(11, 0), (2, 0)]
1267_6-ContextAliasing: []

.....
-----
Block: 1267_5
1267_5Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_5-Stack size: 21 
1267_5-Equals Mem:<< []>> 
1267_5-NonEquals Mem: << []>> 
1267_5-Equals Sto:<< []>> 
1267_5-NonEquals Sto: << []>> 
1267_5-Useless: []
1267_5-Constancy: [(15, 0), (6, 0), (1, 0)]
1267_5-ContextAliasing: []

.....
-----
Block: 1267_4
1267_4Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_4-Stack size: 22 
1267_4-Equals Mem:<< []>> 
1267_4-NonEquals Mem: << []>> 
1267_4-Equals Sto:<< []>> 
1267_4-NonEquals Sto: << []>> 
1267_4-Useless: []
1267_4-Constancy: [(16, 0), (6, 0), (1, 0)]
1267_4-ContextAliasing: []

.....
-----
Block: 1267_3
1267_3Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_3-Stack size: 17 
1267_3-Equals Mem:<< []>> 
1267_3-NonEquals Mem: << []>> 
1267_3-Equals Sto:<< []>> 
1267_3-NonEquals Sto: << []>> 
1267_3-Useless: []
1267_3-Constancy: [(11, 0), (2, 0)]
1267_3-ContextAliasing: []

.....
-----
Block: 1267_2
1267_2Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_2-Stack size: 24 
1267_2-Equals Mem:<< []>> 
1267_2-NonEquals Mem: << []>> 
1267_2-Equals Sto:<< []>> 
1267_2-NonEquals Sto: << []>> 
1267_2-Useless: []
1267_2-Constancy: [(18, 0), (6, 0), (1, 0)]
1267_2-ContextAliasing: []

.....
-----
Block: 1267_1
1267_1Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_1-Stack size: 15 
1267_1-Equals Mem:<< []>> 
1267_1-NonEquals Mem: << []>> 
1267_1-Equals Sto:<< []>> 
1267_1-NonEquals Sto: << []>> 
1267_1-Useless: []
1267_1-Constancy: [(9, 0), (1, 0)]
1267_1-ContextAliasing: []

.....
-----
Block: 1267_0
1267_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267_0-Stack size: 11 
1267_0-Equals Mem:<< []>> 
1267_0-NonEquals Mem: << []>> 
1267_0-Equals Sto:<< []>> 
1267_0-NonEquals Sto: << []>> 
1267_0-Useless: []
1267_0-Constancy: [(5, 0)]
1267_0-ContextAliasing: []

.....
-----
Block: 1444
1444Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SSTORE', 'PUSH1 0x06', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'PUSH32 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf', 'PUSH2 0x05de', 'PUSH1 0x08', 'PUSH1 0x0a', 'PUSH2 0x166f', 'JUMP']>> 
1444-Stack size: 3 
1444-Equals Mem:<< []>> 
1444-NonEquals Mem: << []>> 
1444-Equals Sto:<< [<5,10>]>> 
1444-NonEquals Sto: << [<2,5>, <2,10>]>> 
1444-Useless: []
1444-Constancy: []
1444-ContextAliasing: []

.....
-----
Block: 1678
1678Instr:<<['JUMPDEST', 'PUSH1 0x13', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH20 0x7a250d5630b4cf539739df2c5dacb4c659f2488d', 'SWAP1', 'DUP2', 'OR', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH2 0x06d7', 'SWAP1', 'ADDRESS', 'SWAP1', 'PUSH2 0x06c9', 'PUSH1 0x08', 'PUSH1 0x0a', 'PUSH2 0x166f', 'JUMP']>> 
1678-Stack size: 2 
1678-Equals Mem:<< []>> 
1678-NonEquals Mem: << []>> 
1678-Equals Sto:<< [<3,17>]>> 
1678-NonEquals Sto: << []>> 
1678-Useless: []
1678-Constancy: []
1678-ContextAliasing: []

.....
-----
Block: 2458
2458Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH3 0xff00ff', 'PUSH1 0xa0', 'SHL', 'NOT', 'AND', 'PUSH3 0x010001', 'PUSH1 0xa0', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'JUMP']>> 
2458-Stack size: 3 
2458-Equals Mem:<< []>> 
2458-NonEquals Mem: << []>> 
2458-Equals Sto:<< [<4,15>]>> 
2458-NonEquals Sto: << []>> 
2458-Useless: []
2458-Constancy: []
2458-ContextAliasing: []

.....
-----
Block: 3682
3682Instr:<<['JUMPDEST', 'PUSH2 0x0e8e', 'PUSH1 0x64', 'PUSH2 0x0e88', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e7d', 'JUMPI']>> 
3682-Stack size: 11 
3682-Equals Mem:<< []>> 
3682-NonEquals Mem: << []>> 
3682-Equals Sto:<< []>> 
3682-NonEquals Sto: << [<5,7>]>> 
3682-Useless: []
3682-Constancy: [(5, 0), (0, 0)]
3682-ContextAliasing: []

.....
-----
Block: 3773
3773Instr:<<['PUSH2 0x0ee1', 'PUSH1 0x64', 'PUSH2 0x0e88', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0ed7', 'JUMPI']>> 
3773-Stack size: 11 
3773-Equals Mem:<< []>> 
3773-NonEquals Mem: << []>> 
3773-Equals Sto:<< []>> 
3773-NonEquals Sto: << [<4,6>]>> 
3773-Useless: []
3773-Constancy: [(5, 0)]
3773-ContextAliasing: []

.....
-----
Block: 3907
3907Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
3907-Stack size: 13 
3907-Equals Mem:<< []>> 
3907-NonEquals Mem: << []>> 
3907-Equals Sto:<< []>> 
3907-NonEquals Sto: << [<2,4>]>> 
3907-Useless: []
3907-Constancy: [(7, 0)]
3907-ContextAliasing: []

.....
-----
Block: 4342
4342Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'ISZERO', 'PUSH2 0x126f', 'JUMPI']>> 
4342-Stack size: 14 
4342-Equals Mem:<< []>> 
4342-NonEquals Mem: << []>> 
4342-Equals Sto:<< [<3,14>]>> 
4342-NonEquals Sto: << []>> 
4342-Useless: []
4342-Constancy: [(8, 0)]
4342-ContextAliasing: []

.....
-----
Block: 4719
4719Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'JUMP']>> 
4719-Stack size: 14 
4719-Equals Mem:<< []>> 
4719-NonEquals Mem: << []>> 
4719-Equals Sto:<< [<4,11>]>> 
4719-NonEquals Sto: << []>> 
4719-Useless: []
4719-Constancy: [(8, 0)]
4719-ContextAliasing: []

.....
-----
Block: 4342_0
4342_0Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'ISZERO', 'PUSH2 0x126f', 'JUMPI']>> 
4342_0-Stack size: 5 
4342_0-Equals Mem:<< []>> 
4342_0-NonEquals Mem: << []>> 
4342_0-Equals Sto:<< [<3,14>]>> 
4342_0-NonEquals Sto: << []>> 
4342_0-Useless: []
4342_0-Constancy: []
4342_0-ContextAliasing: []

.....
-----
Block: 4719_0
4719_0Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'JUMP']>> 
4719_0-Stack size: 5 
4719_0-Equals Mem:<< []>> 
4719_0-NonEquals Mem: << []>> 
4719_0-Equals Sto:<< [<4,11>]>> 
4719_0-NonEquals Sto: << []>> 
4719_0-Useless: []
4719_0-Constancy: []
4719_0-ContextAliasing: []

.....
-----
Block: 3682_0
3682_0Instr:<<['JUMPDEST', 'PUSH2 0x0e8e', 'PUSH1 0x64', 'PUSH2 0x0e88', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e7d', 'JUMPI']>> 
3682_0-Stack size: 10 
3682_0-Equals Mem:<< []>> 
3682_0-NonEquals Mem: << []>> 
3682_0-Equals Sto:<< []>> 
3682_0-NonEquals Sto: << [<5,7>]>> 
3682_0-Useless: []
3682_0-Constancy: [(5, 0), (0, 0)]
3682_0-ContextAliasing: []

.....
-----
Block: 4342_1
4342_1Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'ISZERO', 'PUSH2 0x126f', 'JUMPI']>> 
4342_1-Stack size: 13 
4342_1-Equals Mem:<< []>> 
4342_1-NonEquals Mem: << []>> 
4342_1-Equals Sto:<< [<3,14>]>> 
4342_1-NonEquals Sto: << []>> 
4342_1-Useless: []
4342_1-Constancy: [(8, 0)]
4342_1-ContextAliasing: []

.....
-----
Block: 4719_1
4719_1Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'JUMP']>> 
4719_1-Stack size: 13 
4719_1-Equals Mem:<< []>> 
4719_1-NonEquals Mem: << []>> 
4719_1-Equals Sto:<< [<4,11>]>> 
4719_1-NonEquals Sto: << []>> 
4719_1-Useless: []
4719_1-Constancy: [(8, 0)]
4719_1-ContextAliasing: []

.....
-----
Block: 3907_0
3907_0Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
3907_0-Stack size: 12 
3907_0-Equals Mem:<< []>> 
3907_0-NonEquals Mem: << []>> 
3907_0-Equals Sto:<< []>> 
3907_0-NonEquals Sto: << [<2,4>]>> 
3907_0-Useless: []
3907_0-Constancy: [(7, 0)]
3907_0-ContextAliasing: []

.....
-----
Block: 3773_0
3773_0Instr:<<['PUSH2 0x0ee1', 'PUSH1 0x64', 'PUSH2 0x0e88', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0ed7', 'JUMPI']>> 
3773_0-Stack size: 10 
3773_0-Equals Mem:<< []>> 
3773_0-NonEquals Mem: << []>> 
3773_0-Equals Sto:<< []>> 
3773_0-NonEquals Sto: << [<4,6>]>> 
3773_0-Useless: []
3773_0-Constancy: [(5, 0)]
3773_0-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.3478583110263571s

*************************************************************
FILERES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Ownable;12;13;2;4;2;1;0.006592936988454312
FILERES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_SafeMath;1;1;0;1;0;0;0.000629529997240752
FILERES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke;352;994;67;284;216;22;0.7913091000518762


Aux path: /tmp/0x00//ethir_933611b79a1c40ffa273348c94407395
The files generated by EthIR are stored in the following directory: /tmp/0x00/costabs/
Block: 66
66Instr:<<['JUMPDEST', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
66-Stack size: 1 
66-Equals Mem:<< [<5,16>]>> 
66-NonEquals Mem: << [<15,5>, <15,16>]>> 
66-Equals Sto:<< []>> 
66-NonEquals Sto: << []>> 
66-Useless: []
66-Constancy: []
66-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<4,15>], 'memory_deps_noneqs': [<4,14>, <14,15>]}
{'memory_deps_eqs': [<4,15>], 'memory_deps_noneqs': [<4,14>, <14,15>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('0', 'sload0'), 1), 0)}
Storage order: [(('0', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [32, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('s(5)', 's(5)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('s(5)', 's(5)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
MEJORADO: /tmp/gasol_e34d745967084ae0904c2d63ca5f47c3/jsons/isolated_block_0_0_input.json --- (6, 5)
{1: ((('0', 'sload0'), 1), 0)}
(('0', 'sload0'), 1)
sload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload1'), 1)
mload1
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP2 MSTORE RETURN

Optimized code stored in /tmp/0x00/Ownable_66_optimized.txt
Optimality results stored in /tmp/0x00/Ownable_66_statistics.csv

Estimated initial gas: 2166
Estimated gas optimized: 2125

Estimated initial size in bytes: 30
Estimated size optimized in bytes: 34

Initial number of instructions: 25
Final number of instructions: 11

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Ownable_66;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Ownable;66;2;False;True;True;JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN;JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP2 MSTORE RETURN;2166;30;25;2125;34;11;41;-4;14;True;False;False;False;0.13912758202059194;4;0;2100;2100

Block: 114
114Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'DUP2', 'SWAP1', 'MSTORE', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
114-Stack size: 2 
114-Equals Mem:<< [<1,26>]>> 
114-NonEquals Mem: << [<6,1>, <6,26>, <13,1>, <13,26>, <17,1>, <17,26>, <22,1>, <22,26>]>> 
114-Equals Sto:<< []>> 
114-NonEquals Sto: << []>> 
114-Useless: []
114-Constancy: [(0, 64)]
114-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<1,26>], 'memory_deps_noneqs': [<1,6>, <6,26>, <1,13>, <13,26>, <1,17>, <17,26>, <1,22>, <22,26>]}
{'memory_deps_eqs': [<1,26>], 'memory_deps_noneqs': [<1,6>, <6,26>, <1,13>, <13,26>, <1,17>, <17,26>, <1,22>, <22,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '32', 'mstore'), 2), (('s(13)', '35943731656364841964516503116990081338611484598491072354577564874054038349170', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(5)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(2)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
(('64', 'mload1'), 1)
mload1
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(2)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT

Optimized code stored in /tmp/0x00/Ownable_114_optimized.txt
Optimality results stored in /tmp/0x00/Ownable_114_statistics.csv

Estimated initial gas: 93
Estimated gas optimized: 93

Estimated initial size in bytes: 75
Estimated size optimized in bytes: 75

Initial number of instructions: 32
Final number of instructions: 32

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Ownable_114;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Ownable;114;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT;93;75;32;93;75;32;0;0;0;True;False;False;False;2.131626597023569;1;3;0;0

Block: 941
941Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x02', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
941-Stack size: 4 
941-Equals Mem:<< [<12,27>, <17,31>]>> 
941-NonEquals Mem: << [<12,17>, <12,31>, <17,27>, <27,31>]>> 
941-Equals Sto:<< []>> 
941-NonEquals Sto: << []>> 
941-Useless: []
941-Constancy: []
941-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<11,26>, <16,30>], 'memory_deps_noneqs': [<11,16>, <11,30>, <16,26>, <26,30>]}
{'memory_deps_eqs': [<11,26>, <16,30>], 'memory_deps_noneqs': [<11,16>, <11,30>, <16,26>, <26,30>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{32: ((('s(3)', 'sload0'), 1), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
[OPT]: Removed mstore mstore with KECCAK
[OPT]: Removed mstore mstore with KECCAK
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '2', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(11)', 'sload0'), 1)
sload0
[(('s(11)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
SFS with rule: isolated_block_0_0_input.json
{32: ((('s(3)', 'sload0'), 1), 2)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x02 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST DUP3 DUP1 SWAP2 POP POP POP DUP2 PUSH1 0x2 DUP3 SWAP3 POP PUSH1 0x20 MSTORE SWAP1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x0 PUSH1 0x40 SWAP3 POP MSTORE PUSH1 0x0 KECCAK256 DUP2 SWAP2 POP SLOAD SWAP1 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_941_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_941_statistics.csv

Estimated initial gas: 2261
Estimated gas optimized: 2211

Estimated initial size in bytes: 42
Estimated size optimized in bytes: 55

Initial number of instructions: 36
Final number of instructions: 30

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_941;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;941;2;True;True;False;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x02 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP;JUMPDEST DUP3 DUP1 SWAP2 POP POP POP DUP2 PUSH1 0x2 DUP3 SWAP3 POP PUSH1 0x20 MSTORE SWAP1 PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x0 PUSH1 0x40 SWAP3 POP MSTORE PUSH1 0x0 KECCAK256 DUP2 SWAP2 POP SLOAD SWAP1 JUMP;2261;42;36;2211;55;30;50;-13;6;True;False;False;False;2.126131942961365;4;2;2100;2100

Block: 1565
1565Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP1', 'PUSH2 0x1694', 'JUMP']>> 
1565-Stack size: 2 
1565-Equals Mem:<< []>> 
1565-NonEquals Mem: << [<6,1>]>> 
1565-Equals Sto:<< []>> 
1565-NonEquals Sto: << []>> 
1565-Useless: []
1565-Constancy: []
1565-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP1 PUSH2 0x1694 JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f3 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1694 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_1565_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_1565_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1565;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;1565;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP1 PUSH2 0x1694 JUMP;PUSH2 0x4f3 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1694 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.02758985699620098;1;0;0;0

Block: 1607
1607Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
1607-Stack size: 2 
1607-Equals Mem:<< []>> 
1607-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
1607-Equals Sto:<< []>> 
1607-NonEquals Sto: << []>> 
1607-Useless: []
1607-Constancy: []
1607-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '23', 'mstore'), 2), (('s(10)', '52670383177537149983225730548340231168144935501260929414795948319927108108288', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_1607_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_1607_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1607;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;1607;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f3 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f3 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.0930674509727396;1;3;0;0

Block: 1831
1831Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x074b', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
1831-Stack size: 6 
1831-Equals Mem:<< [<18,6>]>> 
1831-NonEquals Mem: << []>> 
1831-Equals Sto:<< []>> 
1831-NonEquals Sto: << []>> 
1831-Useless: []
1831-Constancy: []
1831-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1831 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1962
1962Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x07ce', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
1962-Stack size: 9 
1962-Equals Mem:<< [<18,6>]>> 
1962-NonEquals Mem: << []>> 
1962-Equals Sto:<< []>> 
1962-NonEquals Sto: << []>> 
1962-Useless: []
1962-Constancy: []
1962-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1962 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2072
2072Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x083c', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
2072-Stack size: 6 
2072-Equals Mem:<< [<18,6>]>> 
2072-NonEquals Mem: << []>> 
2072-Equals Sto:<< []>> 
2072-NonEquals Sto: << []>> 
2072-Useless: []
2072-Constancy: []
2072-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2072 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2108
2108Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'SWAP1', 'SWAP2', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH1 0x13', 'SLOAD', 'AND', 'PUSH4 0xf305d719', 'SELFBALANCE', 'ADDRESS', 'PUSH2 0x0883', 'DUP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2108-Stack size: 3 
2108-Equals Mem:<< []>> 
2108-NonEquals Mem: << [<41,44>]>> 
2108-Equals Sto:<< [<3,23>]>> 
2108-NonEquals Sto: << [<3,25>, <3,48>, <23,25>, <23,48>, <25,48>]>> 
2108-Useless: []
2108-Constancy: []
2108-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<40,43>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<40,43>], 'storage_deps_eqs': [<2,22>], 'storage_deps_noneqs': [<2,24>, <2,47>, <22,24>, <22,47>, <24,47>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('20', 'sload0'), 1), 0), 22: ((('20', 's(14)', 'sstore'), 2), 1), 24: ((('19', 'sload1'), 1), 2), 47: ((('s(6)', 'sload2'), 1), 4)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(14)', 'sstore'), 2), (('19', 'sload1'), 1), (('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: [(('0', 's(22)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
AND(ADDRESS,2^160)
[RULE]: Simplification rule type 2: {'id': 'ADDRESS_0', 'opcode': '30', 'disasm': 'ADDRESS', 'inpt_sk': [], 'outpt_sk': ['s(22)'], 'push': False, 'gas': 2, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Delete rules: [{'id': 'AND_3', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(22)'], 'outpt_sk': ['s(22)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}]
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('19', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('s(6)', 'sload2'), 1)
sload2
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 22: ((('20', 's(14)', 'sstore'), 2), 1), 24: ((('19', 'sload1'), 1), 2), 47: ((('s(6)', 'sload2'), 1), 4)}
(('20', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('19', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('s(6)', 'sload2'), 1)
sload2
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x0883 DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x0883 DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_2108_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_2108_statistics.csv

Estimated initial gas: 9371
Estimated gas optimized: 9371

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 71

Initial number of instructions: 51
Final number of instructions: 51

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2108;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;2108;2;True;False;False;JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x0883 DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP;JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x0883 DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP;9371;71;51;9371;71;51;0;0;0;True;True;False;False;2.3015237619983964;8;2;9200;9200

Block: 2300
2300Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0921', 'SWAP2', 'SWAP1', 'PUSH2 0x16e4', 'JUMP']>> 
2300-Stack size: 7 
2300-Equals Mem:<< [<19,7>]>> 
2300-NonEquals Mem: << []>> 
2300-Equals Sto:<< []>> 
2300-NonEquals Sto: << []>> 
2300-Useless: []
2300-Constancy: []
2300-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<6,18>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<6,18>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(5)', 's(8)', '+'), 2), (('s(8)', '31', '+'), 2), (('s(12)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(5)', 's(11)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(5)', 's(8)', '+'), 2), (('s(8)', '31', '+'), 2), (('s(12)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(5)', 's(11)', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2300 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2422
2422Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x099a', 'SWAP2', 'SWAP1', 'PUSH2 0x170f', 'JUMP']>> 
2422-Stack size: 6 
2422-Equals Mem:<< [<18,6>]>> 
2422-NonEquals Mem: << []>> 
2422-Equals Sto:<< []>> 
2422-NonEquals Sto: << []>> 
2422-Useless: []
2422-Constancy: []
2422-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2422 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 431
431Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
431-Stack size: 2 
431-Equals Mem:<< []>> 
431-NonEquals Mem: << [<5,2>]>> 
431-Equals Sto:<< []>> 
431-NonEquals Sto: << []>> 
431-Useless: []
431-Constancy: []
431-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(0)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0162 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0162 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_431_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_431_statistics.csv

Estimated initial gas: 33
Estimated gas optimized: 33

Estimated initial size in bytes: 14
Estimated size optimized in bytes: 14

Initial number of instructions: 10
Final number of instructions: 10

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_431;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;431;2;False;True;True;JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0162 JUMP;JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0162 JUMP;33;14;10;33;14;10;0;0;0;True;False;False;False;0.017899597994983196;0;0;0;0

Block: 394
394Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
394-Stack size: 2 
394-Equals Mem:<< []>> 
394-NonEquals Mem: << [<7,2>]>> 
394-Equals Sto:<< []>> 
394-NonEquals Sto: << []>> 
394-Useless: []
394-Constancy: []
394-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('s(0)', 'iszero'), 1), (('s(5)', 'iszero'), 1)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('s(0)', 'iszero'), 1), (('s(5)', 'iszero'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0162 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0162 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_394_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_394_statistics.csv

Estimated initial gas: 39
Estimated gas optimized: 39

Estimated initial size in bytes: 16
Estimated size optimized in bytes: 16

Initial number of instructions: 12
Final number of instructions: 12

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_394;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;394;2;False;True;True;JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0162 JUMP;JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0162 JUMP;39;16;12;39;16;12;0;0;0;True;False;False;False;0.04976987902773544;0;0;0;0

Block: 783
783Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x06', 'DUP2', 'MSTORE', 'PUSH6 0x0534c4f574f5', 'PUSH1 0xd4', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x0155', 'JUMP']>> 
783-Stack size: 2 
783-Equals Mem:<< [<10,4>]>> 
783-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
783-Equals Sto:<< []>> 
783-NonEquals Sto: << []>> 
783-Useless: []
783-Constancy: []
783-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>]}
{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('212', '5724200858869', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(3)', 'mstore'), 2), (('s(2)', '6', 'mstore'), 2), (('s(6)', '37676794401163605073641547257564050457884990024308432138508845718149135335424', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3)]
Memory dep simplified: [(2, 3), (1, 2), (0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(2)', '+'), 2), (('s(2)', '32', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(2)', '+'), 2), (('s(2)', '32', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_783 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5215
5215Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5215-Stack size: 4 
5215-Equals Mem:<< []>> 
5215-NonEquals Mem: << [<12,7>, <5,7>]>> 
5215-Equals Sto:<< []>> 
5215-NonEquals Sto: << []>> 
5215-Useless: []
5215-Constancy: []
5215-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<6,11>, <4,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<6,11>, <4,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(1)', '32', 'mstore'), 2), (('s(0)', 'mload0'), 1), (('s(7)', 's(6)', 'mstore'), 2)]
Memory dep: [(0, 2)]
Memory dep simplified: [(0, 2)]
********************IT*********************
(('s(0)', 'mload0'), 1)
mload0
[(('s(0)', 'mload0'), 1), (('s(1)', '32', '+'), 2)]
{}
(('s(0)', 'mload0'), 1)
mload0
[(('s(0)', 'mload0'), 1), (('s(1)', '32', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0

Optimized code stored in /tmp/0x00/Slowpoke_5215_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_5215_statistics.csv

Estimated initial gas: 38
Estimated gas optimized: 38

Estimated initial size in bytes: 15
Estimated size optimized in bytes: 15

Initial number of instructions: 14
Final number of instructions: 14

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_5215;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;5215;2;False;True;True;JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0;JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0;38;15;14;38;15;14;0;0;0;True;False;False;False;0.1472623529843986;0;1;0;0

Block: 5239
5239Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x146e', 'JUMP']>> 
5239-Stack size: 8 
5239-Equals Mem:<< []>> 
5239-NonEquals Mem: << [<11,5>]>> 
5239-Equals Sto:<< []>> 
5239-NonEquals Sto: << []>> 
5239-Useless: []
5239-Constancy: [(2, 32), (3, 0)]
5239-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,11>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,11>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(10)', 'mload0'), 1), (('s(8)', 's(12)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(10)', 'mload0'), 1)
mload0
[(('s(3)', 's(5)', '+'), 2), (('s(5)', 's(1)', '+'), 2), (('64', 's(9)', '+'), 2), (('s(5)', 's(0)', '+'), 2), (('s(3)', 's(11)', '+'), 2), (('s(10)', 'mload0'), 1)]
{}
(('s(10)', 'mload0'), 1)
mload0
[(('s(3)', 's(5)', '+'), 2), (('s(5)', 's(1)', '+'), 2), (('64', 's(9)', '+'), 2), (('s(5)', 's(0)', '+'), 2), (('s(3)', 's(11)', '+'), 2), (('s(10)', 'mload0'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x146e JUMP

Optimized sequence (basic block per line):
DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x146e JUMP

Optimized code stored in /tmp/0x00/Slowpoke_5239_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_5239_statistics.csv

Estimated initial gas: 53
Estimated gas optimized: 53

Estimated initial size in bytes: 19
Estimated size optimized in bytes: 19

Initial number of instructions: 16
Final number of instructions: 16

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_5239;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;5239;2;False;True;True;DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x146e JUMP;DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x146e JUMP;53;19;16;53;19;16;0;0;0;True;False;False;False;0.6875319219543599;0;0;0;0

Block: 724
724Instr:<<['JUMPDEST', 'POP', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
724-Stack size: 2 
724-Equals Mem:<< []>> 
724-NonEquals Mem: << [<15,5>]>> 
724-Equals Sto:<< []>> 
724-NonEquals Sto: << []>> 
724-Useless: []
724-Constancy: []
724-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('0', 'sload0'), 1), 0)}
Storage order: [(('0', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(5)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('0', 'sload0'), 1), 0)}
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_724 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1366
1366Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP1', 'PUSH2 0x1694', 'JUMP']>> 
1366-Stack size: 2 
1366-Equals Mem:<< []>> 
1366-NonEquals Mem: << [<6,1>]>> 
1366-Equals Sto:<< []>> 
1366-NonEquals Sto: << []>> 
1366-Useless: []
1366-Constancy: []
1366-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP1 PUSH2 0x1694 JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f3 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1694 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_1366_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_1366_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1366;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;1366;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP1 PUSH2 0x1694 JUMP;PUSH2 0x4f3 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1694 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.02743408299284056;1;0;0;0

Block: 1244
1244Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP1', 'PUSH2 0x1694', 'JUMP']>> 
1244-Stack size: 2 
1244-Equals Mem:<< []>> 
1244-NonEquals Mem: << [<6,1>]>> 
1244-Equals Sto:<< []>> 
1244-NonEquals Sto: << []>> 
1244-Useless: []
1244-Constancy: []
1244-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP1 PUSH2 0x1694 JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f3 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1694 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_1244_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_1244_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1244;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;1244;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP1 PUSH2 0x1694 JUMP;PUSH2 0x4f3 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x1694 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.028092255000956357;1;0;0;0

Block: 626
626Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
626-Stack size: 3 
626-Equals Mem:<< []>> 
626-NonEquals Mem: << [<10,13>]>> 
626-Equals Sto:<< []>> 
626-NonEquals Sto: << []>> 
626-Useless: []
626-Constancy: []
626-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(2)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(4)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(2)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(2)', 'sload0'), 1), 1)}
(('s(2)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_626 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1176
1176Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'DUP1', 'ISZERO', 'PUSH2 0x04b6', 'JUMPI']>> 
1176-Stack size: 2 
1176-Equals Mem:<< []>> 
1176-NonEquals Mem: << [<5,8>]>> 
1176-Equals Sto:<< []>> 
1176-NonEquals Sto: << []>> 
1176-Useless: []
1176-Constancy: []
1176-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(3)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('s(4)', 'iszero'), 1), (('address', 'address'), 0)]
{11: ((('s(3)', 'sload0'), 1), 1)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('s(4)', 'iszero'), 1), (('address', 'address'), 0)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1176 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 549
549Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'SWAP1', 'JUMP']>> 
549-Stack size: 3 
549-Equals Mem:<< []>> 
549-NonEquals Mem: << [<10,13>]>> 
549-Equals Sto:<< []>> 
549-NonEquals Sto: << []>> 
549-Useless: []
549-Constancy: []
549-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(3)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('255', 's(4)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(3)', 'sload0'), 1), 1)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('255', 's(4)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_549 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 507
507Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0162', 'JUMP']>> 
507-Stack size: 2 
507-Equals Mem:<< []>> 
507-NonEquals Mem: << [<6,3>]>> 
507-Equals Sto:<< []>> 
507-NonEquals Sto: << []>> 
507-Useless: []
507-Constancy: []
507-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '8', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_507 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2790
2790Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2790-Stack size: 9 
2790-Equals Mem:<< []>> 
2790-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2790-Equals Sto:<< []>> 
2790-NonEquals Sto: << []>> 
2790-Useless: []
2790-Constancy: [(4, 0)]
2790-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('216', '431415980915', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '37', 'mstore'), 2), (('s(10)', '31354931781638678607228669297131712859107492772550336241160036866987736981860', 'mstore'), 2), (('s(12)', '45433405612597180762055095701412804886438245671210399661410036396145969725440', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_2790_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_2790_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 85
Estimated size optimized in bytes: 85

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2790;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;2790;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;104;85;33;104;85;33;0;0;0;True;False;False;False;2.1450148230069317;2;4;0;0

Block: 2890
2890Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2890-Stack size: 9 
2890-Equals Mem:<< []>> 
2890-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2890-Equals Sto:<< []>> 
2890-NonEquals Sto: << []>> 
2890-Useless: []
2890-Constancy: [(4, 0)]
2890-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('232', '6648691', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '35', 'mstore'), 2), (('s(10)', '31354931781638678607228669297131712859126084785867252355217498662940140921970', 'mstore'), 2), (('s(12)', '45887578820189300338443374388718498632482616163288499555830078344056365121536', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_2890_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_2890_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2890;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;2890;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.134763066947926;2;4;0;0

Block: 2981
2981Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2981-Stack size: 9 
2981-Equals Mem:<< []>> 
2981-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2981-Equals Sto:<< []>> 
2981-NonEquals Sto: << []>> 
2981-Useless: []
2981-Constancy: [(4, 0)]
2981-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('184', '2147343726488764904047', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '41', 'mstore'), 2), (('s(10)', '38196372293521921433411288587964294122161893341433871906636551770442498929184', 'mstore'), 2), (('s(12)', '52652714968805969334285930938125631089128480032472023743979857642711366500352', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_2981_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_2981_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 89
Estimated size optimized in bytes: 89

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2981;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;2981;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;104;89;33;104;89;33;0;0;0;True;False;False;False;2.1483181480434723;2;4;0;0

Block: 3119
3119Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0c6e', 'JUMPI']>> 
3119-Stack size: 10 
3119-Equals Mem:<< []>> 
3119-NonEquals Mem: << [<10,13>]>> 
3119-Equals Sto:<< []>> 
3119-NonEquals Sto: << []>> 
3119-Useless: []
3119-Constancy: [(5, 0), (0, 0)]
3119-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(8)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(16)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('255', 's(9)', 'and'), 2), (('s(7)', 'iszero'), 1), (('s(10)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(8)', 'sload0'), 1), 1)}
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('255', 's(9)', 'and'), 2), (('s(7)', 'iszero'), 1), (('s(10)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3119 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3153
3153Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3153-Stack size: 11 
3153-Equals Mem:<< []>> 
3153-NonEquals Mem: << [<11,14>]>> 
3153-Equals Sto:<< []>> 
3153-NonEquals Sto: << []>> 
3153-Useless: []
3153-Constancy: [(1, 0), (6, 0)]
3153-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3153 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3251
3251Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0d1b', 'JUMPI']>> 
3251-Stack size: 10 
3251-Equals Mem:<< []>> 
3251-NonEquals Mem: << [<4,7>]>> 
3251-Equals Sto:<< []>> 
3251-NonEquals Sto: << []>> 
3251-Useless: []
3251-Constancy: [(5, 0), (0, 0)]
3251-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(4)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(6)', 'mstore'), 2), (('32', '5', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(4)', 'sload0'), 1)
sload0
[(('number', 'number'), 0), (('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1), (('s(3)', 's(5)', 'gt'), 2), (('origin', 'origin'), 0)]
{11: ((('s(4)', 'sload0'), 1), 1)}
(('s(4)', 'sload0'), 1)
sload0
[(('number', 'number'), 0), (('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1), (('s(3)', 's(5)', 'gt'), 2), (('origin', 'origin'), 0)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3251 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3272
3272Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x3bb2b217', 'PUSH1 0xe1', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3272-Stack size: 10 
3272-Equals Mem:<< []>> 
3272-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3272-Equals Sto:<< []>> 
3272-NonEquals Sto: << []>> 
3272-Useless: []
3272-Constancy: [(5, 0), (0, 0)]
3272-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('225', '1001566743', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '36', 'mstore'), 2), (('s(10)', '35927816869378500546690657797891318559231300880027248862493917151435112082543', 'mstore'), 2), (('s(12)', '54004371949743542779021662140476226141715301406209153930508743925697374846976', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3bb2b217 PUSH1 0xe1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3bb2b217 PUSH1 0xe1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_3272_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_3272_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3272;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;3272;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3bb2b217 PUSH1 0xe1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4f6e6c79206f6e65207472616e736665722070657220626c6f636b20616c6c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x3bb2b217 PUSH1 0xe1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.1385906219948083;2;4;0;0

Block: 3355
3355Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3355-Stack size: 10 
3355-Equals Mem:<< []>> 
3355-NonEquals Mem: << [<5,8>]>> 
3355-Equals Sto:<< []>> 
3355-NonEquals Sto: << []>> 
3355-Useless: []
3355-Constancy: [(5, 0), (0, 0)]
3355-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{13: ((('s(1)', 's(2)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(1)', 's(2)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(0)', 'mstore'), 2), (('32', '5', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
{13: ((('s(1)', 's(2)', 'sstore'), 2), 1)}
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3355 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3423
3423Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3423-Stack size: 11 
3423-Equals Mem:<< []>> 
3423-NonEquals Mem: << [<11,14>]>> 
3423-Equals Sto:<< []>> 
3423-NonEquals Sto: << []>> 
3423-Useless: []
3423-Constancy: [(1, 0), (6, 0)]
3423-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '3', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('255', 's(6)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3423 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3468
3468Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3468-Stack size: 10 
3468-Equals Mem:<< []>> 
3468-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
3468-Equals Sto:<< []>> 
3468-NonEquals Sto: << []>> 
3468-Useless: []
3468-Constancy: [(5, 0), (0, 0)]
3468-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '25', 'mstore'), 2), (('s(10)', '31422294206539596639392900159971917510378963875690889976315079369673265905664', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_3468_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_3468_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3468;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;3468;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f3 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f3 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.1062342789955437;1;3;0;0

Block: 3539
3539Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP3', 'PUSH2 0x0df5', 'DUP6', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
3539-Stack size: 10 
3539-Equals Mem:<< []>> 
3539-NonEquals Mem: << [<15,18>]>> 
3539-Equals Sto:<< []>> 
3539-NonEquals Sto: << [<2,22>]>> 
3539-Useless: []
3539-Constancy: [(5, 0), (0, 0)]
3539-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<14,17>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<14,17>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<1,21>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('16', 'sload0'), 1), 0), 21: ((('s(7)', 'sload1'), 1), 2)}
Storage order: [(('16', 'sload0'), 1), (('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('16', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
(('s(7)', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('16', 'sload0'), 1), 0), 21: ((('s(7)', 'sload1'), 1), 2)}
(('16', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
(('s(7)', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3539 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3590
3590Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
3590-Stack size: 10 
3590-Equals Mem:<< []>> 
3590-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
3590-Equals Sto:<< []>> 
3590-NonEquals Sto: << []>> 
3590-Useless: []
3590-Constancy: [(5, 0), (0, 0)]
3590-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '26', 'mstore'), 2), (('s(10)', '31422294206539596639392900160051577764598592111541354583441290478353383424000', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_3590_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_3590_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3590;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;3590;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f3 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f3 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.126420415006578;1;3;0;0

Block: 4927
4927Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1433', 'JUMP']>> 
4927-Stack size: 13 
4927-Equals Mem:<< [<11,6>]>> 
4927-NonEquals Mem: << [<11,15>, <15,20>, <15,6>, <20,6>, <11,20>]>> 
4927-Equals Sto:<< []>> 
4927-NonEquals Sto: << []>> 
4927-Useless: []
4927-Constancy: [(8, 0)]
4927-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2), (('s(8)', '26', 'mstore'), 2), (('s(12)', '37714057306925736537727338326753656978887423192446994710127794316522513498112', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x1338 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x1433 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x1338 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x1433 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_4927_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_4927_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 65
Estimated size optimized in bytes: 65

Initial number of instructions: 24
Final number of instructions: 24

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4927;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;4927;2;True;True;False;JUMPDEST PUSH0 PUSH2 0x1338 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x1433 JUMP;JUMPDEST PUSH0 PUSH2 0x1338 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x1433 JUMP;73;65;24;73;65;24;0;0;0;True;False;False;False;2.1270327160018496;0;1;0;0

Block: 5179
5179Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
5179-Stack size: 20 
5179-Equals Mem:<< []>> 
5179-NonEquals Mem: << [<6,1>]>> 
5179-Equals Sto:<< []>> 
5179-NonEquals Sto: << []>> 
5179-Useless: []
5179-Constancy: [(1, 0), (15, 0), (6, 0)]
5179-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP2 SWAP1 PUSH2 0x145f JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f3 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x145f JUMP

Optimized code stored in /tmp/0x00/Slowpoke_5179_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_5179_statistics.csv

Estimated initial gas: 47
Estimated gas optimized: 41

Estimated initial size in bytes: 24
Estimated size optimized in bytes: 51

Initial number of instructions: 14
Final number of instructions: 12

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_5179;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;5179;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP2 SWAP1 PUSH2 0x145f JUMP;PUSH2 0x4f3 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x145f JUMP;47;24;14;41;51;12;6;-27;2;True;False;False;False;0.0710688199615106;1;0;0;0

Block: 6134
6134Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6134-Stack size: 22 
6134-Equals Mem:<< []>> 
6134-NonEquals Mem: << [<4,7>]>> 
6134-Equals Sto:<< []>> 
6134-NonEquals Sto: << []>> 
6134-Useless: []
6134-Constancy: [(0, 0)]
6134-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '18', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_6134 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4839
4839Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
4839-Stack size: 17 
4839-Equals Mem:<< []>> 
4839-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
4839-Equals Sto:<< []>> 
4839-NonEquals Sto: << []>> 
4839-Useless: []
4839-Constancy: [(1, 0), (12, 0)]
4839-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('248', '119', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '33', 'mstore'), 2), (('s(10)', '37714057306925736537727341711534603569002632158006504148307520321239491439727', 'mstore'), 2), (('s(12)', '53825228981408700216425575062632269666168469434418855940216611316178368856064', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_4839_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_4839_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 81
Estimated size optimized in bytes: 81

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4839;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;4839;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;104;81;33;104;81;33;0;0;0;True;False;False;False;2.120536487956997;2;4;0;0

Block: 3812
3812Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0f1a', 'JUMPI']>> 
3812-Stack size: 10 
3812-Equals Mem:<< []>> 
3812-NonEquals Mem: << [<5,8>]>> 
3812-Equals Sto:<< []>> 
3812-NonEquals Sto: << [<12,14>]>> 
3812-Useless: []
3812-Constancy: [(5, 0)]
3812-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<11,13>]}
[RULE]: Evaluate expression ('168', '1', 'shl')
{11: ((('s(15)', 'sload0'), 1), 1), 13: ((('20', 'sload1'), 1), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('20', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(17)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
(('20', 'sload1'), 1)
sload1
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
SFS with rule: isolated_block_0_0_input.json
{11: ((('s(15)', 'sload0'), 1), 1), 13: ((('20', 'sload1'), 1), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
(('20', 'sload1'), 1)
sload1
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3812 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4523
4523Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x11cf', 'SWAP2', 'SWAP1', 'PUSH2 0x16c9', 'JUMP']>> 
4523-Stack size: 10 
4523-Equals Mem:<< [<18,6>]>> 
4523-NonEquals Mem: << []>> 
4523-Equals Sto:<< []>> 
4523-NonEquals Sto: << []>> 
4523-Useless: []
4523-Constancy: []
4523-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4523 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5996
5996Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5996-Stack size: 10 
5996-Equals Mem:<< []>> 
5996-NonEquals Mem: << [<5,8>]>> 
5996-Equals Sto:<< []>> 
5996-NonEquals Sto: << []>> 
5996-Useless: []
5996-Constancy: []
5996-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '50', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_5996 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4616
4616Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x1240', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1780', 'JUMP']>> 
4616-Stack size: 6 
4616-Equals Mem:<< []>> 
4616-NonEquals Mem: << [<9,4>]>> 
4616-Equals Sto:<< []>> 
4616-NonEquals Sto: << []>> 
4616-Useless: []
4616-Constancy: []
4616-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,8>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,8>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('224', '2031798599', 'shl')
{1: ((('19', 'sload0'), 1), 0)}
Storage order: [(('19', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(13)', '54777181867431389256758088925318348688193376272078599187764269278199109648384', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('19', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('19', 'sload0'), 1), 0)}
(('19', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x1240 SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1780 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x1240 SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1780 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_4616_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_4616_statistics.csv

Estimated initial gas: 2208
Estimated gas optimized: 2208

Estimated initial size in bytes: 56
Estimated size optimized in bytes: 56

Initial number of instructions: 37
Final number of instructions: 37

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4616;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;4616;2;True;False;False;JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x1240 SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1780 JUMP;JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x1240 SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1780 JUMP;2208;56;37;2208;56;37;0;0;0;True;False;False;False;2.1974943600362167;3;0;2100;2100

Block: 6016
6016Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6016-Stack size: 15 
6016-Equals Mem:<< []>> 
6016-NonEquals Mem: << [<13,21>, <7,21>, <24,21>, <18,21>]>> 
6016-Equals Sto:<< []>> 
6016-NonEquals Sto: << []>> 
6016-Useless: []
6016-Constancy: [(4, 0)]
6016-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,20>, <6,20>, <20,23>, <17,20>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,20>, <6,20>, <20,23>, <17,20>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(5)', 's(0)', 'mstore'), 2), (('s(15)', 's(1)', 'mstore'), 2), (('s(16)', '160', 'mstore'), 2), (('s(2)', 'mload0'), 1), (('s(17)', 's(12)', 'mstore'), 2)]
Memory dep: [(2, 4), (1, 4), (0, 4), (1, 2), (0, 2), (0, 1)]
Memory dep simplified: [(2, 4), (1, 2), (0, 1)]
********************IT*********************
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', 'mload0'), 1), (('s(5)', '192', '+'), 2), (('s(2)', '32', '+'), 2), (('s(5)', '32', '+'), 2), (('s(5)', '64', '+'), 2), (('s(5)', '160', '+'), 2)]
{}
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', 'mload0'), 1), (('s(5)', '192', '+'), 2), (('s(2)', '32', '+'), 2), (('s(5)', '32', '+'), 2), (('s(5)', '64', '+'), 2), (('s(5)', '160', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0

Optimized code stored in /tmp/0x00/Slowpoke_6016_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_6016_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 102

Estimated initial size in bytes: 41
Estimated size optimized in bytes: 41

Initial number of instructions: 36
Final number of instructions: 36

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_6016;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;6016;2;True;False;False;JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0;JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0;102;41;36;102;41;36;0;0;0;True;False;False;False;2.2697533009923063;0;3;0;0

Block: 6066
6066Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x17a9', 'JUMP']>> 
6066-Stack size: 21 
6066-Equals Mem:<< []>> 
6066-NonEquals Mem: << [<9,1>]>> 
6066-Equals Sto:<< []>> 
6066-NonEquals Sto: << []>> 
6066-Useless: []
6066-Constancy: [(5, 0), (10, 0), (3, 32)]
6066-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,9>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,9>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(0)', 'mload0'), 1), (('s(2)', 's(9)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(0)', 'mload0'), 1)
mload0
[(('1', 's(4)', '+'), 2), (('s(1)', 's(2)', '+'), 2), (('s(1)', 's(0)', '+'), 2), (('s(0)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('s(0)', 'mload0'), 1)
mload0
[(('1', 's(4)', '+'), 2), (('s(1)', 's(2)', '+'), 2), (('s(1)', 's(0)', '+'), 2), (('s(0)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP5 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x01 ADD PUSH2 0x17a9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x1 ADD DUP4 DUP6 ADD SWAP5 MLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP4 DUP6 ADD SWAP4 MSTORE PUSH2 0x17a9 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_6066_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_6066_statistics.csv

Estimated initial gas: 71
Estimated gas optimized: 53

Estimated initial size in bytes: 28
Estimated size optimized in bytes: 39

Initial number of instructions: 22
Final number of instructions: 16

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_6066;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;6066;2;True;True;False;DUP5 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x01 ADD PUSH2 0x17a9 JUMP;PUSH1 0x1 ADD DUP4 DUP6 ADD SWAP5 MLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP4 DUP6 ADD SWAP4 MSTORE PUSH2 0x17a9 JUMP;71;28;22;53;39;16;18;-11;6;True;False;False;False;2.0987639640225098;2;0;0;0

Block: 3976
3976Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x0fa0', 'SWAP1', 'DUP3', 'PUSH2 0x1394', 'JUMP']>> 
3976-Stack size: 10 
3976-Equals Mem:<< []>> 
3976-NonEquals Mem: << [<4,7>]>> 
3976-Equals Sto:<< []>> 
3976-NonEquals Sto: << []>> 
3976-Useless: []
3976-Constancy: [(5, 0)]
3976-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(5)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(7)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('address', 'address'), 0)]
{11: ((('s(5)', 'sload0'), 1), 1)}
(('s(5)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('address', 'address'), 0)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3976 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4000
4000Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x0ff0', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4000-Stack size: 11 
4000-Equals Mem:<< []>> 
4000-NonEquals Mem: << [<13,19>, <5,34>, <8,34>, <5,8>, <34,13>, <34,19>, <5,19>, <8,19>]>> 
4000-Equals Sto:<< []>> 
4000-NonEquals Sto: << []>> 
4000-Useless: []
4000-Constancy: [(6, 0)]
4000-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,18>, <4,33>, <7,33>, <4,7>, <12,33>, <18,33>, <4,18>, <7,18>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,18>, <4,33>, <7,33>, <4,7>, <12,33>, <18,33>, <4,18>, <7,18>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(16)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(16)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2), (('64', 'mload0'), 1), (('s(10)', 's(3)', 'mstore'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(10)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('address', 'address'), 0), (('0', '64', 'keccak2560'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(16)', 's(4)', 'sstore'), 2), 1)}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(10)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('address', 'address'), 0), (('0', '64', 'keccak2560'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x0ff0 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x0ff0 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_4000_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_4000_statistics.csv

Estimated initial gas: 5142
Estimated gas optimized: 5142

Estimated initial size in bytes: 80
Estimated size optimized in bytes: 80

Initial number of instructions: 39
Final number of instructions: 39

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4000;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;4000;2;True;False;False;JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x0ff0 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP7 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x0ff0 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;5142;80;39;5142;80;39;0;0;0;True;False;False;False;2.2236410820041783;2;2;5000;5000

Block: 4089
4089Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x101b', 'SWAP1', 'DUP4', 'PUSH2 0x13f2', 'JUMP']>> 
4089-Stack size: 10 
4089-Equals Mem:<< []>> 
4089-NonEquals Mem: << [<11,14>]>> 
4089-Equals Sto:<< []>> 
4089-NonEquals Sto: << []>> 
4089-Useless: []
4089-Constancy: [(5, 0)]
4089-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(8)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(8)', 'sload0'), 1), 1)}
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4089 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5106
5106Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x1338', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x10be', 'JUMP']>> 
5106-Stack size: 13 
5106-Equals Mem:<< [<11,6>]>> 
5106-NonEquals Mem: << [<11,15>, <15,20>, <15,6>, <20,6>, <11,20>]>> 
5106-Equals Sto:<< []>> 
5106-NonEquals Sto: << []>> 
5106-Useless: []
5106-Constancy: []
5106-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2), (('s(8)', '30', 'mstore'), 2), (('s(12)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x1338 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x10be JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x1338 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x10be JUMP

Optimized code stored in /tmp/0x00/Slowpoke_5106_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_5106_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 65
Estimated size optimized in bytes: 65

Initial number of instructions: 24
Final number of instructions: 24

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_5106;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;5106;2;True;True;False;JUMPDEST PUSH0 PUSH2 0x1338 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x10be JUMP;JUMPDEST PUSH0 PUSH2 0x1338 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x10be JUMP;73;65;24;73;65;24;0;0;0;True;False;False;False;2.1274720689980313;0;1;0;0

Block: 4123
4123Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x105e', 'PUSH2 0x1040', 'DUP4', 'DUP4', 'PUSH2 0x13f2', 'JUMP']>> 
4123-Stack size: 11 
4123-Equals Mem:<< []>> 
4123-NonEquals Mem: << [<11,14>]>> 
4123-Equals Sto:<< []>> 
4123-NonEquals Sto: << []>> 
4123-Useless: []
4123-Constancy: [(6, 0)]
4123-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(12)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(12)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(12)', 's(4)', 'sstore'), 2), 1)}
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4123 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4160
4160Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1394', 'JUMP']>> 
4160-Stack size: 12 
4160-Equals Mem:<< []>> 
4160-NonEquals Mem: << [<11,14>]>> 
4160-Equals Sto:<< []>> 
4160-NonEquals Sto: << []>> 
4160-Useless: []
4160-Constancy: [(7, 0)]
4160-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(7)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(7)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(7)', 'sload0'), 1), 1)}
(('s(7)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4160 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5035
5035Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
5035-Stack size: 15 
5035-Equals Mem:<< []>> 
5035-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
5035-Equals Sto:<< []>> 
5035-NonEquals Sto: << []>> 
5035-Useless: []
5035-Constancy: [(1, 0), (10, 0)]
5035-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '27', 'mstore'), 2), (('s(10)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_5035_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_5035_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_5035;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;5035;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f3 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f3 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.0938672910560854;1;3;0;0

Block: 4190
4190Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP6', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x10a7', 'DUP6', 'DUP6', 'PUSH2 0x13f2', 'JUMP']>> 
4190-Stack size: 11 
4190-Equals Mem:<< []>> 
4190-NonEquals Mem: << [<12,15>]>> 
4190-Equals Sto:<< []>> 
4190-NonEquals Sto: << []>> 
4190-Useless: []
4190-Constancy: [(6, 0)]
4190-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{21: ((('s(20)', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(20)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{21: ((('s(20)', 's(4)', 'sstore'), 2), 1)}
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4190 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4297
4297Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f3', 'SWAP2', 'SWAP1', 'PUSH2 0x145f', 'JUMP']>> 
4297-Stack size: 15 
4297-Equals Mem:<< []>> 
4297-NonEquals Mem: << [<6,1>]>> 
4297-Equals Sto:<< []>> 
4297-NonEquals Sto: << []>> 
4297-Useless: []
4297-Constancy: [(1, 0)]
4297-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP2 SWAP1 PUSH2 0x145f JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f3 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x145f JUMP

Optimized code stored in /tmp/0x00/Slowpoke_4297_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_4297_statistics.csv

Estimated initial gas: 47
Estimated gas optimized: 41

Estimated initial size in bytes: 24
Estimated size optimized in bytes: 51

Initial number of instructions: 14
Final number of instructions: 12

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4297;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;4297;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f3 SWAP2 SWAP1 PUSH2 0x145f JUMP;PUSH2 0x4f3 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x145f JUMP;47;24;14;41;51;12;6;-27;2;True;False;False;False;0.07175632199505344;1;0;0;0

Block: 5499
5499Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
5499-Stack size: 7 
5499-Equals Mem:<< []>> 
5499-NonEquals Mem: << [<5,8>]>> 
5499-Equals Sto:<< []>> 
5499-NonEquals Sto: << []>> 
5499-Useless: []
5499-Constancy: []
5499-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '17', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_5499 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2499
2499Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2499-Stack size: 6 
2499-Equals Mem:<< []>> 
2499-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2499-Equals Sto:<< []>> 
2499-NonEquals Sto: << []>> 
2499-Useless: []
2499-Constancy: []
2499-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('224', '1919251315', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '36', 'mstore'), 2), (('s(10)', '31354931781638678487916134672869638484047149969764982831501014746446650500196', 'mstore'), 2), (('s(12)', '51742913093258732729005998692887265601192425265805909375210916622055285719040', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_2499_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_2499_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2499;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;2499;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.124742640997283;2;4;0;0

Block: 2597
2597Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f3', 'JUMP']>> 
2597-Stack size: 6 
2597-Equals Mem:<< []>> 
2597-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2597-Equals Sto:<< []>> 
2597-NonEquals Sto: << []>> 
2597-Useless: []
2597-Constancy: []
2597-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('240', '29555', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '34', 'mstore'), 2), (('s(10)', '31354931781638678487916134672869638488806705378895508030211234510262059168357', 'mstore'), 2), (('s(12)', '52219164999525148860834357634456956735281286572158918307284071279203377479680', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP

Optimized code stored in /tmp/0x00/Slowpoke_2597_optimized.txt
Optimality results stored in /tmp/0x00/Slowpoke_2597_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 82
Estimated size optimized in bytes: 82

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2597;0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol;Slowpoke;2597;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f3 JUMP;104;82;33;104;82;33;0;0;0;True;False;False;False;2.1354394640075043;2;4;0;0

Block: 308
308Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH8 0x536c6f77706f6b65', 'PUSH1 0xc0', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE']>> 
308-Stack size: 2 
308-Equals Mem:<< [<10,4>]>> 
308-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
308-Equals Sto:<< []>> 
308-NonEquals Sto: << []>> 
308-Useless: []
308-Constancy: []
308-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>]}
{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('192', '6011302161410911077', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(2)', 'mstore'), 2), (('s(1)', '8', 'mstore'), 2), (('s(5)', '37733555229326134880789521612992135561918685482194115172071837277715265748992', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3)]
Memory dep simplified: [(2, 3), (1, 2), (0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(1)', '+'), 2), (('s(1)', '32', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(1)', '+'), 2), (('s(1)', '32', '+'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_308 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 354
354Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
354-Stack size: 2 
354-Equals Mem:<< []>> 
354-NonEquals Mem: << []>> 
354-Equals Sto:<< []>> 
354-NonEquals Sto: << []>> 
354-Useless: []
354-Constancy: []
354-ContextAliasing: []

Block: 5878
5878Instr:<<['JUMPDEST', 'DUP4', 'MLOAD', 'SWAP3', 'POP', 'PUSH1 0x20', 'DUP5', 'ADD', 'MLOAD', 'SWAP2', 'POP', 'PUSH1 0x40', 'DUP5', 'ADD', 'MLOAD', 'SWAP1', 'POP', 'SWAP3', 'POP', 'SWAP3', 'POP', 'SWAP3', 'JUMP']>> 
5878-Stack size: 8 
5878-Equals Mem:<< []>> 
5878-NonEquals Mem: << [<2,8>, <2,14>, <8,14>]>> 
5878-Equals Sto:<< []>> 
5878-NonEquals Sto: << []>> 
5878-Useless: []
5878-Constancy: [(2, 0), (1, 0), (0, 0)]
5878-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,7>, <1,13>, <7,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,7>, <1,13>, <7,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(2)', 'mload0'), 1), (('s(8)', 'mload1'), 1), (('s(6)', 'mload2'), 1)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(8)', 'mload1'), 1)
mload1
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(6)', 'mload2'), 1)
mload2
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
{}
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(8)', 'mload1'), 1)
mload1
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(6)', 'mload2'), 1)
mload2
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_5878 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1267
1267Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1267-Stack size: 3 
1267-Equals Mem:<< []>> 
1267-NonEquals Mem: << []>> 
1267-Equals Sto:<< []>> 
1267-NonEquals Sto: << []>> 
1267-Useless: []
1267-Constancy: []
1267-ContextAliasing: []

Block: 1444
1444Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SSTORE', 'PUSH1 0x06', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'PUSH32 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf', 'PUSH2 0x05de', 'PUSH1 0x08', 'PUSH1 0x0a', 'PUSH2 0x166f', 'JUMP']>> 
1444-Stack size: 3 
1444-Equals Mem:<< []>> 
1444-NonEquals Mem: << []>> 
1444-Equals Sto:<< [<5,10>]>> 
1444-NonEquals Sto: << [<2,5>, <2,10>]>> 
1444-Useless: []
1444-Constancy: []
1444-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<4,9>], 'storage_deps_noneqs': [<1,4>, <1,9>]}
{1: ((('16', 's(0)', 'sstore'), 2), 0), 4: ((('6', 'sload0'), 1), 1), 9: ((('6', 's(5)', 'sstore'), 2), 2)}
Storage order: [(('16', 's(0)', 'sstore'), 2), (('6', 'sload0'), 1), (('6', 's(5)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('6', 'sload0'), 1)
sload0
[(('6', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(6)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('16', 's(0)', 'sstore'), 2), 0), 4: ((('6', 'sload0'), 1), 1), 9: ((('6', 's(5)', 'sstore'), 2), 2)}
(('6', 'sload0'), 1)
sload0
[(('6', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(6)', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1444 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1678
1678Instr:<<['JUMPDEST', 'PUSH1 0x13', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH20 0x7a250d5630b4cf539739df2c5dacb4c659f2488d', 'SWAP1', 'DUP2', 'OR', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH2 0x06d7', 'SWAP1', 'ADDRESS', 'SWAP1', 'PUSH2 0x06c9', 'PUSH1 0x08', 'PUSH1 0x0a', 'PUSH2 0x166f', 'JUMP']>> 
1678-Stack size: 2 
1678-Equals Mem:<< []>> 
1678-NonEquals Mem: << []>> 
1678-Equals Sto:<< [<3,17>]>> 
1678-NonEquals Sto: << []>> 
1678-Useless: []
1678-Constancy: []
1678-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<2,16>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('19', 'sload0'), 1), 0), 16: ((('19', 's(8)', 'sstore'), 2), 1)}
Storage order: [(('19', 'sload0'), 1), (('19', 's(8)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('19', 'sload0'), 1)
sload0
[(('address', 'address'), 0), (('19', 'sload0'), 1), ((115792089237316195423570985007226406215939081747436879206741300988257197096960, 's(12)', 'and'), 2), (('697323163401596485410334513241460920685086001293', 's(9)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('19', 'sload0'), 1), 0), 16: ((('19', 's(8)', 'sstore'), 2), 1)}
(('19', 'sload0'), 1)
sload0
[(('address', 'address'), 0), (('19', 'sload0'), 1), ((115792089237316195423570985007226406215939081747436879206741300988257197096960, 's(12)', 'and'), 2), (('697323163401596485410334513241460920685086001293', 's(9)', 'or'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_1678 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2458
2458Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH3 0xff00ff', 'PUSH1 0xa0', 'SHL', 'NOT', 'AND', 'PUSH3 0x010001', 'PUSH1 0xa0', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'JUMP']>> 
2458-Stack size: 3 
2458-Equals Mem:<< []>> 
2458-NonEquals Mem: << []>> 
2458-Equals Sto:<< [<4,15>]>> 
2458-NonEquals Sto: << []>> 
2458-Useless: []
2458-Constancy: []
2458-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<3,14>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '65537', 'shl')
[RULE]: Evaluate expression ('160', '16711935', 'shl')
{2: ((('20', 'sload0'), 1), 0), 14: ((('20', 's(1)', 'sstore'), 2), 1)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(1)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423546560488322440230209654367955723644191490340890530021375, 's(5)', 'and'), 2), (('95782432805755384550314892881727040259190851069018112', 's(3)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 14: ((('20', 's(1)', 'sstore'), 2), 1)}
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423546560488322440230209654367955723644191490340890530021375, 's(5)', 'and'), 2), (('95782432805755384550314892881727040259190851069018112', 's(3)', 'or'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_2458 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3682
3682Instr:<<['JUMPDEST', 'PUSH2 0x0e8e', 'PUSH1 0x64', 'PUSH2 0x0e88', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e7d', 'JUMPI']>> 
3682-Stack size: 10 
3682-Equals Mem:<< []>> 
3682-NonEquals Mem: << []>> 
3682-Equals Sto:<< []>> 
3682-NonEquals Sto: << [<5,7>]>> 
3682-Useless: []
3682-Constancy: [(5, 0), (0, 0)]
3682-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<4,6>]}
{4: ((('11', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
Storage order: [(('11', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('11', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
{4: ((('11', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
(('11', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3682 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3773
3773Instr:<<['PUSH2 0x0ee1', 'PUSH1 0x64', 'PUSH2 0x0e88', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0ed7', 'JUMPI']>> 
3773-Stack size: 10 
3773-Equals Mem:<< []>> 
3773-NonEquals Mem: << []>> 
3773-Equals Sto:<< []>> 
3773-NonEquals Sto: << [<4,6>]>> 
3773-Useless: []
3773-Constancy: [(5, 0)]
3773-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<4,6>]}
{4: ((('12', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
Storage order: [(('12', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('12', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
{4: ((('12', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
(('12', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3773 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3907
3907Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
3907-Stack size: 12 
3907-Equals Mem:<< []>> 
3907-NonEquals Mem: << []>> 
3907-Equals Sto:<< []>> 
3907-NonEquals Sto: << [<2,4>]>> 
3907-Useless: []
3907-Constancy: [(7, 0)]
3907-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<2,4>]}
{1: ((('13', 'sload0'), 1), 0), 3: ((('14', 'sload1'), 1), 1)}
Storage order: [(('13', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('13', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
{1: ((('13', 'sload0'), 1), 0), 3: ((('14', 'sload1'), 1), 1)}
(('13', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_3907 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4342
4342Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'ISZERO', 'PUSH2 0x126f', 'JUMPI']>> 
4342-Stack size: 5 
4342-Equals Mem:<< []>> 
4342-NonEquals Mem: << []>> 
4342-Equals Sto:<< [<3,14>]>> 
4342-NonEquals Sto: << []>> 
4342-Useless: []
4342-Constancy: []
4342-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<2,13>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('168', '1', 'shl')
[RULE]: Evaluate expression ('168', '255', 'shl')
{2: ((('20', 'sload0'), 1), 0), 13: ((('20', 's(4)', 'sstore'), 2), 1)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(4)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('s(0)', 'iszero'), 1), (('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(8)', 'and'), 2), (('374144419156711147060143317175368453031918731001856', 's(6)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 13: ((('20', 's(4)', 'sstore'), 2), 1)}
(('20', 'sload0'), 1)
sload0
[(('s(0)', 'iszero'), 1), (('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(8)', 'and'), 2), (('374144419156711147060143317175368453031918731001856', 's(6)', 'or'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4342 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4719
4719Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'JUMP']>> 
4719-Stack size: 5 
4719-Equals Mem:<< []>> 
4719-NonEquals Mem: << []>> 
4719-Equals Sto:<< [<4,11>]>> 
4719-NonEquals Sto: << []>> 
4719-Useless: []
4719-Constancy: []
4719-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<3,10>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('168', '255', 'shl')
{2: ((('20', 'sload0'), 1), 0), 10: ((('20', 's(1)', 'sstore'), 2), 1)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(1)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(3)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 10: ((('20', 's(1)', 'sstore'), 2), 1)}
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(3)', 'and'), 2)]
BLOCK 0x00eb6f9366335a4c00e1adefb63266d0ddddb6ea.sol_Slowpoke_4719 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
