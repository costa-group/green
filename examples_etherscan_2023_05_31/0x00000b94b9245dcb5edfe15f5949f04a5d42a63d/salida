incomplete push instruction at 68
Green Main
*************************************************************
Compilation time: 0.1826021460001357s
*************************************************************
File: Address
Build CFG: 0.0020960280089639127s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis Address
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract Address: 0
Memory read accesses ContractAddress: 0
Memory write accesses ContractAddress: 1
********************************** INIT
COMPACT CLONES: True
CONTRACT: Address
********************************** END
Memory Analysis: 0.00012079201405867934s

*************************************************************
File: PSYOP
Build CFG: 0.07882951997453347s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis PSYOP
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract PSYOP: 40
Memory read accesses ContractPSYOP: 159
Memory write accesses ContractPSYOP: 184
********************************** INIT
CONTEXT: Detected context equality 4 <slot3,0> 11 <slot3,0>
CONTEXT: Detected context equality 15 <slot3,32> 19 <slot3,32>
CONTEXT: Detected context equality 12 <slot9,0> 14 <slot9,0>
CONTEXT: Detected context equality 12 <slot9,0> 14 <slot9,0>
CONTEXT: Detected context equality 18 <slot9,32> 22 <slot9,32>
CONTEXT: Detected context equality 2 <slot20,0> 3 <slot20,0>
CONTEXT: Detected context equality 4 <slot20,64> 8 <slot20,64>
CONTEXT: Detected context equality 13 <slot22,0> 15 <slot22,0>
CONTEXT: Detected context equality 13 <slot22,0> 15 <slot22,0>
CONTEXT: Detected context equality 19 <slot22,32> 23 <slot22,32>
CONTEXT: Detected context equality 9 <slot24,0> 11 <slot24,0>
CONTEXT: Detected context equality 9 <slot24,0> 11 <slot24,0>
CONTEXT: Detected context equality 15 <slot24,32> 19 <slot24,32>
CONTEXT: Detected context equality 13 <slot28,0> 15 <slot28,0>
CONTEXT: Detected context equality 13 <slot28,0> 15 <slot28,0>
CONTEXT: Detected context equality 19 <slot28,32> 23 <slot28,32>
CONTEXT: Detected context equality 12 <slot9,0> 14 <slot9,0>
CONTEXT: Detected context equality 3 <slot15,0> 6 <slot15,0>
CONTEXT: Detected context equality 2 <slot20,0> 3 <slot20,0>
CONTEXT: Detected context equality 13 <slot22,0> 15 <slot22,0>
CONTEXT: Detected context equality 9 <slot24,0> 11 <slot24,0>
CONTEXT: Detected context equality 13 <slot28,0> 15 <slot28,0>
COMPACT CLONES: True
CONTRACT: PSYOP
-----
Block: 3737
3737Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
3737-Stack size: 4 
3737-Equals Mem:<< [<12,26>, <16,30>]>> 
3737-NonEquals Mem: << [<12,16>, <12,30>, <16,26>, <26,30>]>> 
3737-Equals Sto:<< []>> 
3737-NonEquals Sto: << []>> 
3737-Useless: []
3737-Constancy: []
3737-ContextAliasing: []

.....
-----
Block: 576
576Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'SWAP2', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
576-Stack size: 2 
576-Equals Mem:<< [<3,7>]>> 
576-NonEquals Mem: << [<6,3>, <6,7>]>> 
576-Equals Sto:<< []>> 
576-NonEquals Sto: << []>> 
576-Useless: []
576-Constancy: []
576-ContextAliasing: []

.....
-----
Block: 615
615Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
615-Stack size: 3 
615-Equals Mem:<< [<3,14>]>> 
615-NonEquals Mem: << [<13,3>, <13,14>]>> 
615-Equals Sto:<< []>> 
615-NonEquals Sto: << []>> 
615-Useless: []
615-Constancy: []
615-ContextAliasing: []

.....
-----
Block: 3594
3594Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0e01', 'JUMP']>> 
3594-Stack size: 21 
3594-Equals Mem:<< []>> 
3594-NonEquals Mem: << [<7,3>]>> 
3594-Equals Sto:<< []>> 
3594-NonEquals Sto: << []>> 
3594-Useless: []
3594-Constancy: [(15, 0)]
3594-ContextAliasing: [(16, 11), (5, 19)]

.....
-----
Block: 535
535Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'SWAP2', 'ISZERO', 'ISZERO', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
535-Stack size: 2 
535-Equals Mem:<< [<3,9>]>> 
535-NonEquals Mem: << [<8,3>, <8,9>]>> 
535-Equals Sto:<< []>> 
535-NonEquals Sto: << []>> 
535-Useless: []
535-Constancy: []
535-ContextAliasing: []

.....
-----
Block: 3267
3267Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd', 'PUSH1 0x4a', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
3267-Stack size: 2 
3267-Equals Mem:<< [<2,26>]>> 
3267-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
3267-Equals Sto:<< []>> 
3267-NonEquals Sto: << []>> 
3267-Useless: []
3267-Constancy: []
3267-ContextAliasing: []

.....
-----
Block: 2475
2475Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd', 'PUSH1 0x4a', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
2475-Stack size: 2 
2475-Equals Mem:<< [<2,26>]>> 
2475-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
2475-Equals Sto:<< []>> 
2475-NonEquals Sto: << []>> 
2475-Useless: []
2475-Constancy: []
2475-ContextAliasing: []

.....
-----
Block: 4187_2
4187_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'DUP1', 'DUP1', 'PUSH1 0x20', 'ADD', 'DUP3', 'DUP2', 'SUB', 'DUP3', 'MSTORE', 'DUP4', 'DUP2', 'DUP2', 'MLOAD', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP2', 'POP', 'DUP1', 'MLOAD', 'SWAP1', 'PUSH1 0x20', 'ADD', 'SWAP1', 'DUP1', 'DUP4', 'DUP4', 'PUSH1 0x00']>> 
4187_2-Stack size: 15 
4187_2-Equals Mem:<< [<21,29>]>> 
4187_2-NonEquals Mem: << [<6,1>, <6,21>, <6,29>, <17,1>, <17,21>, <17,29>, <23,1>, <23,21>, <23,29>, <1,21>, <1,29>]>> 
4187_2-Equals Sto:<< []>> 
4187_2-NonEquals Sto: << []>> 
4187_2-Useless: []
4187_2-Constancy: [(10, 0), (1, 0)]
4187_2-ContextAliasing: [(2, 14)]

.....
-----
Block: 4244_2
4244_2Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x108b', 'JUMP']>> 
4244_2-Stack size: 24 
4244_2-Equals Mem:<< []>> 
4244_2-NonEquals Mem: << [<7,3>]>> 
4244_2-Equals Sto:<< []>> 
4244_2-NonEquals Sto: << []>> 
4244_2-Useless: []
4244_2-Constancy: [(19, 0), (10, 0)]
4244_2-ContextAliasing: [(11, 14), (5, 22)]

.....
-----
Block: 4456_0
4456_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP3', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP4', 'SSTORE', 'SWAP1', 'DUP5', 'AND', 'DUP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'PUSH2 0x1197', 'SWAP1', 'DUP3', 'PUSH2 0x0ec2', 'JUMP']>> 
4456_0-Stack size: 10 
4456_0-Equals Mem:<< [<12,28>]>> 
4456_0-NonEquals Mem: << [<12,15>, <15,28>]>> 
4456_0-Equals Sto:<< [<23,30>]>> 
4456_0-NonEquals Sto: << []>> 
4456_0-Useless: []
4456_0-Constancy: [(5, 0)]
4456_0-ContextAliasing: []

.....
-----
Block: 3792_3
3792_3Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
3792_3-Stack size: 14 
3792_3-Equals Mem:<< [<2,24>]>> 
3792_3-NonEquals Mem: << [<7,2>, <7,24>, <12,2>, <12,24>, <17,2>, <17,24>, <22,2>, <22,24>]>> 
3792_3-Equals Sto:<< []>> 
3792_3-NonEquals Sto: << []>> 
3792_3-Useless: []
3792_3-Constancy: [(9, 0), (1, 0)]
3792_3-ContextAliasing: []

.....
-----
Block: 4503_0
4503_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP5', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP2', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH1 0x08', 'SLOAD', 'DUP5', 'DUP3', 'AND', 'SWAP2', 'AND', 'EQ', 'ISZERO', 'PUSH2 0x11d1', 'JUMPI']>> 
4503_0-Stack size: 10 
4503_0-Equals Mem:<< []>> 
4503_0-NonEquals Mem: << [<12,15>]>> 
4503_0-Equals Sto:<< []>> 
4503_0-NonEquals Sto: << [<22,24>]>> 
4503_0-Useless: []
4503_0-Constancy: [(5, 0)]
4503_0-ContextAliasing: []

.....
-----
Block: 2891
2891Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd', 'PUSH1 0x4a', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
2891-Stack size: 4 
2891-Equals Mem:<< [<2,26>]>> 
2891-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
2891-Equals Sto:<< []>> 
2891-NonEquals Sto: << []>> 
2891-Useless: []
2891-Constancy: []
2891-ContextAliasing: []

.....
-----
Block: 2961
2961Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH4 0x095ea7b3', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'ADDRESS', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP2', 'ADD', 'DUP4', 'SWAP1', 'MSTORE', 'SWAP1', 'MLOAD', 'DUP4', 'SWAP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'SWAP2', 'PUSH4 0x095ea7b3', 'SWAP2', 'PUSH1 0x44', 'DUP1', 'DUP3', 'ADD', 'SWAP3', 'PUSH1 0x20', 'SWAP3', 'SWAP1', 'SWAP2', 'SWAP1', 'DUP3', 'SWAP1', 'SUB', 'ADD', 'DUP2', 'PUSH1 0x00', 'DUP8', 'DUP1', 'EXTCODESIZE', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0be3', 'JUMPI']>> 
2961-Stack size: 4 
2961-Equals Mem:<< [<3,21>]>> 
2961-NonEquals Mem: << [<8,3>, <8,21>, <13,3>, <13,21>, <19,3>, <19,21>]>> 
2961-Equals Sto:<< []>> 
2961-NonEquals Sto: << []>> 
2961-Useless: []
2961-Constancy: []
2961-ContextAliasing: []

.....
-----
Block: 3085
3085Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x08', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH4 0x23b872dd', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'ADDRESS', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x44', 'DUP2', 'ADD', 'DUP6', 'SWAP1', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP2', 'DUP4', 'AND', 'SWAP2', 'PUSH4 0x23b872dd', 'SWAP2', 'PUSH1 0x64', 'DUP1', 'DUP3', 'ADD', 'SWAP3', 'PUSH1 0x20', 'SWAP3', 'SWAP1', 'SWAP2', 'SWAP1', 'DUP3', 'SWAP1', 'SUB', 'ADD', 'DUP2', 'PUSH1 0x00', 'DUP8', 'DUP1', 'EXTCODESIZE', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0c6b', 'JUMPI']>> 
3085-Stack size: 7 
3085-Equals Mem:<< [<7,37>]>> 
3085-NonEquals Mem: << [<12,7>, <12,37>, <17,7>, <17,37>, <29,7>, <29,37>, <35,7>, <35,37>]>> 
3085-Equals Sto:<< []>> 
3085-NonEquals Sto: << []>> 
3085-Useless: []
3085-Constancy: []
3085-ContextAliasing: []

.....
-----
Block: 2663
2663Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd', 'PUSH1 0x4a', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
2663-Stack size: 5 
2663-Equals Mem:<< [<2,26>]>> 
2663-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
2663-Equals Sto:<< []>> 
2663-NonEquals Sto: << []>> 
2663-Useless: []
2663-Constancy: []
2663-ContextAliasing: []

.....
-----
Block: 2547
2547Instr:<<['JUMPDEST', 'PUSH1 0x03', 'DUP1', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x20', 'PUSH1 0x1f', 'PUSH1 0x02', 'PUSH1 0x00', 'NOT', 'PUSH2 0x0100', 'PUSH1 0x01', 'DUP9', 'AND', 'ISZERO', 'MUL', 'ADD', 'SWAP1', 'SWAP6', 'AND', 'SWAP5', 'SWAP1', 'SWAP5', 'DIV', 'SWAP4', 'DUP5', 'ADD', 'DUP2', 'SWAP1', 'DIV', 'DUP2', 'MUL', 'DUP3', 'ADD', 'DUP2', 'ADD', 'SWAP1', 'SWAP3', 'MSTORE', 'DUP3', 'DUP2', 'MSTORE', 'PUSH1 0x60', 'SWAP4', 'SWAP1', 'SWAP3', 'SWAP1', 'SWAP2', 'DUP4', 'ADD', 'DUP3', 'DUP3', 'DUP1', 'ISZERO', 'PUSH2 0x07a2', 'JUMPI']>> 
2547-Stack size: 2 
2547-Equals Mem:<< [<40,6>]>> 
2547-NonEquals Mem: << [<40,43>, <43,6>]>> 
2547-Equals Sto:<< []>> 
2547-NonEquals Sto: << []>> 
2547-Useless: []
2547-Constancy: []
2547-ContextAliasing: []

.....
-----
Block: 361
361Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x20', 'DUP1', 'DUP3', 'MSTORE', 'DUP4', 'MLOAD', 'DUP2', 'DUP4', 'ADD', 'MSTORE', 'DUP4', 'MLOAD', 'SWAP2', 'SWAP3', 'DUP4', 'SWAP3', 'SWAP1', 'DUP4', 'ADD', 'SWAP2', 'DUP6', 'ADD', 'SWAP1', 'DUP1', 'DUP4', 'DUP4', 'PUSH1 0x00']>> 
361-Stack size: 2 
361-Equals Mem:<< []>> 
361-NonEquals Mem: << [<7,3>, <7,9>, <7,15>, <7,13>, <13,3>, <13,9>, <13,15>, <3,9>, <3,15>]>> 
361-Equals Sto:<< []>> 
361-NonEquals Sto: << []>> 
361-Useless: []
361-Constancy: []
361-ContextAliasing: []

.....
-----
Block: 404
404Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
404-Stack size: 11 
404-Equals Mem:<< []>> 
404-NonEquals Mem: << [<7,3>]>> 
404-Equals Sto:<< []>> 
404-NonEquals Sto: << []>> 
404-Useless: []
404-Constancy: []
404-ContextAliasing: [(8, 3), (6, 8)]

.....
-----
Block: 2429
2429Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2429-Stack size: 3 
2429-Equals Mem:<< []>> 
2429-NonEquals Mem: << [<10,13>]>> 
2429-Equals Sto:<< []>> 
2429-NonEquals Sto: << []>> 
2429-Useless: []
2429-Constancy: []
2429-ContextAliasing: []

.....
-----
Block: 731
731Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0xff', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
731-Stack size: 2 
731-Equals Mem:<< [<3,10>]>> 
731-NonEquals Mem: << [<9,3>, <9,10>]>> 
731-Equals Sto:<< []>> 
731-NonEquals Sto: << []>> 
731-Useless: []
731-Constancy: []
731-ContextAliasing: []

.....
-----
Block: 2167
2167Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x089a', 'SWAP1', 'DUP4', 'PUSH2 0x1011', 'JUMP']>> 
2167-Stack size: 6 
2167-Equals Mem:<< []>> 
2167-NonEquals Mem: << [<11,14>]>> 
2167-Equals Sto:<< []>> 
2167-NonEquals Sto: << []>> 
2167-Useless: []
2167-Constancy: [(0, 0)]
2167-ContextAliasing: []

.....
-----
Block: 4113
4113Instr:<<['JUMPDEST', 'PUSH1 0x00', 'PUSH2 0x0f1c', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP']>> 
4113-Stack size: 9 
4113-Equals Mem:<< [<11,6>]>> 
4113-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
4113-Equals Sto:<< []>> 
4113-NonEquals Sto: << []>> 
4113-Useless: []
4113-Constancy: [(3, 0)]
4113-ContextAliasing: []

.....
-----
Block: 4187_1
4187_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'DUP1', 'DUP1', 'PUSH1 0x20', 'ADD', 'DUP3', 'DUP2', 'SUB', 'DUP3', 'MSTORE', 'DUP4', 'DUP2', 'DUP2', 'MLOAD', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP2', 'POP', 'DUP1', 'MLOAD', 'SWAP1', 'PUSH1 0x20', 'ADD', 'SWAP1', 'DUP1', 'DUP4', 'DUP4', 'PUSH1 0x00']>> 
4187_1-Stack size: 16 
4187_1-Equals Mem:<< [<21,29>]>> 
4187_1-NonEquals Mem: << [<6,1>, <6,21>, <6,29>, <17,1>, <17,21>, <17,29>, <23,1>, <23,21>, <23,29>, <1,21>, <1,29>]>> 
4187_1-Equals Sto:<< []>> 
4187_1-NonEquals Sto: << []>> 
4187_1-Useless: []
4187_1-Constancy: [(10, 0), (6, 0), (1, 0)]
4187_1-ContextAliasing: [(2, 15)]

.....
-----
Block: 4244_1
4244_1Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x108b', 'JUMP']>> 
4244_1-Stack size: 25 
4244_1-Equals Mem:<< []>> 
4244_1-NonEquals Mem: << [<7,3>]>> 
4244_1-Equals Sto:<< []>> 
4244_1-NonEquals Sto: << []>> 
4244_1-Useless: []
4244_1-Constancy: [(19, 0), (15, 0), (10, 0)]
4244_1-ContextAliasing: [(11, 15), (5, 23)]

.....
-----
Block: 2305
2305Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH1 0x00', 'KECCAK256', 'SLOAD', 'SWAP2', 'SWAP1', 'PUSH2 0x104f', 'JUMP']>> 
2305-Stack size: 12 
2305-Equals Mem:<< []>> 
2305-NonEquals Mem: << [<8,15>]>> 
2305-Equals Sto:<< []>> 
2305-NonEquals Sto: << []>> 
2305-Useless: []
2305-Constancy: [(6, 0), (1, 0)]
2305-ContextAliasing: []

.....
-----
Block: 4187_0
4187_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'DUP1', 'DUP1', 'PUSH1 0x20', 'ADD', 'DUP3', 'DUP2', 'SUB', 'DUP3', 'MSTORE', 'DUP4', 'DUP2', 'DUP2', 'MLOAD', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP2', 'POP', 'DUP1', 'MLOAD', 'SWAP1', 'PUSH1 0x20', 'ADD', 'SWAP1', 'DUP1', 'DUP4', 'DUP4', 'PUSH1 0x00']>> 
4187_0-Stack size: 12 
4187_0-Equals Mem:<< [<21,29>]>> 
4187_0-NonEquals Mem: << [<6,1>, <6,21>, <6,29>, <17,1>, <17,21>, <17,29>, <23,1>, <23,21>, <23,29>, <1,21>, <1,29>]>> 
4187_0-Equals Sto:<< []>> 
4187_0-NonEquals Sto: << []>> 
4187_0-Useless: []
4187_0-Constancy: [(6, 0), (1, 0)]
4187_0-ContextAliasing: [(2, 11)]

.....
-----
Block: 4244_0
4244_0Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x108b', 'JUMP']>> 
4244_0-Stack size: 21 
4244_0-Equals Mem:<< []>> 
4244_0-NonEquals Mem: << [<7,3>]>> 
4244_0-Equals Sto:<< []>> 
4244_0-NonEquals Sto: << []>> 
4244_0-Useless: []
4244_0-Constancy: [(15, 0), (10, 0)]
4244_0-ContextAliasing: [(11, 11), (5, 19)]

.....
-----
Block: 2338
2338Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x0946', 'SWAP1', 'DUP4', 'PUSH2 0x0ec2', 'JUMP']>> 
2338-Stack size: 7 
2338-Equals Mem:<< []>> 
2338-NonEquals Mem: << [<12,15>]>> 
2338-Equals Sto:<< []>> 
2338-NonEquals Sto: << []>> 
2338-Useless: []
2338-Constancy: [(1, 0)]
2338-ContextAliasing: []

.....
-----
Block: 3792_2
3792_2Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
3792_2-Stack size: 11 
3792_2-Equals Mem:<< [<2,24>]>> 
3792_2-NonEquals Mem: << [<7,2>, <7,24>, <12,2>, <12,24>, <17,2>, <17,24>, <22,2>, <22,24>]>> 
3792_2-Equals Sto:<< []>> 
3792_2-NonEquals Sto: << []>> 
3792_2-Useless: []
3792_2-Constancy: [(5, 0), (1, 0)]
3792_2-ContextAliasing: []

.....
-----
Block: 2374
2374Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x096a', 'DUP5', 'DUP5', 'DUP5', 'PUSH2 0x10e6', 'JUMP']>> 
2374-Stack size: 7 
2374-Equals Mem:<< []>> 
2374-NonEquals Mem: << [<11,14>]>> 
2374-Equals Sto:<< []>> 
2374-NonEquals Sto: << []>> 
2374-Useless: []
2374-Constancy: [(1, 0)]
2374-ContextAliasing: []

.....
-----
Block: 4187
4187Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'DUP1', 'DUP1', 'PUSH1 0x20', 'ADD', 'DUP3', 'DUP2', 'SUB', 'DUP3', 'MSTORE', 'DUP4', 'DUP2', 'DUP2', 'MLOAD', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP2', 'POP', 'DUP1', 'MLOAD', 'SWAP1', 'PUSH1 0x20', 'ADD', 'SWAP1', 'DUP1', 'DUP4', 'DUP4', 'PUSH1 0x00']>> 
4187-Stack size: 16 
4187-Equals Mem:<< [<21,29>]>> 
4187-NonEquals Mem: << [<6,1>, <6,21>, <6,29>, <17,1>, <17,21>, <17,29>, <23,1>, <23,21>, <23,29>, <1,21>, <1,29>]>> 
4187-Equals Sto:<< []>> 
4187-NonEquals Sto: << []>> 
4187-Useless: []
4187-Constancy: [(10, 0), (1, 0)]
4187-ContextAliasing: [(2, 15)]

.....
-----
Block: 4244
4244Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x108b', 'JUMP']>> 
4244-Stack size: 25 
4244-Equals Mem:<< []>> 
4244-NonEquals Mem: << [<7,3>]>> 
4244-Equals Sto:<< []>> 
4244-NonEquals Sto: << []>> 
4244-Useless: []
4244-Constancy: [(19, 0), (10, 0)]
4244-ContextAliasing: [(11, 15), (5, 23)]

.....
-----
Block: 4456
4456Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP3', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP4', 'SSTORE', 'SWAP1', 'DUP5', 'AND', 'DUP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'PUSH2 0x1197', 'SWAP1', 'DUP3', 'PUSH2 0x0ec2', 'JUMP']>> 
4456-Stack size: 11 
4456-Equals Mem:<< [<12,28>]>> 
4456-NonEquals Mem: << [<12,15>, <15,28>]>> 
4456-Equals Sto:<< [<23,30>]>> 
4456-NonEquals Sto: << []>> 
4456-Useless: []
4456-Constancy: [(5, 0)]
4456-ContextAliasing: []

.....
-----
Block: 3792_1
3792_1Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
3792_1-Stack size: 15 
3792_1-Equals Mem:<< [<2,24>]>> 
3792_1-NonEquals Mem: << [<7,2>, <7,24>, <12,2>, <12,24>, <17,2>, <17,24>, <22,2>, <22,24>]>> 
3792_1-Equals Sto:<< []>> 
3792_1-NonEquals Sto: << []>> 
3792_1-Useless: []
3792_1-Constancy: [(9, 0), (1, 0)]
3792_1-ContextAliasing: []

.....
-----
Block: 4503
4503Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP5', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP2', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH1 0x08', 'SLOAD', 'DUP5', 'DUP3', 'AND', 'SWAP2', 'AND', 'EQ', 'ISZERO', 'PUSH2 0x11d1', 'JUMPI']>> 
4503-Stack size: 11 
4503-Equals Mem:<< []>> 
4503-NonEquals Mem: << [<12,15>]>> 
4503-Equals Sto:<< []>> 
4503-NonEquals Sto: << [<22,24>]>> 
4503-Useless: []
4503-Constancy: [(5, 0)]
4503-ContextAliasing: []

.....
-----
Block: 2109
2109Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x0b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH11 0x1c1b19585cd9481dd85a5d', 'PUSH1 0xaa', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
2109-Stack size: 6 
2109-Equals Mem:<< [<2,26>]>> 
2109-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
2109-Equals Sto:<< []>> 
2109-NonEquals Sto: << []>> 
2109-Useless: []
2109-Constancy: [(0, 0)]
2109-ContextAliasing: []

.....
-----
Block: 1817
1817Instr:<<['JUMPDEST', 'PUSH1 0x02', 'DUP1', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x20', 'PUSH1 0x1f', 'PUSH1 0x00', 'NOT', 'PUSH2 0x0100', 'PUSH1 0x01', 'DUP8', 'AND', 'ISZERO', 'MUL', 'ADD', 'SWAP1', 'SWAP5', 'AND', 'DUP6', 'SWAP1', 'DIV', 'SWAP4', 'DUP5', 'ADD', 'DUP2', 'SWAP1', 'DIV', 'DUP2', 'MUL', 'DUP3', 'ADD', 'DUP2', 'ADD', 'SWAP1', 'SWAP3', 'MSTORE', 'DUP3', 'DUP2', 'MSTORE', 'PUSH1 0x60', 'SWAP4', 'SWAP1', 'SWAP3', 'SWAP1', 'SWAP2', 'DUP4', 'ADD', 'DUP3', 'DUP3', 'DUP1', 'ISZERO', 'PUSH2 0x07a2', 'JUMPI']>> 
1817-Stack size: 2 
1817-Equals Mem:<< [<38,6>]>> 
1817-NonEquals Mem: << [<38,41>, <41,6>]>> 
1817-Equals Sto:<< []>> 
1817-NonEquals Sto: << []>> 
1817-Useless: []
1817-Constancy: []
1817-ContextAliasing: []

.....
-----
Block: 1604
1604Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x13', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH19 0x45524332303a207a65726f2061646472657373', 'PUSH1 0x68', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
1604-Stack size: 4 
1604-Equals Mem:<< [<2,26>]>> 
1604-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
1604-Equals Sto:<< []>> 
1604-NonEquals Sto: << []>> 
1604-Useless: []
1604-Constancy: []
1604-ContextAliasing: []

.....
-----
Block: 3792_0
3792_0Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
3792_0-Stack size: 9 
3792_0-Equals Mem:<< [<2,24>]>> 
3792_0-NonEquals Mem: << [<7,2>, <7,24>, <12,2>, <12,24>, <17,2>, <17,24>, <22,2>, <22,24>]>> 
3792_0-Equals Sto:<< []>> 
3792_0-NonEquals Sto: << []>> 
3792_0-Useless: []
3792_0-Constancy: [(1, 0)]
3792_0-ContextAliasing: []

.....
-----
Block: 1683
1683Instr:<<['JUMPDEST', 'PUSH1 0x05', 'SSTORE', 'PUSH1 0x08', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x06bb', 'SWAP1', 'DUP3', 'PUSH2 0x0ec2', 'JUMP']>> 
1683-Stack size: 5 
1683-Equals Mem:<< []>> 
1683-NonEquals Mem: << [<14,17>]>> 
1683-Equals Sto:<< []>> 
1683-NonEquals Sto: << [<2,4>, <2,21>, <4,21>]>> 
1683-Useless: []
1683-Constancy: []
1683-ContextAliasing: []

.....
-----
Block: 3792
3792Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
3792-Stack size: 9 
3792-Equals Mem:<< [<2,24>]>> 
3792-NonEquals Mem: << [<7,2>, <7,24>, <12,2>, <12,24>, <17,2>, <17,24>, <22,2>, <22,24>]>> 
3792-Equals Sto:<< []>> 
3792-NonEquals Sto: << []>> 
3792-Useless: []
3792-Constancy: [(1, 0)]
3792-ContextAliasing: []

.....
-----
Block: 4304_2
4304_2Instr:<<['JUMPDEST', 'POP', 'SWAP3', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
4304_2-Stack size: 19 
4304_2-Equals Mem:<< []>> 
4304_2-NonEquals Mem: << []>> 
4304_2-Equals Sto:<< []>> 
4304_2-NonEquals Sto: << []>> 
4304_2-Useless: []
4304_2-Constancy: [(14, 0), (5, 0)]
4304_2-ContextAliasing: [(6, 14)]

.....
-----
Block: 2757
2757Instr:<<['JUMPDEST', 'PUSH1 0x20', 'MUL', 'PUSH1 0x20', 'ADD', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP5', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'DUP5', 'DUP5', 'DUP2', 'MLOAD', 'DUP2', 'LT', 'PUSH2 0x0b0d', 'JUMPI']>> 
2757-Stack size: 8 
2757-Equals Mem:<< []>> 
2757-NonEquals Mem: << [<6,24>]>> 
2757-Equals Sto:<< []>> 
2757-NonEquals Sto: << []>> 
2757-Useless: []
2757-Constancy: []
2757-ContextAliasing: [(4, 6)]

.....
-----
Block: 464
464Instr:<<['JUMPDEST', 'POP', 'SWAP3', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
464-Stack size: 6 
464-Equals Mem:<< []>> 
464-NonEquals Mem: << []>> 
464-Equals Sto:<< []>> 
464-NonEquals Sto: << []>> 
464-Useless: []
464-Constancy: []
464-ContextAliasing: [(3, 3)]

.....
-----
Block: 4304_1
4304_1Instr:<<['JUMPDEST', 'POP', 'SWAP3', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
4304_1-Stack size: 20 
4304_1-Equals Mem:<< []>> 
4304_1-NonEquals Mem: << []>> 
4304_1-Equals Sto:<< []>> 
4304_1-NonEquals Sto: << []>> 
4304_1-Useless: []
4304_1-Constancy: [(14, 0), (10, 0), (5, 0)]
4304_1-ContextAliasing: [(6, 15)]

.....
-----
Block: 4304_0
4304_0Instr:<<['JUMPDEST', 'POP', 'SWAP3', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
4304_0-Stack size: 16 
4304_0-Equals Mem:<< []>> 
4304_0-NonEquals Mem: << []>> 
4304_0-Equals Sto:<< []>> 
4304_0-NonEquals Sto: << []>> 
4304_0-Useless: []
4304_0-Constancy: [(10, 0), (5, 0)]
4304_0-ContextAliasing: [(6, 11)]

.....
-----
Block: 4304
4304Instr:<<['JUMPDEST', 'POP', 'SWAP3', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
4304-Stack size: 20 
4304-Equals Mem:<< []>> 
4304-NonEquals Mem: << []>> 
4304-Equals Sto:<< []>> 
4304-NonEquals Sto: << []>> 
4304-Useless: []
4304-Constancy: [(14, 0), (5, 0)]
4304-ContextAliasing: [(6, 15)]

.....
-----
Block: 2055
2055Instr:<<['PUSH1 0x07', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH2 0x0877', 'JUMP']>> 
2055-Stack size: 6 
2055-Equals Mem:<< []>> 
2055-NonEquals Mem: << []>> 
2055-Equals Sto:<< [<2,19>]>> 
2055-NonEquals Sto: << []>> 
2055-Useless: []
2055-Constancy: [(0, 0)]
2055-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.079405858006794s

*************************************************************
File: SafeMath
Build CFG: 0.0006469250074587762s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis SafeMath
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract SafeMath: 0
Memory read accesses ContractSafeMath: 0
Memory write accesses ContractSafeMath: 1
********************************** INIT
COMPACT CLONES: True
CONTRACT: SafeMath
********************************** END
Memory Analysis: 0.0012280659866519272s

*************************************************************
FILERES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_Address;1;1;0;1;0;0;0.0022311460343189538
FILERES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP;235;284;34;81;65;7;0.15962242701789364
FILERES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_SafeMath;1;1;0;1;0;0;0.0018881990108639002


Aux path: /tmp/0x00//ethir_a664e1afc7464db0a960206c1b385b1d
The files generated by EthIR are stored in the following directory: /tmp/0x00/costabs/
Block: 3737
3737Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
3737-Stack size: 4 
3737-Equals Mem:<< [<12,26>, <16,30>]>> 
3737-NonEquals Mem: << [<12,16>, <12,30>, <16,26>, <26,30>]>> 
3737-Equals Sto:<< []>> 
3737-NonEquals Sto: << []>> 
3737-Useless: []
3737-Constancy: []
3737-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<11,25>, <15,29>], 'memory_deps_noneqs': [<11,15>, <11,29>, <15,25>, <25,29>]}
{'memory_deps_eqs': [<11,25>, <15,29>], 'memory_deps_noneqs': [<11,15>, <11,29>, <15,25>, <25,29>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{11: ((('0', 's(5)', 'mstore'), 2), 0), 15: ((('32', '0', 'mstore'), 2), 1), 19: ((('0', '64', 'keccak2560'), 2), 2), 25: ((('0', 's(8)', 'mstore'), 2), 3), 29: ((('32', 's(11)', 'mstore'), 2), 4), 30: ((('0', '64', 'keccak2561'), 2), 5)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '0', 'mstore'), 2), (('0', '64', 'keccak2560'), 2), (('0', 's(8)', 'mstore'), 2), (('32', 's(11)', 'mstore'), 2), (('0', '64', 'keccak2561'), 2)]
Memory dep: [(4, 5), (3, 5), (1, 5), (0, 5), (1, 4), (0, 3), (1, 2), (0, 2), (2, 3), (2, 4)]
Memory dep simplified: [(4, 5), (3, 5), (1, 2), (0, 2), (2, 3), (2, 4)]
{'memory_deps_eqs': [<11,25>, <15,29>], 'memory_deps_noneqs': [<11,15>, <11,29>, <15,25>, <25,29>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {11: ((('0', 's(5)', 'mstore'), 2), 0), 15: ((('32', '0', 'mstore'), 2), 1), 19: ((('0', '64', 'keccak2560'), 2), 2), 25: ((('0', 's(8)', 'mstore'), 2), 3), 29: ((('32', 's(11)', 'mstore'), 2), 4), 30: ((('0', '64', 'keccak2561'), 2), 5)}, 'sto_deps_int2ins': {31: ((('s(3)', 'sload0'), 1), 2)}}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(SWAP2)', 'nop(DUP3)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(DUP2)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(DUP4)', 'nop(KECCAK256)', 'nop(SWAP4)', 'nop(SWAP1)', 'nop(SWAP5)', 'nop(AND)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(MSTORE)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(SWAP1)']
********************IT*********************
[(('0', '64', 'keccak2560'), 2), (('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(3)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(1)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(5)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 0], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(8)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_3', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 's(11)'], 'mem_var': ['mem3'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
(('0', '64', 'keccak2561'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2561'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(3)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(1)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(5)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 0], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(8)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_3', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 's(11)'], 'mem_var': ['mem3'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(5)', 'mstore'), 2), (('32', '0', 'mstore'), 2), (('0', '64', 'keccak2560'), 2), (('0', 's(8)', 'mstore'), 2), (('32', 's(11)', 'mstore'), 2), (('0', '64', 'keccak2561'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(3)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(1)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(5)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 0], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(8)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_3', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 's(11)'], 'mem_var': ['mem3'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
(('0', '64', 'keccak2561'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2561'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(3)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(1)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(5)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 0], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(8)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_3', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 's(11)'], 'mem_var': ['mem3'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
SFS with rule: isolated_block_0_0_input.json
{11: ((('0', 's(5)', 'mstore'), 2), 0), 15: ((('32', '0', 'mstore'), 2), 1), 19: ((('0', '64', 'keccak2560'), 2), 2), 25: ((('0', 's(8)', 'mstore'), 2), 3), 29: ((('32', 's(11)', 'mstore'), 2), 4), 30: ((('0', '64', 'keccak2561'), 2), 5)}
{}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(SWAP2)', 'nop(DUP3)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(DUP2)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(DUP4)', 'nop(KECCAK256)', 'nop(SWAP4)', 'nop(SWAP1)', 'nop(SWAP5)', 'nop(AND)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(MSTORE)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(SWAP1)']
[(('0', '64', 'keccak2560'), 2), (('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(3)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(1)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(5)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 0], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(8)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_3', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 's(11)'], 'mem_var': ['mem3'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
(('0', '64', 'keccak2561'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2561'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(3)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(1)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(5)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 0], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(8)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_3', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 's(11)'], 'mem_var': ['mem3'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(5)', 'mstore'), 2), (('32', '0', 'mstore'), 2), (('0', '64', 'keccak2560'), 2), (('0', 's(8)', 'mstore'), 2), (('32', 's(11)', 'mstore'), 2), (('0', '64', 'keccak2561'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(3)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(1)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(5)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 0], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(8)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_3', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 's(11)'], 'mem_var': ['mem3'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
(('0', '64', 'keccak2561'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2561'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(3)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(1)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(5)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 0], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(8)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_3', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 's(11)'], 'mem_var': ['mem3'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_1', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
BLOCK 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_3737 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 576
576Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'SWAP2', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
576-Stack size: 2 
576-Equals Mem:<< [<3,7>]>> 
576-NonEquals Mem: << [<6,3>, <6,7>]>> 
576-Equals Sto:<< []>> 
576-NonEquals Sto: << []>> 
576-Useless: []
576-Constancy: []
576-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,6>], 'memory_deps_noneqs': [<2,5>, <5,6>]}
{'memory_deps_eqs': [<2,6>], 'memory_deps_noneqs': [<2,5>, <5,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{2: ((('64', 'mload0'), 1), 0), 5: ((('s(5)', 's(0)', 'mstore'), 2), 1), 6: ((('64', 'mload1'), 1), 2)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', 's(0)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [<2,6>], 'memory_deps_noneqs': [<2,5>, <5,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 5: ((('s(5)', 's(0)', 'mstore'), 2), 1), 6: ((('64', 'mload1'), 1), 2)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(SWAP2)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [32, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', 's(0)', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 5: ((('s(5)', 's(0)', 'mstore'), 2), 1), 6: ((('64', 'mload1'), 1), 2)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(SWAP2)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', 's(0)', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 SWAP2 DUP2 MSTORE RETURN

Optimized code stored in /tmp/0x00/PSYOP_576_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_576_statistics.csv

Estimated initial gas: 43
Estimated gas optimized: 19

Estimated initial size in bytes: 18
Estimated size optimized in bytes: 10

Initial number of instructions: 16
Final number of instructions: 8

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_576;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;576;2;False;True;True;JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN;JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 SWAP2 DUP2 MSTORE RETURN;43;18;16;19;10;8;24;8;8;True;False;False;False;0.049217761028558016;2;0;0;0

Block: 615
615Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
615-Stack size: 3 
615-Equals Mem:<< [<3,14>]>> 
615-NonEquals Mem: << [<13,3>, <13,14>]>> 
615-Equals Sto:<< []>> 
615-NonEquals Sto: << []>> 
615-Useless: []
615-Constancy: []
615-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,13>], 'memory_deps_noneqs': [<2,12>, <12,13>]}
{'memory_deps_eqs': [<2,13>], 'memory_deps_noneqs': [<2,12>, <12,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('64', 'mload0'), 1), 0), 12: ((('s(5)', 's(8)', 'mstore'), 2), 1), 13: ((('64', 'mload1'), 1), 2)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [<2,13>], 'memory_deps_noneqs': [<2,12>, <12,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 12: ((('s(5)', 's(8)', 'mstore'), 2), 1), 13: ((('64', 'mload1'), 1), 2)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(AND)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [32, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
MEJORADO: /tmp/gasol_181ce08b97f14aafa7d2567c98f65067/jsons/isolated_block_0_0_input.json --- (6, 5)
{2: ((('64', 'mload0'), 1), 0), 12: ((('s(5)', 's(8)', 'mstore'), 2), 1), 13: ((('64', 'mload1'), 1), 2)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(AND)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN

Optimized sequence (basic block per line):
JUMPDEST PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x40 MLOAD MSTORE PUSH1 0x20 PUSH1 0x40 MLOAD RETURN

Optimized code stored in /tmp/0x00/PSYOP_615_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_615_statistics.csv

Estimated initial gas: 64
Estimated gas optimized: 25

Estimated initial size in bytes: 28
Estimated size optimized in bytes: 33

Initial number of instructions: 23
Final number of instructions: 10

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_615;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;615;2;False;True;True;JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN;JUMPDEST PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x40 MLOAD MSTORE PUSH1 0x20 PUSH1 0x40 MLOAD RETURN;64;28;23;25;33;10;39;-5;13;True;False;False;False;0.09529321797890589;4;0;0;0

Block: 3594
3594Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0e01', 'JUMP']>> 
3594-Stack size: 21 
3594-Equals Mem:<< []>> 
3594-NonEquals Mem: << [<7,3>]>> 
3594-Equals Sto:<< []>> 
3594-NonEquals Sto: << []>> 
3594-Useless: []
3594-Constancy: [(15, 0)]
3594-ContextAliasing: [(16, 11), (5, 19)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}, 'sto_deps_int2ins': {}}
['nop(DUP2)', 'nop(DUP2)', 'nop(ADD)', 'nop(MLOAD)', 'nop(DUP4)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(PUSH 0e01)']
********************IT*********************
[]
[(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
{3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}
{}
['nop(DUP2)', 'nop(DUP2)', 'nop(ADD)', 'nop(MLOAD)', 'nop(DUP4)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(PUSH 0e01)']
[]
[(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x0e01 JUMP

Optimized sequence (basic block per line):
DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x0e01 JUMP

Optimized code stored in /tmp/0x00/PSYOP_3594_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_3594_statistics.csv

Estimated initial gas: 41
Estimated gas optimized: 41

Estimated initial size in bytes: 15
Estimated size optimized in bytes: 15

Initial number of instructions: 12
Final number of instructions: 12

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_3594;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;3594;2;False;True;True;DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x0e01 JUMP;DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x0e01 JUMP;41;15;12;41;15;12;0;0;0;True;False;False;False;0.11380543699488044;0;0;0;0

Block: 535
535Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'SWAP2', 'ISZERO', 'ISZERO', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
535-Stack size: 2 
535-Equals Mem:<< [<3,9>]>> 
535-NonEquals Mem: << [<8,3>, <8,9>]>> 
535-Equals Sto:<< []>> 
535-NonEquals Sto: << []>> 
535-Useless: []
535-Constancy: []
535-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,8>], 'memory_deps_noneqs': [<2,7>, <7,8>]}
{'memory_deps_eqs': [<2,8>], 'memory_deps_noneqs': [<2,7>, <7,8>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', 's(9)', 'mstore'), 2), 1), 8: ((('64', 'mload1'), 1), 2)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', 's(9)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [<2,8>], 'memory_deps_noneqs': [<2,7>, <7,8>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', 's(9)', 'mstore'), 2), 1), 8: ((('64', 'mload1'), 1), 2)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(SWAP2)', 'nop(ISZERO)', 'nop(ISZERO)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [32, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', 's(9)', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', 's(9)', 'mstore'), 2), 1), 8: ((('64', 'mload1'), 1), 2)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(SWAP2)', 'nop(ISZERO)', 'nop(ISZERO)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', 's(9)', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN

Optimized sequence (basic block per line):
JUMPDEST ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 SWAP2 ISZERO DUP2 MSTORE RETURN

Optimized code stored in /tmp/0x00/PSYOP_535_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_535_statistics.csv

Estimated initial gas: 49
Estimated gas optimized: 25

Estimated initial size in bytes: 20
Estimated size optimized in bytes: 12

Initial number of instructions: 18
Final number of instructions: 10

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_535;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;535;2;False;True;True;JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN;JUMPDEST ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 SWAP2 ISZERO DUP2 MSTORE RETURN;49;20;18;25;12;10;24;8;8;True;False;False;False;0.0816907649859786;2;0;0;0

Block: 3267
3267Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd', 'PUSH1 0x4a', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
3267-Stack size: 2 
3267-Equals Mem:<< [<2,26>]>> 
3267-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
3267-Equals Sto:<< []>> 
3267-NonEquals Sto: << []>> 
3267-Useless: []
3267-Constancy: []
3267-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>]}
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('74', '1878153877824463870679992348927020890009874355960961245', 'shl')
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 17)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd)', 'nop(PUSH 4a)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_2', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [100, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 17)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd)', 'nop(PUSH 4a)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd PUSH1 0x4a SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x44 PUSH32 0x4e6f7420616c6c6f77656420746f20696e746572616374000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x17 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT

Optimized code stored in /tmp/0x00/PSYOP_3267_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_3267_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 78

Estimated initial size in bytes: 70
Estimated size optimized in bytes: 99

Initial number of instructions: 35
Final number of instructions: 27

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_3267;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;3267;2;True;True;False;PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd PUSH1 0x4a SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT;PUSH1 0x44 PUSH32 0x4e6f7420616c6c6f77656420746f20696e746572616374000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x17 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT;102;70;35;78;99;27;24;-29;8;True;False;False;False;2.159169904945884;4;3;0;0

Block: 2475
2475Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd', 'PUSH1 0x4a', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
2475-Stack size: 2 
2475-Equals Mem:<< [<2,26>]>> 
2475-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
2475-Equals Sto:<< []>> 
2475-NonEquals Sto: << []>> 
2475-Useless: []
2475-Constancy: []
2475-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>]}
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('74', '1878153877824463870679992348927020890009874355960961245', 'shl')
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 17)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd)', 'nop(PUSH 4a)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_2', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [100, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 17)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd)', 'nop(PUSH 4a)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd PUSH1 0x4a SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x44 PUSH32 0x4e6f7420616c6c6f77656420746f20696e746572616374000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x17 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT

Optimized code stored in /tmp/0x00/PSYOP_2475_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_2475_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 78

Estimated initial size in bytes: 70
Estimated size optimized in bytes: 99

Initial number of instructions: 35
Final number of instructions: 27

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2475;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;2475;2;True;True;False;PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd PUSH1 0x4a SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT;PUSH1 0x44 PUSH32 0x4e6f7420616c6c6f77656420746f20696e746572616374000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x17 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT;102;70;35;78;99;27;24;-29;8;True;False;False;False;2.1580894549842924;4;3;0;0

Block: 2891
2891Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd', 'PUSH1 0x4a', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
2891-Stack size: 4 
2891-Equals Mem:<< [<2,26>]>> 
2891-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
2891-Equals Sto:<< []>> 
2891-NonEquals Sto: << []>> 
2891-Useless: []
2891-Constancy: []
2891-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>]}
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('74', '1878153877824463870679992348927020890009874355960961245', 'shl')
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 17)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd)', 'nop(PUSH 4a)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_2', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [100, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 17)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd)', 'nop(PUSH 4a)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd PUSH1 0x4a SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x44 PUSH32 0x4e6f7420616c6c6f77656420746f20696e746572616374000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x17 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT

Optimized code stored in /tmp/0x00/PSYOP_2891_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_2891_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 78

Estimated initial size in bytes: 70
Estimated size optimized in bytes: 99

Initial number of instructions: 35
Final number of instructions: 27

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2891;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;2891;2;True;True;False;PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd PUSH1 0x4a SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT;PUSH1 0x44 PUSH32 0x4e6f7420616c6c6f77656420746f20696e746572616374000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x17 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT;102;70;35;78;99;27;24;-29;8;True;False;False;False;2.1570543300476857;4;3;0;0

Block: 2961
2961Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH4 0x095ea7b3', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'ADDRESS', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP2', 'ADD', 'DUP4', 'SWAP1', 'MSTORE', 'SWAP1', 'MLOAD', 'DUP4', 'SWAP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'SWAP2', 'PUSH4 0x095ea7b3', 'SWAP2', 'PUSH1 0x44', 'DUP1', 'DUP3', 'ADD', 'SWAP3', 'PUSH1 0x20', 'SWAP3', 'SWAP1', 'SWAP2', 'SWAP1', 'DUP3', 'SWAP1', 'SUB', 'ADD', 'DUP2', 'PUSH1 0x00', 'DUP8', 'DUP1', 'EXTCODESIZE', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0be3', 'JUMPI']>> 
2961-Stack size: 4 
2961-Equals Mem:<< [<3,21>]>> 
2961-NonEquals Mem: << [<8,3>, <8,21>, <13,3>, <13,21>, <19,3>, <19,21>]>> 
2961-Equals Sto:<< []>> 
2961-NonEquals Sto: << []>> 
2961-Useless: []
2961-Constancy: []
2961-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,20>], 'memory_deps_noneqs': [<2,7>, <7,20>, <2,12>, <12,20>, <2,18>, <18,20>]}
{'memory_deps_eqs': [<2,20>], 'memory_deps_noneqs': [<2,7>, <7,20>, <2,12>, <12,20>, <2,18>, <18,20>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('224', '157198259', 'shl')
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(32)', '4238056678808933066457772256406219440718756300954938350892797929791311314944', 'mstore'), 2), 1), 12: ((('s(42)', 's(44)', 'mstore'), 2), 2), 18: ((('s(45)', 's(1)', 'mstore'), 2), 3), 20: ((('64', 'mload1'), 1), 4)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(32)', '4238056678808933066457772256406219440718756300954938350892797929791311314944', 'mstore'), 2), (('s(42)', 's(44)', 'mstore'), 2), (('s(45)', 's(1)', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(2, 3), (1, 2)]
{'memory_deps_eqs': [<2,20>], 'memory_deps_noneqs': [<2,7>, <7,20>, <2,12>, <12,20>, <2,18>, <18,20>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(32)', '4238056678808933066457772256406219440718756300954938350892797929791311314944', 'mstore'), 2), 1), 12: ((('s(42)', 's(44)', 'mstore'), 2), 2), 18: ((('s(45)', 's(1)', 'mstore'), 2), 3), 20: ((('64', 'mload1'), 1), 4)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 095ea7b3)', 'nop(PUSH e0)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(ADDRESS)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 24)', 'nop(DUP2)', 'nop(ADD)', 'nop(DUP4)', 'nop(SWAP1)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(DUP4)', 'nop(SWAP2)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP4)', 'nop(AND)', 'nop(SWAP2)', 'nop(PUSH 095ea7b3)', 'nop(SWAP2)', 'nop(PUSH 44)', 'nop(DUP1)', 'nop(DUP3)', 'nop(ADD)', 'nop(SWAP3)', 'nop(PUSH 20)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(DUP3)', 'nop(SWAP1)', 'nop(SUB)', 'nop(ADD)', 'nop(DUP2)', 'nop(PUSH 00)', 'nop(DUP8)', 'nop(DUP1)', 'nop(EXTCODESIZE)', 'nop(ISZERO)', 'nop(DUP1)', 'nop(ISZERO)', 'nop(PUSH 0be3)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(32)', 's(32)'], 'outpt_sk': ['s(31)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [0, 68], 'outpt_sk': ['s(30)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(32)', '4238056678808933066457772256406219440718756300954938350892797929791311314944', 'mstore'), 2), (('s(42)', 's(44)', 'mstore'), 2), (('s(45)', 's(1)', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(32)', '4238056678808933066457772256406219440718756300954938350892797929791311314944', 'mstore'), 2), 1), 12: ((('s(42)', 's(44)', 'mstore'), 2), 2), 18: ((('s(45)', 's(1)', 'mstore'), 2), 3), 20: ((('64', 'mload1'), 1), 4)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 095ea7b3)', 'nop(PUSH e0)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(ADDRESS)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 24)', 'nop(DUP2)', 'nop(ADD)', 'nop(DUP4)', 'nop(SWAP1)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(DUP4)', 'nop(SWAP2)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP4)', 'nop(AND)', 'nop(SWAP2)', 'nop(PUSH 095ea7b3)', 'nop(SWAP2)', 'nop(PUSH 44)', 'nop(DUP1)', 'nop(DUP3)', 'nop(ADD)', 'nop(SWAP3)', 'nop(PUSH 20)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(DUP3)', 'nop(SWAP1)', 'nop(SUB)', 'nop(ADD)', 'nop(DUP2)', 'nop(PUSH 00)', 'nop(DUP8)', 'nop(DUP1)', 'nop(EXTCODESIZE)', 'nop(ISZERO)', 'nop(DUP1)', 'nop(ISZERO)', 'nop(PUSH 0be3)']
[]
[(('64', 'mload0'), 1), (('s(32)', '4238056678808933066457772256406219440718756300954938350892797929791311314944', 'mstore'), 2), (('s(42)', 's(44)', 'mstore'), 2), (('s(45)', 's(1)', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x095ea7b3 PUSH1 0xe0 SHL DUP2 MSTORE ADDRESS PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD DUP4 SWAP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP4 AND SWAP2 PUSH4 0x095ea7b3 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x00 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x0be3 JUMPI

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x095ea7b3 PUSH1 0xe0 SHL DUP2 MSTORE ADDRESS PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD DUP4 SWAP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP4 AND SWAP2 PUSH4 0x095ea7b3 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x00 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x0be3 JUMPI

Optimized code stored in /tmp/0x00/PSYOP_2961_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_2961_statistics.csv

Estimated initial gas: 2775
Estimated gas optimized: 2775

Estimated initial size in bytes: 78
Estimated size optimized in bytes: 78

Initial number of instructions: 58
Final number of instructions: 58

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2961;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;2961;2;True;False;False;JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x095ea7b3 PUSH1 0xe0 SHL DUP2 MSTORE ADDRESS PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD DUP4 SWAP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP4 AND SWAP2 PUSH4 0x095ea7b3 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x00 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x0be3 JUMPI;JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x095ea7b3 PUSH1 0xe0 SHL DUP2 MSTORE ADDRESS PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD DUP4 SWAP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP4 AND SWAP2 PUSH4 0x095ea7b3 SWAP2 PUSH1 0x44 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x00 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x0be3 JUMPI;2775;78;58;2775;78;58;0;0;0;True;False;False;False;2.54045920498902;5;2;0;0

Block: 3085
3085Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x08', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH4 0x23b872dd', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'ADDRESS', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x44', 'DUP2', 'ADD', 'DUP6', 'SWAP1', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP2', 'DUP4', 'AND', 'SWAP2', 'PUSH4 0x23b872dd', 'SWAP2', 'PUSH1 0x64', 'DUP1', 'DUP3', 'ADD', 'SWAP3', 'PUSH1 0x20', 'SWAP3', 'SWAP1', 'SWAP2', 'SWAP1', 'DUP3', 'SWAP1', 'SUB', 'ADD', 'DUP2', 'PUSH1 0x00', 'DUP8', 'DUP1', 'EXTCODESIZE', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0c6b', 'JUMPI']>> 
3085-Stack size: 7 
3085-Equals Mem:<< [<7,37>]>> 
3085-NonEquals Mem: << [<12,7>, <12,37>, <17,7>, <17,37>, <29,7>, <29,37>, <35,7>, <35,37>]>> 
3085-Equals Sto:<< []>> 
3085-NonEquals Sto: << []>> 
3085-Useless: []
3085-Constancy: []
3085-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<6,36>], 'memory_deps_noneqs': [<6,11>, <11,36>, <6,16>, <16,36>, <6,28>, <28,36>, <6,34>, <34,36>]}
{'memory_deps_eqs': [<6,36>], 'memory_deps_noneqs': [<6,11>, <11,36>, <6,16>, <16,36>, <6,28>, <28,36>, <6,34>, <34,36>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('224', '599290589', 'shl')
{5: ((('64', 'mload0'), 1), 0), 10: ((('s(31)', '16156842317565293874272834530371880720966471053262404558597773956279093428224', 'mstore'), 2), 1), 15: ((('s(41)', 's(43)', 'mstore'), 2), 2), 27: ((('s(44)', 's(46)', 'mstore'), 2), 3), 34: ((('s(50)', 's(0)', 'mstore'), 2), 4), 36: ((('64', 'mload1'), 1), 5)}
Storage order: [(('8', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(31)', '16156842317565293874272834530371880720966471053262404558597773956279093428224', 'mstore'), 2), (('s(41)', 's(43)', 'mstore'), 2), (('s(44)', 's(46)', 'mstore'), 2), (('s(50)', 's(0)', 'mstore'), 2), (('64', 'mload1'), 1)]
Memory dep: [(3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3), (0, 4)]
Memory dep simplified: [(3, 4), (3, 5), (2, 3), (1, 2), (0, 1)]
{'memory_deps_eqs': [<6,36>], 'memory_deps_noneqs': [<6,11>, <11,36>, <6,16>, <16,36>, <6,28>, <28,36>, <6,34>, <34,36>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {5: ((('64', 'mload0'), 1), 0), 10: ((('s(31)', '16156842317565293874272834530371880720966471053262404558597773956279093428224', 'mstore'), 2), 1), 15: ((('s(41)', 's(43)', 'mstore'), 2), 2), 27: ((('s(44)', 's(46)', 'mstore'), 2), 3), 34: ((('s(50)', 's(0)', 'mstore'), 2), 4), 36: ((('64', 'mload1'), 1), 5)}, 'sto_deps_int2ins': {2: ((('8', 'sload0'), 1), 0)}}
['nop(POP)', 'nop(POP)', 'nop(PUSH 08)', 'nop(SLOAD)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 23b872dd)', 'nop(PUSH e0)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(ADDRESS)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(SWAP3)', 'nop(DUP4)', 'nop(AND)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 44)', 'nop(DUP2)', 'nop(ADD)', 'nop(DUP6)', 'nop(SWAP1)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP2)', 'nop(DUP4)', 'nop(AND)', 'nop(SWAP2)', 'nop(PUSH 23b872dd)', 'nop(SWAP2)', 'nop(PUSH 64)', 'nop(DUP1)', 'nop(DUP3)', 'nop(ADD)', 'nop(SWAP3)', 'nop(PUSH 20)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(DUP3)', 'nop(SWAP1)', 'nop(SUB)', 'nop(ADD)', 'nop(DUP2)', 'nop(PUSH 00)', 'nop(DUP8)', 'nop(DUP1)', 'nop(EXTCODESIZE)', 'nop(ISZERO)', 'nop(DUP1)', 'nop(ISZERO)', 'nop(PUSH 0c6b)']
********************IT*********************
[(('8', 'sload0'), 1)]
[(('64', 'mload0'), 1), (('s(31)', '16156842317565293874272834530371880720966471053262404558597773956279093428224', 'mstore'), 2), (('s(41)', 's(43)', 'mstore'), 2), (('s(44)', 's(46)', 'mstore'), 2), (('s(50)', 's(0)', 'mstore'), 2), (('64', 'mload1'), 1)]
SFS with rule: isolated_block_0_0_input.json
{5: ((('64', 'mload0'), 1), 0), 10: ((('s(31)', '16156842317565293874272834530371880720966471053262404558597773956279093428224', 'mstore'), 2), 1), 15: ((('s(41)', 's(43)', 'mstore'), 2), 2), 27: ((('s(44)', 's(46)', 'mstore'), 2), 3), 34: ((('s(50)', 's(0)', 'mstore'), 2), 4), 36: ((('64', 'mload1'), 1), 5)}
{}
['nop(POP)', 'nop(POP)', 'nop(PUSH 08)', 'nop(SLOAD)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 23b872dd)', 'nop(PUSH e0)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(ADDRESS)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(SWAP3)', 'nop(DUP4)', 'nop(AND)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 44)', 'nop(DUP2)', 'nop(ADD)', 'nop(DUP6)', 'nop(SWAP1)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP2)', 'nop(DUP4)', 'nop(AND)', 'nop(SWAP2)', 'nop(PUSH 23b872dd)', 'nop(SWAP2)', 'nop(PUSH 64)', 'nop(DUP1)', 'nop(DUP3)', 'nop(ADD)', 'nop(SWAP3)', 'nop(PUSH 20)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(DUP3)', 'nop(SWAP1)', 'nop(SUB)', 'nop(ADD)', 'nop(DUP2)', 'nop(PUSH 00)', 'nop(DUP8)', 'nop(DUP1)', 'nop(EXTCODESIZE)', 'nop(ISZERO)', 'nop(DUP1)', 'nop(ISZERO)', 'nop(PUSH 0c6b)']
[(('8', 'sload0'), 1)]
[(('64', 'mload0'), 1), (('s(31)', '16156842317565293874272834530371880720966471053262404558597773956279093428224', 'mstore'), 2), (('s(41)', 's(43)', 'mstore'), 2), (('s(44)', 's(46)', 'mstore'), 2), (('s(50)', 's(0)', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST POP POP PUSH1 0x08 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23b872dd PUSH1 0xe0 SHL DUP2 MSTORE ADDRESS PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP2 DUP4 AND SWAP2 PUSH4 0x23b872dd SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x00 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x0c6b JUMPI

Optimized sequence (basic block per line):
JUMPDEST POP POP PUSH1 0x08 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23b872dd PUSH1 0xe0 SHL DUP2 MSTORE ADDRESS PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP2 DUP4 AND SWAP2 PUSH4 0x23b872dd SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x00 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x0c6b JUMPI

Optimized code stored in /tmp/0x00/PSYOP_3085_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_3085_statistics.csv

Estimated initial gas: 4900
Estimated gas optimized: 4900

Estimated initial size in bytes: 90
Estimated size optimized in bytes: 90

Initial number of instructions: 68
Final number of instructions: 68

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_3085;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;3085;2;True;False;False;JUMPDEST POP POP PUSH1 0x08 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23b872dd PUSH1 0xe0 SHL DUP2 MSTORE ADDRESS PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP2 DUP4 AND SWAP2 PUSH4 0x23b872dd SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x00 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x0c6b JUMPI;JUMPDEST POP POP PUSH1 0x08 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x23b872dd PUSH1 0xe0 SHL DUP2 MSTORE ADDRESS PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP2 DUP4 AND SWAP2 PUSH4 0x23b872dd SWAP2 PUSH1 0x64 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x00 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x0c6b JUMPI;4900;90;68;4900;90;68;0;0;0;True;False;False;False;3.0423948919633403;3;5;2100;2100

Block: 2663
2663Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd', 'PUSH1 0x4a', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
2663-Stack size: 5 
2663-Equals Mem:<< [<2,26>]>> 
2663-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
2663-Equals Sto:<< []>> 
2663-NonEquals Sto: << []>> 
2663-Useless: []
2663-Constancy: []
2663-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>]}
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('74', '1878153877824463870679992348927020890009874355960961245', 'shl')
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 17)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd)', 'nop(PUSH 4a)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_2', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [100, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '23', 'mstore'), 2), 3), 24: ((('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 17)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd)', 'nop(PUSH 4a)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '23', 'mstore'), 2), (('s(13)', '35477323689239595171815221499934181480842893543290694318915082413366396846080', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd PUSH1 0x4a SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x44 PUSH32 0x4e6f7420616c6c6f77656420746f20696e746572616374000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x17 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT

Optimized code stored in /tmp/0x00/PSYOP_2663_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_2663_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 78

Estimated initial size in bytes: 70
Estimated size optimized in bytes: 99

Initial number of instructions: 35
Final number of instructions: 27

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2663;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;2663;2;True;True;False;PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x139bdd08185b1b1bddd959081d1bc81a5b9d195c9858dd PUSH1 0x4a SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT;PUSH1 0x44 PUSH32 0x4e6f7420616c6c6f77656420746f20696e746572616374000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x17 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT;102;70;35;78;99;27;24;-29;8;True;False;False;False;2.1575675739441067;4;3;0;0

Block: 2547
2547Instr:<<['JUMPDEST', 'PUSH1 0x03', 'DUP1', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x20', 'PUSH1 0x1f', 'PUSH1 0x02', 'PUSH1 0x00', 'NOT', 'PUSH2 0x0100', 'PUSH1 0x01', 'DUP9', 'AND', 'ISZERO', 'MUL', 'ADD', 'SWAP1', 'SWAP6', 'AND', 'SWAP5', 'SWAP1', 'SWAP5', 'DIV', 'SWAP4', 'DUP5', 'ADD', 'DUP2', 'SWAP1', 'DIV', 'DUP2', 'MUL', 'DUP3', 'ADD', 'DUP2', 'ADD', 'SWAP1', 'SWAP3', 'MSTORE', 'DUP3', 'DUP2', 'MSTORE', 'PUSH1 0x60', 'SWAP4', 'SWAP1', 'SWAP3', 'SWAP1', 'SWAP2', 'DUP4', 'ADD', 'DUP3', 'DUP3', 'DUP1', 'ISZERO', 'PUSH2 0x07a2', 'JUMPI']>> 
2547-Stack size: 2 
2547-Equals Mem:<< [<40,6>]>> 
2547-NonEquals Mem: << [<40,43>, <43,6>]>> 
2547-Equals Sto:<< []>> 
2547-NonEquals Sto: << []>> 
2547-Useless: []
2547-Constancy: []
2547-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,39>], 'memory_deps_noneqs': [<39,42>, <5,42>]}
{'memory_deps_eqs': [<5,39>], 'memory_deps_noneqs': [<39,42>, <5,42>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{5: ((('64', 'mload0'), 1), 0), 39: ((('64', 's(37)', 'mstore'), 2), 1), 42: ((('s(27)', 's(9)', 'mstore'), 2), 2)}
Storage order: [(('3', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(37)', 'mstore'), 2), (('s(27)', 's(9)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
{'memory_deps_eqs': [<5,39>], 'memory_deps_noneqs': [<39,42>, <5,42>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {5: ((('64', 'mload0'), 1), 0), 39: ((('64', 's(37)', 'mstore'), 2), 1), 42: ((('s(27)', 's(9)', 'mstore'), 2), 2)}, 'sto_deps_int2ins': {2: ((('3', 'sload0'), 1), 0)}}
['nop(PUSH 03)', 'nop(DUP1)', 'nop(SLOAD)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 20)', 'nop(PUSH 1f)', 'nop(PUSH 02)', 'nop(PUSH 00)', 'nop(NOT)', 'nop(PUSH 0100)', 'nop(PUSH 01)', 'nop(DUP9)', 'nop(AND)', 'nop(ISZERO)', 'nop(MUL)', 'nop(ADD)', 'nop(SWAP1)', 'nop(SWAP6)', 'nop(AND)', 'nop(SWAP5)', 'nop(SWAP1)', 'nop(SWAP5)', 'nop(DIV)', 'nop(SWAP4)', 'nop(DUP5)', 'nop(ADD)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(DIV)', 'nop(DUP2)', 'nop(MUL)', 'nop(DUP3)', 'nop(ADD)', 'nop(DUP2)', 'nop(ADD)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(MSTORE)', 'nop(DUP3)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 60)', 'nop(SWAP4)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(DUP4)', 'nop(ADD)', 'nop(DUP3)', 'nop(DUP3)', 'nop(DUP1)', 'nop(ISZERO)', 'nop(PUSH 07a2)']
********************IT*********************
[(('3', 'sload0'), 1)]
[(('64', 'mload0'), 1), (('64', 's(37)', 'mstore'), 2), (('s(27)', 's(9)', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{5: ((('64', 'mload0'), 1), 0), 39: ((('64', 's(37)', 'mstore'), 2), 1), 42: ((('s(27)', 's(9)', 'mstore'), 2), 2)}
{}
['nop(PUSH 03)', 'nop(DUP1)', 'nop(SLOAD)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 20)', 'nop(PUSH 1f)', 'nop(PUSH 02)', 'nop(PUSH 00)', 'nop(NOT)', 'nop(PUSH 0100)', 'nop(PUSH 01)', 'nop(DUP9)', 'nop(AND)', 'nop(ISZERO)', 'nop(MUL)', 'nop(ADD)', 'nop(SWAP1)', 'nop(SWAP6)', 'nop(AND)', 'nop(SWAP5)', 'nop(SWAP1)', 'nop(SWAP5)', 'nop(DIV)', 'nop(SWAP4)', 'nop(DUP5)', 'nop(ADD)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(DIV)', 'nop(DUP2)', 'nop(MUL)', 'nop(DUP3)', 'nop(ADD)', 'nop(DUP2)', 'nop(ADD)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(MSTORE)', 'nop(DUP3)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 60)', 'nop(SWAP4)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(DUP4)', 'nop(ADD)', 'nop(DUP3)', 'nop(DUP3)', 'nop(DUP1)', 'nop(ISZERO)', 'nop(PUSH 07a2)']
[(('3', 'sload0'), 1)]
[(('64', 'mload0'), 1), (('64', 's(37)', 'mstore'), 2), (('s(27)', 's(9)', 'mstore'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x03 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1f PUSH1 0x02 PUSH1 0x00 NOT PUSH2 0x0100 PUSH1 0x01 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x07a2 JUMPI

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x03 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1f PUSH1 0x02 PUSH1 0x00 NOT PUSH2 0x0100 PUSH1 0x01 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x07a2 JUMPI

Optimized code stored in /tmp/0x00/PSYOP_2547_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_2547_statistics.csv

Estimated initial gas: 2284
Estimated gas optimized: 2284

Estimated initial size in bytes: 70
Estimated size optimized in bytes: 70

Initial number of instructions: 58
Final number of instructions: 58

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2547;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;2547;2;True;False;False;JUMPDEST PUSH1 0x03 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1f PUSH1 0x02 PUSH1 0x00 NOT PUSH2 0x0100 PUSH1 0x01 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x07a2 JUMPI;JUMPDEST PUSH1 0x03 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1f PUSH1 0x02 PUSH1 0x00 NOT PUSH2 0x0100 PUSH1 0x01 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x07a2 JUMPI;2284;70;58;2284;70;58;0;0;0;True;False;False;False;2.6846079190145247;5;1;2100;2100

Block: 361
361Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x20', 'DUP1', 'DUP3', 'MSTORE', 'DUP4', 'MLOAD', 'DUP2', 'DUP4', 'ADD', 'MSTORE', 'DUP4', 'MLOAD', 'SWAP2', 'SWAP3', 'DUP4', 'SWAP3', 'SWAP1', 'DUP4', 'ADD', 'SWAP2', 'DUP6', 'ADD', 'SWAP1', 'DUP1', 'DUP4', 'DUP4', 'PUSH1 0x00']>> 
361-Stack size: 2 
361-Equals Mem:<< []>> 
361-NonEquals Mem: << [<7,3>, <7,9>, <7,15>, <7,13>, <13,3>, <13,9>, <13,15>, <3,9>, <3,15>]>> 
361-Equals Sto:<< []>> 
361-NonEquals Sto: << []>> 
361-Useless: []
361-Constancy: []
361-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,6>, <6,8>, <6,14>, <6,12>, <2,12>, <8,12>, <12,14>, <2,8>, <2,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,6>, <6,8>, <6,14>, <6,12>, <2,12>, <8,12>, <12,14>, <2,8>, <2,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{2: ((('64', 'mload0'), 1), 0), 6: ((('s(12)', '32', 'mstore'), 2), 1), 8: ((('s(0)', 'mload1'), 1), 2), 12: ((('s(21)', 's(23)', 'mstore'), 2), 3), 14: ((('s(0)', 'mload2'), 1), 4)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(12)', '32', 'mstore'), 2), (('s(0)', 'mload1'), 1), (('s(21)', 's(23)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,6>, <6,8>, <6,14>, <6,12>, <2,12>, <8,12>, <12,14>, <2,8>, <2,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 6: ((('s(12)', '32', 'mstore'), 2), 1), 8: ((('s(0)', 'mload1'), 1), 2), 12: ((('s(21)', 's(23)', 'mstore'), 2), 3), 14: ((('s(0)', 'mload2'), 1), 4)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 20)', 'nop(DUP1)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(DUP4)', 'nop(MLOAD)', 'nop(DUP2)', 'nop(DUP4)', 'nop(ADD)', 'nop(MSTORE)', 'nop(DUP4)', 'nop(MLOAD)', 'nop(SWAP2)', 'nop(SWAP3)', 'nop(DUP4)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(DUP4)', 'nop(ADD)', 'nop(SWAP2)', 'nop(DUP6)', 'nop(ADD)', 'nop(SWAP1)', 'nop(DUP1)', 'nop(DUP4)', 'nop(DUP4)', 'nop(PUSH 00)']
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(12)', '32', 'mstore'), 2), (('s(0)', 'mload1'), 1), (('s(21)', 's(23)', 'mstore'), 2)]
{2: ((('64', 'mload0'), 1), 0), 6: ((('s(12)', '32', 'mstore'), 2), 1), 8: ((('s(0)', 'mload1'), 1), 2), 12: ((('s(21)', 's(23)', 'mstore'), 2), 3), 14: ((('s(0)', 'mload2'), 1), 4)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 20)', 'nop(DUP1)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(DUP4)', 'nop(MLOAD)', 'nop(DUP2)', 'nop(DUP4)', 'nop(ADD)', 'nop(MSTORE)', 'nop(DUP4)', 'nop(MLOAD)', 'nop(SWAP2)', 'nop(SWAP3)', 'nop(DUP4)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(DUP4)', 'nop(ADD)', 'nop(SWAP2)', 'nop(DUP6)', 'nop(ADD)', 'nop(SWAP1)', 'nop(DUP1)', 'nop(DUP4)', 'nop(DUP4)', 'nop(PUSH 00)']
[]
[(('64', 'mload0'), 1), (('s(12)', '32', 'mstore'), 2), (('s(0)', 'mload1'), 1), (('s(21)', 's(23)', 'mstore'), 2), (('s(0)', 'mload2'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00

Optimized code stored in /tmp/0x00/PSYOP_361_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_361_statistics.csv

Estimated initial gas: 91
Estimated gas optimized: 91

Estimated initial size in bytes: 34
Estimated size optimized in bytes: 34

Initial number of instructions: 31
Final number of instructions: 31

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_361;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;361;2;True;False;False;JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00;JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00;91;34;31;91;34;31;0;0;0;True;False;False;False;2.159369582950603;0;0;0;0

Block: 404
404Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x018b', 'JUMP']>> 
404-Stack size: 11 
404-Equals Mem:<< []>> 
404-NonEquals Mem: << [<7,3>]>> 
404-Equals Sto:<< []>> 
404-NonEquals Sto: << []>> 
404-Useless: []
404-Constancy: []
404-ContextAliasing: [(8, 3), (6, 8)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}, 'sto_deps_int2ins': {}}
['nop(DUP2)', 'nop(DUP2)', 'nop(ADD)', 'nop(MLOAD)', 'nop(DUP4)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(PUSH 018b)']
********************IT*********************
[]
[(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
{3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}
{}
['nop(DUP2)', 'nop(DUP2)', 'nop(ADD)', 'nop(MLOAD)', 'nop(DUP4)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(PUSH 018b)']
[]
[(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP

Optimized sequence (basic block per line):
DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP

Optimized code stored in /tmp/0x00/PSYOP_404_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_404_statistics.csv

Estimated initial gas: 41
Estimated gas optimized: 41

Estimated initial size in bytes: 15
Estimated size optimized in bytes: 15

Initial number of instructions: 12
Final number of instructions: 12

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_404;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;404;2;False;True;True;DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP;DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x018b JUMP;41;15;12;41;15;12;0;0;0;True;False;False;False;0.1134287990280427;0;0;0;0

Block: 2429
2429Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2429-Stack size: 3 
2429-Equals Mem:<< []>> 
2429-NonEquals Mem: << [<10,13>]>> 
2429-Equals Sto:<< []>> 
2429-NonEquals Sto: << []>> 
2429-Useless: []
2429-Constancy: []
2429-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{9: ((('0', 's(4)', 'mstore'), 2), 0), 12: ((('32', '1', 'mstore'), 2), 1), 15: ((('0', '64', 'keccak2560'), 2), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(4)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {9: ((('0', 's(4)', 'mstore'), 2), 0), 12: ((('32', '1', 'mstore'), 2), 1), 15: ((('0', '64', 'keccak2560'), 2), 2)}, 'sto_deps_int2ins': {16: ((('s(2)', 'sload0'), 1), 1)}}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(SWAP1)']
********************IT*********************
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(2)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(2)'], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(4)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(2)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(4)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(2)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(2)'], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(4)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(2)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
SFS with rule: isolated_block_0_0_input.json
{9: ((('0', 's(4)', 'mstore'), 2), 0), 12: ((('32', '1', 'mstore'), 2), 1), 15: ((('0', '64', 'keccak2560'), 2), 2)}
{}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(SWAP1)']
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(2)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(2)'], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(4)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(2)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(4)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(2)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(2)'], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(4)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(2)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
BLOCK 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2429 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 731
731Instr:<<['JUMPDEST', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0xff', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
731-Stack size: 2 
731-Equals Mem:<< [<3,10>]>> 
731-NonEquals Mem: << [<9,3>, <9,10>]>> 
731-Equals Sto:<< []>> 
731-NonEquals Sto: << []>> 
731-Useless: []
731-Constancy: []
731-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,9>], 'memory_deps_noneqs': [<2,8>, <8,9>]}
{'memory_deps_eqs': [<2,9>], 'memory_deps_noneqs': [<2,8>, <8,9>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{2: ((('64', 'mload0'), 1), 0), 8: ((('s(5)', 's(8)', 'mstore'), 2), 1), 9: ((('64', 'mload1'), 1), 2)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [<2,9>], 'memory_deps_noneqs': [<2,8>, <8,9>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 8: ((('s(5)', 's(8)', 'mstore'), 2), 1), 9: ((('64', 'mload1'), 1), 2)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH ff)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(AND)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [32, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 8: ((('s(5)', 's(8)', 'mstore'), 2), 1), 9: ((('64', 'mload1'), 1), 2)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH ff)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(AND)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xff SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0xff AND PUSH1 0x40 MLOAD MSTORE PUSH1 0x20 PUSH1 0x40 MLOAD RETURN

Optimized code stored in /tmp/0x00/PSYOP_731_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_731_statistics.csv

Estimated initial gas: 52
Estimated gas optimized: 25

Estimated initial size in bytes: 22
Estimated size optimized in bytes: 14

Initial number of instructions: 19
Final number of instructions: 10

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_731;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;731;2;False;True;True;JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xff SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN;JUMPDEST PUSH1 0xff AND PUSH1 0x40 MLOAD MSTORE PUSH1 0x20 PUSH1 0x40 MLOAD RETURN;52;22;19;25;14;10;27;8;9;True;False;False;False;0.0949038999970071;2;0;0;0

Block: 2167
2167Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x089a', 'SWAP1', 'DUP4', 'PUSH2 0x1011', 'JUMP']>> 
2167-Stack size: 6 
2167-Equals Mem:<< []>> 
2167-NonEquals Mem: << [<11,14>]>> 
2167-Equals Sto:<< []>> 
2167-NonEquals Sto: << []>> 
2167-Useless: []
2167-Constancy: [(0, 0)]
2167-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{10: ((('0', 's(10)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 16: ((('0', '64', 'keccak2560'), 2), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {10: ((('0', 's(10)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 16: ((('0', '64', 'keccak2560'), 2), 2)}, 'sto_deps_int2ins': {17: ((('s(8)', 'sload0'), 1), 1)}}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP5)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(PUSH 089a)', 'nop(SWAP1)', 'nop(DUP4)', 'nop(PUSH 1011)']
********************IT*********************
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(8)'], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(10)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(8)'], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(10)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
SFS with rule: isolated_block_0_0_input.json
{10: ((('0', 's(10)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 16: ((('0', '64', 'keccak2560'), 2), 2)}
{}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP5)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(PUSH 089a)', 'nop(SWAP1)', 'nop(DUP4)', 'nop(PUSH 1011)']
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(8)'], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(10)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(8)'], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(10)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
BLOCK 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2167 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4113
4113Instr:<<['JUMPDEST', 'PUSH1 0x00', 'PUSH2 0x0f1c', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP']>> 
4113-Stack size: 9 
4113-Equals Mem:<< [<11,6>]>> 
4113-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
4113-Equals Sto:<< []>> 
4113-NonEquals Sto: << []>> 
4113-Useless: []
4113-Constancy: [(3, 0)]
4113-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <10,19>, <5,14>, <14,19>, <5,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <10,19>, <5,14>, <14,19>, <5,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{5: ((('64', 'mload0'), 1), 0), 10: ((('64', 's(8)', 'mstore'), 2), 1), 14: ((('s(7)', '30', 'mstore'), 2), 2), 19: ((('s(11)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2), 3)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2), (('s(7)', '30', 'mstore'), 2), (('s(11)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <10,19>, <5,14>, <14,19>, <5,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {5: ((('64', 'mload0'), 1), 0), 10: ((('64', 's(8)', 'mstore'), 2), 1), 14: ((('s(7)', '30', 'mstore'), 2), 2), 19: ((('s(11)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2), 3)}, 'sto_deps_int2ins': {}}
['nop(PUSH 00)', 'nop(PUSH 0f1c)', 'nop(DUP4)', 'nop(DUP4)', 'nop(PUSH 40)', 'nop(MLOAD)', 'nop(DUP1)', 'nop(PUSH 40)', 'nop(ADD)', 'nop(PUSH 40)', 'nop(MSTORE)', 'nop(DUP1)', 'nop(PUSH 1e)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(PUSH 536166654d6174683a207375627472616374696f6e206f766572666c6f770000)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(POP)']
********************IT*********************
[]
[(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2), (('s(7)', '30', 'mstore'), 2), (('s(11)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2)]
{5: ((('64', 'mload0'), 1), 0), 10: ((('64', 's(8)', 'mstore'), 2), 1), 14: ((('s(7)', '30', 'mstore'), 2), 2), 19: ((('s(11)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2), 3)}
{}
['nop(PUSH 00)', 'nop(PUSH 0f1c)', 'nop(DUP4)', 'nop(DUP4)', 'nop(PUSH 40)', 'nop(MLOAD)', 'nop(DUP1)', 'nop(PUSH 40)', 'nop(ADD)', 'nop(PUSH 40)', 'nop(MSTORE)', 'nop(DUP1)', 'nop(PUSH 1e)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(PUSH 536166654d6174683a207375627472616374696f6e206f766572666c6f770000)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(POP)']
[]
[(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2), (('s(7)', '30', 'mstore'), 2), (('s(11)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x00 PUSH2 0x0f1c DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 PUSH2 0xf1c DUP4 DUP4 PUSH1 0x0 SWAP4 MLOAD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1e DUP2 MSTORE DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE

Optimized code stored in /tmp/0x00/PSYOP_4113_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_4113_statistics.csv

Estimated initial gas: 63
Estimated gas optimized: 61

Estimated initial size in bytes: 62
Estimated size optimized in bytes: 61

Initial number of instructions: 22
Final number of instructions: 21

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_4113;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;4113;2;True;True;False;JUMPDEST PUSH1 0x00 PUSH2 0x0f1c DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP;JUMPDEST PUSH1 0x40 PUSH2 0xf1c DUP4 DUP4 PUSH1 0x0 SWAP4 MLOAD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1e DUP2 MSTORE DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE;63;62;22;61;61;21;2;1;1;True;False;False;False;2.127928278991021;0;1;0;0

Block: 2305
2305Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH1 0x00', 'KECCAK256', 'SLOAD', 'SWAP2', 'SWAP1', 'PUSH2 0x104f', 'JUMP']>> 
2305-Stack size: 12 
2305-Equals Mem:<< []>> 
2305-NonEquals Mem: << [<8,15>]>> 
2305-Equals Sto:<< []>> 
2305-NonEquals Sto: << []>> 
2305-Useless: []
2305-Constancy: [(6, 0), (1, 0)]
2305-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<7,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<7,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{7: ((('s(3)', 's(8)', 'mstore'), 2), 0), 14: ((('s(11)', 's(2)', 'mstore'), 2), 1), 18: ((('0', 's(6)', 'keccak2560'), 2), 2)}
Storage order: [(('0', 's(6)', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(3)', 's(8)', 'mstore'), 2), (('s(11)', 's(2)', 'mstore'), 2), (('0', 's(6)', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<7,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {7: ((('s(3)', 's(8)', 'mstore'), 2), 0), 14: ((('s(11)', 's(2)', 'mstore'), 2), 1), 18: ((('0', 's(6)', 'keccak2560'), 2), 2)}, 'sto_deps_int2ins': {19: ((('s(5)', 'sload0'), 1), 1)}}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(DUP2)', 'nop(ADD)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(ADD)', 'nop(PUSH 00)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(PUSH 104f)']
********************IT*********************
[(('0', 's(6)', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
(('0', 's(6)', 'keccak2560'), 2)
[(('64', 's(3)', '+'), 2), (('0', 's(6)', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(4)', 'and'), 2), (('s(3)', '32', '+'), 2)]
[(('0', 's(6)', 'keccak2560'), 2)]
[{'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': ['s(1)', 32], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 's(6)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'ADD_1', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [64, 's(1)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': ['s(1)', 's(8)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': ['s(11)', 's(2)'], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 's(6)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('s(3)', 's(8)', 'mstore'), 2), (('s(11)', 's(2)', 'mstore'), 2), (('0', 's(6)', 'keccak2560'), 2)]
(('0', 's(6)', 'keccak2560'), 2)
[(('64', 's(3)', '+'), 2), (('0', 's(6)', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(4)', 'and'), 2), (('s(3)', '32', '+'), 2)]
[(('0', 's(6)', 'keccak2560'), 2)]
[{'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': ['s(1)', 32], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 's(6)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'ADD_1', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [64, 's(1)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': ['s(1)', 's(8)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': ['s(11)', 's(2)'], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 's(6)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
SFS with rule: isolated_block_0_0_input.json
{7: ((('s(3)', 's(8)', 'mstore'), 2), 0), 14: ((('s(11)', 's(2)', 'mstore'), 2), 1), 18: ((('0', 's(6)', 'keccak2560'), 2), 2)}
{}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(DUP2)', 'nop(ADD)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(ADD)', 'nop(PUSH 00)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(PUSH 104f)']
[(('0', 's(6)', 'keccak2560'), 2), (('s(5)', 'sload0'), 1)]
(('0', 's(6)', 'keccak2560'), 2)
[(('64', 's(3)', '+'), 2), (('0', 's(6)', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(4)', 'and'), 2), (('s(3)', '32', '+'), 2)]
[(('0', 's(6)', 'keccak2560'), 2)]
[{'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': ['s(1)', 32], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 's(6)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'ADD_1', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [64, 's(1)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': ['s(1)', 's(8)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': ['s(11)', 's(2)'], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 's(6)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('s(3)', 's(8)', 'mstore'), 2), (('s(11)', 's(2)', 'mstore'), 2), (('0', 's(6)', 'keccak2560'), 2)]
(('0', 's(6)', 'keccak2560'), 2)
[(('64', 's(3)', '+'), 2), (('0', 's(6)', 'keccak2560'), 2), (('s(5)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(4)', 'and'), 2), (('s(3)', '32', '+'), 2)]
[(('0', 's(6)', 'keccak2560'), 2)]
[{'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': ['s(1)', 32], 'outpt_sk': ['s(11)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 's(6)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'ADD_1', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [64, 's(1)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(0)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': ['s(1)', 's(8)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': ['s(11)', 's(2)'], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 's(6)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x00 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x104f JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x00 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x104f JUMP

Optimized code stored in /tmp/0x00/PSYOP_2305_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_2305_statistics.csv

Estimated initial gas: 2202
Estimated gas optimized: 2202

Estimated initial size in bytes: 33
Estimated size optimized in bytes: 33

Initial number of instructions: 25
Final number of instructions: 25

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2305;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;2305;2;True;False;False;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x00 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x104f JUMP;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x00 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x104f JUMP;2202;33;25;2202;33;25;0;0;0;True;False;False;False;2.088262778997887;2;2;2100;2100

Block: 2338
2338Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP4', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x0946', 'SWAP1', 'DUP4', 'PUSH2 0x0ec2', 'JUMP']>> 
2338-Stack size: 7 
2338-Equals Mem:<< []>> 
2338-NonEquals Mem: << [<12,15>]>> 
2338-Equals Sto:<< []>> 
2338-NonEquals Sto: << []>> 
2338-Useless: []
2338-Constancy: [(1, 0)]
2338-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{10: ((('0', 's(9)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 17: ((('0', '64', 'keccak2560'), 2), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {10: ((('0', 's(9)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 17: ((('0', '64', 'keccak2560'), 2), 2)}, 'sto_deps_int2ins': {17: ((('s(7)', 'sload0'), 1), 1)}}
['nop(POP)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP4)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(PUSH 0946)', 'nop(SWAP1)', 'nop(DUP4)', 'nop(PUSH 0ec2)']
********************IT*********************
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(7)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(7)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
SFS with rule: isolated_block_0_0_input.json
{10: ((('0', 's(9)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 17: ((('0', '64', 'keccak2560'), 2), 2)}
{}
['nop(POP)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP4)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(PUSH 0946)', 'nop(SWAP1)', 'nop(DUP4)', 'nop(PUSH 0ec2)']
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(7)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(7)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(7)'], 'outpt_sk': ['s(8)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
BLOCK 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2338 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2374
2374Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x096a', 'DUP5', 'DUP5', 'DUP5', 'PUSH2 0x10e6', 'JUMP']>> 
2374-Stack size: 7 
2374-Equals Mem:<< []>> 
2374-NonEquals Mem: << [<11,14>]>> 
2374-Equals Sto:<< []>> 
2374-NonEquals Sto: << []>> 
2374-Useless: []
2374-Constancy: [(1, 0)]
2374-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{10: ((('0', 's(9)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 16: ((('0', '64', 'keccak2560'), 2), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(12)', 's(4)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {10: ((('0', 's(9)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 16: ((('0', '64', 'keccak2560'), 2), 2)}, 'sto_deps_int2ins': {17: ((('s(12)', 's(4)', 'sstore'), 2), 1)}}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP5)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SSTORE)', 'nop(PUSH 096a)', 'nop(DUP5)', 'nop(DUP5)', 'nop(DUP5)', 'nop(PUSH 10e6)']
********************IT*********************
[(('0', '64', 'keccak2560'), 2), (('s(12)', 's(4)', 'sstore'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(12)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(12)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
SFS with rule: isolated_block_0_0_input.json
{10: ((('0', 's(9)', 'mstore'), 2), 0), 13: ((('32', '1', 'mstore'), 2), 1), 16: ((('0', '64', 'keccak2560'), 2), 2)}
{}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP5)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SSTORE)', 'nop(PUSH 096a)', 'nop(DUP5)', 'nop(DUP5)', 'nop(DUP5)', 'nop(PUSH 10e6)']
[(('0', '64', 'keccak2560'), 2), (('s(12)', 's(4)', 'sstore'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(12)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(12)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
BLOCK 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2374 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4187
4187Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'DUP1', 'DUP1', 'PUSH1 0x20', 'ADD', 'DUP3', 'DUP2', 'SUB', 'DUP3', 'MSTORE', 'DUP4', 'DUP2', 'DUP2', 'MLOAD', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP2', 'POP', 'DUP1', 'MLOAD', 'SWAP1', 'PUSH1 0x20', 'ADD', 'SWAP1', 'DUP1', 'DUP4', 'DUP4', 'PUSH1 0x00']>> 
4187-Stack size: 12 
4187-Equals Mem:<< [<21,29>]>> 
4187-NonEquals Mem: << [<6,29>, <17,21>, <6,1>, <23,21>, <17,29>, <17,1>, <23,29>, <1,21>, <23,1>, <6,21>, <1,29>]>> 
4187-Equals Sto:<< []>> 
4187-NonEquals Sto: << []>> 
4187-Useless: []
4187-Constancy: [(1, 0)]
4187-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<21,29>], 'memory_deps_noneqs': [<6,29>, <17,21>, <1,6>, <21,23>, <17,29>, <1,17>, <23,29>, <1,21>, <1,23>, <6,21>, <1,29>]}
{'memory_deps_eqs': [<21,29>], 'memory_deps_noneqs': [<6,29>, <17,21>, <1,6>, <21,23>, <17,29>, <1,17>, <23,29>, <1,21>, <1,23>, <6,21>, <1,29>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{1: ((('64', 'mload0'), 1), 0), 6: ((('s(14)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 17: ((('s(13)', 's(30)', 'mstore'), 2), 2), 21: ((('s(0)', 'mload1'), 1), 3), 23: ((('s(12)', 's(39)', 'mstore'), 2), 4), 29: ((('s(0)', 'mload2'), 1), 5)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(14)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(13)', 's(30)', 'mstore'), 2), (('s(0)', 'mload1'), 1), (('s(12)', 's(39)', 'mstore'), 2)]
Memory dep: [(2, 4), (1, 4), (1, 2)]
Memory dep simplified: [(2, 4), (1, 2)]
{'memory_deps_eqs': [<21,29>], 'memory_deps_noneqs': [<6,29>, <17,21>, <1,6>, <21,23>, <17,29>, <1,17>, <23,29>, <1,21>, <1,23>, <6,21>, <1,29>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {1: ((('64', 'mload0'), 1), 0), 6: ((('s(14)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 17: ((('s(13)', 's(30)', 'mstore'), 2), 2), 21: ((('s(0)', 'mload1'), 1), 3), 23: ((('s(12)', 's(39)', 'mstore'), 2), 4), 29: ((('s(0)', 'mload2'), 1), 5)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 04)', 'nop(ADD)', 'nop(DUP1)', 'nop(DUP1)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(DUP3)', 'nop(DUP2)', 'nop(SUB)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(DUP4)', 'nop(DUP2)', 'nop(DUP2)', 'nop(MLOAD)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP2)', 'nop(POP)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)', 'nop(DUP1)', 'nop(DUP4)', 'nop(DUP4)', 'nop(PUSH 00)']
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(14)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(13)', 's(30)', 'mstore'), 2), (('s(0)', 'mload1'), 1), (('s(12)', 's(39)', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('64', 'mload0'), 1), 0), 6: ((('s(14)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 17: ((('s(13)', 's(30)', 'mstore'), 2), 2), 21: ((('s(0)', 'mload1'), 1), 3), 23: ((('s(12)', 's(39)', 'mstore'), 2), 4), 29: ((('s(0)', 'mload2'), 1), 5)}
{}
['nop(PUSH 40)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 04)', 'nop(ADD)', 'nop(DUP1)', 'nop(DUP1)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(DUP3)', 'nop(DUP2)', 'nop(SUB)', 'nop(DUP3)', 'nop(MSTORE)', 'nop(DUP4)', 'nop(DUP2)', 'nop(DUP2)', 'nop(MLOAD)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP2)', 'nop(POP)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(SWAP1)', 'nop(DUP1)', 'nop(DUP4)', 'nop(DUP4)', 'nop(PUSH 00)']
[]
[(('64', 'mload0'), 1), (('s(14)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(13)', 's(30)', 'mstore'), 2), (('s(0)', 'mload1'), 1), (('s(12)', 's(39)', 'mstore'), 2), (('s(0)', 'mload2'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00

Optimized code stored in /tmp/0x00/PSYOP_4187_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_4187_statistics.csv

Estimated initial gas: 113
Estimated gas optimized: 113

Estimated initial size in bytes: 48
Estimated size optimized in bytes: 48

Initial number of instructions: 38
Final number of instructions: 38

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_4187;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;4187;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x00;113;48;38;113;48;38;0;0;0;True;False;False;False;2.2098254410084337;1;2;0;0

Block: 4244
4244Instr:<<['DUP2', 'DUP2', 'ADD', 'MLOAD', 'DUP4', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x108b', 'JUMP']>> 
4244-Stack size: 21 
4244-Equals Mem:<< []>> 
4244-NonEquals Mem: << [<7,3>]>> 
4244-Equals Sto:<< []>> 
4244-NonEquals Sto: << []>> 
4244-Useless: []
4244-Constancy: [(10, 0)]
4244-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
Traceback (most recent call last):
  File "/home/pablo/Repositorios/ethereum/green/gasol_optimizer/sfs_generator/ir_block.py", line 1132, in evm2rbr_compiler
    subblocks = smt_translate_block(rule,file_name,block_name,assignImmutable_dict,simplification,storage, size, part, pop, push,revert,extra_dependences_info,extra_opt_info,debug_info)
  File "/home/pablo/Repositorios/ethereum/green/gasol_optimizer/sfs_generator/gasol_optimization.py", line 3720, in smt_translate_block
    translate_block(rule,instructions,opcodes,True,block_name,simplification)
  File "/home/pablo/Repositorios/ethereum/green/gasol_optimizer/sfs_generator/gasol_optimization.py", line 3125, in translate_block
    generate_json(sub_block_name,source_stack,t_vars,source_stack_idx-1,gas, init_info,simplification = simp)
  File "/home/pablo/Repositorios/ethereum/green/gasol_optimizer/sfs_generator/gasol_optimization.py", line 2401, in generate_json
    sto_dep, mem_dep = translate_dependences_sfs(new_user_defins)
  File "/home/pablo/Repositorios/ethereum/green/gasol_optimizer/sfs_generator/gasol_optimization.py", line 6331, in translate_dependences_sfs
    storage = compute_identifiers_storage_instructions(storage_order,"storage",new_user_defins)
  File "/home/pablo/Repositorios/ethereum/green/gasol_optimizer/sfs_generator/gasol_optimization.py", line 6241, in compute_identifiers_storage_instructions
    raise Exception("Error in looking for keccak instruction")
Exception: Error in looking for keccak instruction
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}, 'sto_deps_int2ins': {}}
['nop(DUP2)', 'nop(DUP2)', 'nop(ADD)', 'nop(MLOAD)', 'nop(DUP4)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(PUSH 108b)']
********************IT*********************
[]
[(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
{3: ((('s(6)', 'mload0'), 1), 0), 7: ((('s(5)', 's(7)', 'mstore'), 2), 1)}
{}
['nop(DUP2)', 'nop(DUP2)', 'nop(ADD)', 'nop(MLOAD)', 'nop(DUP4)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(PUSH 108b)']
[]
[(('s(6)', 'mload0'), 1), (('s(5)', 's(7)', 'mstore'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x108b JUMP

Optimized sequence (basic block per line):
DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x108b JUMP

Optimized code stored in /tmp/0x00/PSYOP_4244_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_4244_statistics.csv

Estimated initial gas: 41
Estimated gas optimized: 41

Estimated initial size in bytes: 15
Estimated size optimized in bytes: 15

Initial number of instructions: 12
Final number of instructions: 12

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_4244;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;4244;2;False;True;True;DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x108b JUMP;DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x108b JUMP;41;15;12;41;15;12;0;0;0;True;False;False;False;0.11428213602630422;0;0;0;0

Block: 4456
4456Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP6', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP3', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP4', 'SSTORE', 'SWAP1', 'DUP5', 'AND', 'DUP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'PUSH2 0x1197', 'SWAP1', 'DUP3', 'PUSH2 0x0ec2', 'JUMP']>> 
4456-Stack size: 10 
4456-Equals Mem:<< [<12,28>]>> 
4456-NonEquals Mem: << [<12,15>, <15,28>]>> 
4456-Equals Sto:<< [<23,30>]>> 
4456-NonEquals Sto: << []>> 
4456-Useless: []
4456-Constancy: [(5, 0)]
4456-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<11,27>], 'memory_deps_noneqs': [<11,14>, <14,27>]}
{'memory_deps_eqs': [<11,27>], 'memory_deps_noneqs': [<11,14>, <14,27>], 'storage_deps_eqs': [<22,29>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{11: ((('0', 's(9)', 'mstore'), 2), 0), 14: ((('32', '1', 'mstore'), 2), 1), 18: ((('0', '64', 'keccak2560'), 2), 2), 27: ((('0', 's(13)', 'mstore'), 2), 3), 28: ((('0', '64', 'keccak2561'), 2), 4)}
[OPT]: Replaced sload by its value
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(12)', 's(3)', 'sstore'), 2), (('0', '64', 'keccak2561'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2), (('0', 's(13)', 'mstore'), 2), (('0', '64', 'keccak2561'), 2)]
Memory dep: [(3, 4), (1, 4), (0, 4), (0, 3), (1, 2), (0, 2), (2, 3)]
Memory dep simplified: [(3, 4), (1, 2), (0, 2), (2, 3)]
{'memory_deps_eqs': [<11,27>], 'memory_deps_noneqs': [<11,14>, <14,27>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {11: ((('0', 's(9)', 'mstore'), 2), 0), 14: ((('32', '1', 'mstore'), 2), 1), 18: ((('0', '64', 'keccak2560'), 2), 2), 27: ((('0', 's(13)', 'mstore'), 2), 3), 28: ((('0', '64', 'keccak2561'), 2), 4)}, 'sto_deps_int2ins': {22: ((('s(12)', 's(3)', 'sstore'), 2), 1)}}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP1)', 'nop(DUP6)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(DUP3)', 'nop(KECCAK256)', 'nop(SWAP4)', 'nop(SWAP1)', 'nop(SWAP4)', 'nop(SSTORE)', 'nop(SWAP1)', 'nop(DUP5)', 'nop(AND)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(PUSH 1197)', 'nop(SWAP1)', 'nop(DUP3)', 'nop(PUSH 0ec2)']
********************IT*********************
[(('0', '64', 'keccak2560'), 2), (('s(12)', 's(3)', 'sstore'), 2), (('0', '64', 'keccak2561'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2), (('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(2)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(13)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(12)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(13)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
(('0', '64', 'keccak2561'), 2)
[(('0', '64', 'keccak2561'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2), (('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
[(('0', '64', 'keccak2561'), 2)]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(12)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(2)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(13)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(3)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(12)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(9)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_2', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(13)'], 'mem_var': ['mem2'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[]

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP1 DUP6 AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1197 SWAP1 DUP3 PUSH2 0x0ec2 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP1 DUP6 AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1197 SWAP1 DUP3 PUSH2 0x0ec2 JUMP

Optimized code stored in /tmp/0x00/PSYOP_4456_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_4456_statistics.csv

Estimated initial gas: 5259
Estimated gas optimized: 5259

Estimated initial size in bytes: 47
Estimated size optimized in bytes: 47

Initial number of instructions: 36
Final number of instructions: 36

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_4456;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;4456;0;False;False;False;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP1 DUP6 AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1197 SWAP1 DUP3 PUSH2 0x0ec2 JUMP;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP1 DUP6 AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1197 SWAP1 DUP3 PUSH2 0x0ec2 JUMP;5259;47;36;5259;47;36;0;0;0;True;True;False;False;0.0026419839705340564;0;0;5100;5100

Block: 4503
4503Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP5', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP2', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH1 0x08', 'SLOAD', 'DUP5', 'DUP3', 'AND', 'SWAP2', 'AND', 'EQ', 'ISZERO', 'PUSH2 0x11d1', 'JUMPI']>> 
4503-Stack size: 10 
4503-Equals Mem:<< []>> 
4503-NonEquals Mem: << [<12,15>]>> 
4503-Equals Sto:<< []>> 
4503-NonEquals Sto: << [<22,24>]>> 
4503-Useless: []
4503-Constancy: [(5, 0)]
4503-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<21,23>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{11: ((('0', 's(14)', 'mstore'), 2), 0), 14: ((('32', '1', 'mstore'), 2), 1), 17: ((('0', '64', 'keccak2560'), 2), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(17)', 's(3)', 'sstore'), 2), (('8', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<21,23>], 'mem_deps_int2ins': {11: ((('0', 's(14)', 'mstore'), 2), 0), 14: ((('32', '1', 'mstore'), 2), 1), 17: ((('0', '64', 'keccak2560'), 2), 2)}, 'sto_deps_int2ins': {21: ((('s(17)', 's(3)', 'sstore'), 2), 1), 23: ((('8', 'sload0'), 1), 2)}}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP1)', 'nop(DUP5)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(SSTORE)', 'nop(PUSH 08)', 'nop(SLOAD)', 'nop(DUP5)', 'nop(DUP3)', 'nop(AND)', 'nop(SWAP2)', 'nop(AND)', 'nop(EQ)', 'nop(ISZERO)', 'nop(PUSH 11d1)']
********************IT*********************
[(('0', '64', 'keccak2560'), 2), (('s(17)', 's(3)', 'sstore'), 2), (('8', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('8', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(9)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(6)', 's(10)', 'eq'), 2), (('s(5)', 'iszero'), 1), (('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(3)'], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'ISZERO_0', 'opcode': '15', 'disasm': 'ISZERO', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(13)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(2)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(14)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(17)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'EQ_0', 'opcode': '14', 'disasm': 'EQ', 'inpt_sk': ['s(6)', 's(10)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_2', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(9)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': [8], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(17)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(14)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(17)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('8', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(9)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(6)', 's(10)', 'eq'), 2), (('s(5)', 'iszero'), 1), (('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(3)'], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'ISZERO_0', 'opcode': '15', 'disasm': 'ISZERO', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(13)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(2)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(14)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(17)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'EQ_0', 'opcode': '14', 'disasm': 'EQ', 'inpt_sk': ['s(6)', 's(10)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_2', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(9)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': [8], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(17)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(14)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(17)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
SFS with rule: isolated_block_0_0_input.json
{11: ((('0', 's(14)', 'mstore'), 2), 0), 14: ((('32', '1', 'mstore'), 2), 1), 17: ((('0', '64', 'keccak2560'), 2), 2)}
{}
['nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP1)', 'nop(DUP5)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SWAP2)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(SSTORE)', 'nop(PUSH 08)', 'nop(SLOAD)', 'nop(DUP5)', 'nop(DUP3)', 'nop(AND)', 'nop(SWAP2)', 'nop(AND)', 'nop(EQ)', 'nop(ISZERO)', 'nop(PUSH 11d1)']
[(('0', '64', 'keccak2560'), 2), (('s(17)', 's(3)', 'sstore'), 2), (('8', 'sload0'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('8', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(9)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(6)', 's(10)', 'eq'), 2), (('s(5)', 'iszero'), 1), (('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(3)'], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'ISZERO_0', 'opcode': '15', 'disasm': 'ISZERO', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(13)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(2)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(14)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(17)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'EQ_0', 'opcode': '14', 'disasm': 'EQ', 'inpt_sk': ['s(6)', 's(10)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_2', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(9)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': [8], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(17)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(14)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(17)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(14)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('8', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(9)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(6)', 's(10)', 'eq'), 2), (('s(5)', 'iszero'), 1), (('s(1)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(3)'], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'ISZERO_0', 'opcode': '15', 'disasm': 'ISZERO', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(13)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_1', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': ['s(2)', 1461501637330902918203684832716283019655932542975], 'outpt_sk': ['s(14)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(17)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'EQ_0', 'opcode': '14', 'disasm': 'EQ', 'inpt_sk': ['s(6)', 's(10)'], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'AND_2', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(9)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': [8], 'outpt_sk': ['s(9)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': ['s(17)', 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(14)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(17)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP1 DUP5 AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x08 SLOAD DUP5 DUP3 AND SWAP2 AND EQ ISZERO PUSH2 0x11d1 JUMPI

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP1 DUP5 AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x08 SLOAD DUP5 DUP3 AND SWAP2 AND EQ ISZERO PUSH2 0x11d1 JUMPI

Optimized code stored in /tmp/0x00/PSYOP_4503_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_4503_statistics.csv

Estimated initial gas: 7228
Estimated gas optimized: 7228

Estimated initial size in bytes: 44
Estimated size optimized in bytes: 44

Initial number of instructions: 34
Final number of instructions: 34

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_4503;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;4503;2;True;False;False;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP1 DUP5 AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x08 SLOAD DUP5 DUP3 AND SWAP2 AND EQ ISZERO PUSH2 0x11d1 JUMPI;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP1 DUP5 AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x08 SLOAD DUP5 DUP3 AND SWAP2 AND EQ ISZERO PUSH2 0x11d1 JUMPI;7228;44;34;7228;44;34;0;0;0;True;True;False;False;2.1872841070289724;2;2;7100;7100

Block: 2109
2109Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x0b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH11 0x1c1b19585cd9481dd85a5d', 'PUSH1 0xaa', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
2109-Stack size: 6 
2109-Equals Mem:<< [<2,26>]>> 
2109-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
2109-Equals Sto:<< []>> 
2109-NonEquals Sto: << []>> 
2109-Useless: []
2109-Constancy: [(0, 0)]
2109-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>]}
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('170', '33977894380051817007962717', 'shl')
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '11', 'mstore'), 2), 3), 24: ((('s(13)', '50850558227970268269299386268115976783015618767856592188298255977275623211008', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '11', 'mstore'), 2), (('s(13)', '50850558227970268269299386268115976783015618767856592188298255977275623211008', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '11', 'mstore'), 2), 3), 24: ((('s(13)', '50850558227970268269299386268115976783015618767856592188298255977275623211008', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 0b)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 1c1b19585cd9481dd85a5d)', 'nop(PUSH aa)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_2', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [100, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '11', 'mstore'), 2), (('s(13)', '50850558227970268269299386268115976783015618767856592188298255977275623211008', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '11', 'mstore'), 2), 3), 24: ((('s(13)', '50850558227970268269299386268115976783015618767856592188298255977275623211008', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 0b)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 1c1b19585cd9481dd85a5d)', 'nop(PUSH aa)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '11', 'mstore'), 2), (('s(13)', '50850558227970268269299386268115976783015618767856592188298255977275623211008', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x0b PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x1c1b19585cd9481dd85a5d PUSH1 0xaa SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x44 PUSH32 0x706c656173652077616974000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0xb SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT

Optimized code stored in /tmp/0x00/PSYOP_2109_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_2109_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 78

Estimated initial size in bytes: 58
Estimated size optimized in bytes: 99

Initial number of instructions: 35
Final number of instructions: 27

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2109;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;2109;2;True;True;False;PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x0b PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x1c1b19585cd9481dd85a5d PUSH1 0xaa SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT;PUSH1 0x44 PUSH32 0x706c656173652077616974000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0xb SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT;102;58;35;78;99;27;24;-41;8;True;False;False;False;2.1561341939959675;4;3;0;0

Block: 1817
1817Instr:<<['JUMPDEST', 'PUSH1 0x02', 'DUP1', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x20', 'PUSH1 0x1f', 'PUSH1 0x00', 'NOT', 'PUSH2 0x0100', 'PUSH1 0x01', 'DUP8', 'AND', 'ISZERO', 'MUL', 'ADD', 'SWAP1', 'SWAP5', 'AND', 'DUP6', 'SWAP1', 'DIV', 'SWAP4', 'DUP5', 'ADD', 'DUP2', 'SWAP1', 'DIV', 'DUP2', 'MUL', 'DUP3', 'ADD', 'DUP2', 'ADD', 'SWAP1', 'SWAP3', 'MSTORE', 'DUP3', 'DUP2', 'MSTORE', 'PUSH1 0x60', 'SWAP4', 'SWAP1', 'SWAP3', 'SWAP1', 'SWAP2', 'DUP4', 'ADD', 'DUP3', 'DUP3', 'DUP1', 'ISZERO', 'PUSH2 0x07a2', 'JUMPI']>> 
1817-Stack size: 2 
1817-Equals Mem:<< [<38,6>]>> 
1817-NonEquals Mem: << [<38,41>, <41,6>]>> 
1817-Equals Sto:<< []>> 
1817-NonEquals Sto: << []>> 
1817-Useless: []
1817-Constancy: []
1817-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,37>], 'memory_deps_noneqs': [<37,40>, <5,40>]}
{'memory_deps_eqs': [<5,37>], 'memory_deps_noneqs': [<37,40>, <5,40>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{5: ((('64', 'mload0'), 1), 0), 37: ((('64', 's(37)', 'mstore'), 2), 1), 40: ((('s(27)', 's(9)', 'mstore'), 2), 2)}
Storage order: [(('2', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(37)', 'mstore'), 2), (('s(27)', 's(9)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
{'memory_deps_eqs': [<5,37>], 'memory_deps_noneqs': [<37,40>, <5,40>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {5: ((('64', 'mload0'), 1), 0), 37: ((('64', 's(37)', 'mstore'), 2), 1), 40: ((('s(27)', 's(9)', 'mstore'), 2), 2)}, 'sto_deps_int2ins': {2: ((('2', 'sload0'), 1), 0)}}
['nop(PUSH 02)', 'nop(DUP1)', 'nop(SLOAD)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 20)', 'nop(PUSH 1f)', 'nop(PUSH 00)', 'nop(NOT)', 'nop(PUSH 0100)', 'nop(PUSH 01)', 'nop(DUP8)', 'nop(AND)', 'nop(ISZERO)', 'nop(MUL)', 'nop(ADD)', 'nop(SWAP1)', 'nop(SWAP5)', 'nop(AND)', 'nop(DUP6)', 'nop(SWAP1)', 'nop(DIV)', 'nop(SWAP4)', 'nop(DUP5)', 'nop(ADD)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(DIV)', 'nop(DUP2)', 'nop(MUL)', 'nop(DUP3)', 'nop(ADD)', 'nop(DUP2)', 'nop(ADD)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(MSTORE)', 'nop(DUP3)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 60)', 'nop(SWAP4)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(DUP4)', 'nop(ADD)', 'nop(DUP3)', 'nop(DUP3)', 'nop(DUP1)', 'nop(ISZERO)', 'nop(PUSH 07a2)']
********************IT*********************
[(('2', 'sload0'), 1)]
[(('64', 'mload0'), 1), (('64', 's(37)', 'mstore'), 2), (('s(27)', 's(9)', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{5: ((('64', 'mload0'), 1), 0), 37: ((('64', 's(37)', 'mstore'), 2), 1), 40: ((('s(27)', 's(9)', 'mstore'), 2), 2)}
{}
['nop(PUSH 02)', 'nop(DUP1)', 'nop(SLOAD)', 'nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 20)', 'nop(PUSH 1f)', 'nop(PUSH 00)', 'nop(NOT)', 'nop(PUSH 0100)', 'nop(PUSH 01)', 'nop(DUP8)', 'nop(AND)', 'nop(ISZERO)', 'nop(MUL)', 'nop(ADD)', 'nop(SWAP1)', 'nop(SWAP5)', 'nop(AND)', 'nop(DUP6)', 'nop(SWAP1)', 'nop(DIV)', 'nop(SWAP4)', 'nop(DUP5)', 'nop(ADD)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(DIV)', 'nop(DUP2)', 'nop(MUL)', 'nop(DUP3)', 'nop(ADD)', 'nop(DUP2)', 'nop(ADD)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(MSTORE)', 'nop(DUP3)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 60)', 'nop(SWAP4)', 'nop(SWAP1)', 'nop(SWAP3)', 'nop(SWAP1)', 'nop(SWAP2)', 'nop(DUP4)', 'nop(ADD)', 'nop(DUP3)', 'nop(DUP3)', 'nop(DUP1)', 'nop(ISZERO)', 'nop(PUSH 07a2)']
[(('2', 'sload0'), 1)]
[(('64', 'mload0'), 1), (('64', 's(37)', 'mstore'), 2), (('s(27)', 's(9)', 'mstore'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x02 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1f PUSH1 0x00 NOT PUSH2 0x0100 PUSH1 0x01 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND DUP6 SWAP1 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x07a2 JUMPI

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x02 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1f PUSH1 0x00 NOT PUSH2 0x0100 PUSH1 0x01 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND DUP6 SWAP1 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x07a2 JUMPI

Optimized code stored in /tmp/0x00/PSYOP_1817_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_1817_statistics.csv

Estimated initial gas: 2278
Estimated gas optimized: 2278

Estimated initial size in bytes: 67
Estimated size optimized in bytes: 67

Initial number of instructions: 56
Final number of instructions: 56

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_1817;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;1817;2;True;False;False;JUMPDEST PUSH1 0x02 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1f PUSH1 0x00 NOT PUSH2 0x0100 PUSH1 0x01 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND DUP6 SWAP1 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x07a2 JUMPI;JUMPDEST PUSH1 0x02 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1f PUSH1 0x00 NOT PUSH2 0x0100 PUSH1 0x01 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND DUP6 SWAP1 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x07a2 JUMPI;2278;67;56;2278;67;56;0;0;0;True;False;False;False;2.6458679210045375;5;1;2100;2100

Block: 1604
1604Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x13', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH19 0x45524332303a207a65726f2061646472657373', 'PUSH1 0x68', 'SHL', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
1604-Stack size: 4 
1604-Equals Mem:<< [<2,26>]>> 
1604-NonEquals Mem: << [<7,2>, <7,26>, <12,2>, <12,26>, <17,2>, <17,26>, <24,2>, <24,26>]>> 
1604-Equals Sto:<< []>> 
1604-NonEquals Sto: << []>> 
1604-Useless: []
1604-Constancy: []
1604-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>]}
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('104', '1545917491775410031261530497059923039395083123', 'shl')
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '19', 'mstore'), 2), 3), 24: ((('s(13)', '31354931781638678644574149166275077378472413074516885457966550947968967507968', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '19', 'mstore'), 2), (('s(13)', '31354931781638678644574149166275077378472413074516885457966550947968967507968', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
{'memory_deps_eqs': [<2,26>], 'memory_deps_noneqs': [<2,7>, <7,26>, <2,12>, <12,26>, <2,17>, <17,26>, <2,24>, <24,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '19', 'mstore'), 2), 3), 24: ((('s(13)', '31354931781638678644574149166275077378472413074516885457966550947968967507968', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 13)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 45524332303a207a65726f2061646472657373)', 'nop(PUSH 68)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_2', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [100, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '19', 'mstore'), 2), (('s(13)', '31354931781638678644574149166275077378472413074516885457966550947968967507968', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '19', 'mstore'), 2), 3), 24: ((('s(13)', '31354931781638678644574149166275077378472413074516885457966550947968967507968', 'mstore'), 2), 4), 26: ((('64', 'mload1'), 1), 5)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 13)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 45524332303a207a65726f2061646472657373)', 'nop(PUSH 68)', 'nop(SHL)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '19', 'mstore'), 2), (('s(13)', '31354931781638678644574149166275077378472413074516885457966550947968967507968', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x45524332303a207a65726f2061646472657373 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x44 PUSH32 0x45524332303a207a65726f206164647265737300000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x13 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT

Optimized code stored in /tmp/0x00/PSYOP_1604_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_1604_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 78

Estimated initial size in bytes: 66
Estimated size optimized in bytes: 99

Initial number of instructions: 35
Final number of instructions: 27

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_1604;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;1604;2;True;True;False;PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x45524332303a207a65726f2061646472657373 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT;PUSH1 0x44 PUSH32 0x45524332303a207a65726f206164647265737300000000000000000000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x13 SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT;102;66;35;78;99;27;24;-33;8;True;False;False;False;2.1565437900135294;4;3;0;0

Block: 1683
1683Instr:<<['JUMPDEST', 'PUSH1 0x05', 'SSTORE', 'PUSH1 0x08', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH1 0x00', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x06bb', 'SWAP1', 'DUP3', 'PUSH2 0x0ec2', 'JUMP']>> 
1683-Stack size: 5 
1683-Equals Mem:<< []>> 
1683-NonEquals Mem: << [<14,17>]>> 
1683-Equals Sto:<< []>> 
1683-NonEquals Sto: << [<2,4>, <2,21>, <4,21>]>> 
1683-Useless: []
1683-Constancy: []
1683-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<13,16>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<13,16>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<1,3>, <1,20>, <3,20>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{13: ((('0', 's(7)', 'mstore'), 2), 0), 16: ((('32', '1', 'mstore'), 2), 1), 19: ((('0', '64', 'keccak2560'), 2), 2)}
Storage order: [(('5', 's(1)', 'sstore'), 2), (('8', 'sload0'), 1), (('0', '64', 'keccak2560'), 2), (('s(5)', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(7)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<13,16>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<1,3>, <1,20>, <3,20>], 'mem_deps_int2ins': {13: ((('0', 's(7)', 'mstore'), 2), 0), 16: ((('32', '1', 'mstore'), 2), 1), 19: ((('0', '64', 'keccak2560'), 2), 2)}, 'sto_deps_int2ins': {1: ((('5', 's(1)', 'sstore'), 2), 0), 3: ((('8', 'sload0'), 1), 1), 20: ((('s(5)', 'sload1'), 1), 3)}}
['nop(PUSH 05)', 'nop(SSTORE)', 'nop(PUSH 08)', 'nop(SLOAD)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(PUSH 06bb)', 'nop(SWAP1)', 'nop(DUP3)', 'nop(PUSH 0ec2)']
********************IT*********************
[(('5', 's(1)', 'sstore'), 2), (('8', 'sload0'), 1), (('0', '64', 'keccak2560'), 2), (('s(5)', 'sload1'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload1'), 1), (('8', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(10)', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': [8], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_1', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(10)'], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': [5, 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(7)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(7)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload1'), 1), (('8', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(10)', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': [8], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_1', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(10)'], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': [5, 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(7)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
SFS with rule: isolated_block_0_0_input.json
{13: ((('0', 's(7)', 'mstore'), 2), 0), 16: ((('32', '1', 'mstore'), 2), 1), 19: ((('0', '64', 'keccak2560'), 2), 2)}
{}
['nop(PUSH 05)', 'nop(SSTORE)', 'nop(PUSH 08)', 'nop(SLOAD)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(PUSH 00)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 01)', 'nop(PUSH 20)', 'nop(MSTORE)', 'nop(PUSH 40)', 'nop(SWAP1)', 'nop(KECCAK256)', 'nop(SLOAD)', 'nop(PUSH 06bb)', 'nop(SWAP1)', 'nop(DUP3)', 'nop(PUSH 0ec2)']
[(('5', 's(1)', 'sstore'), 2), (('8', 'sload0'), 1), (('0', '64', 'keccak2560'), 2), (('s(5)', 'sload1'), 1)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload1'), 1), (('8', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(10)', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': [8], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_1', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(10)'], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': [5, 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(7)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
[(('0', 's(7)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
(('0', '64', 'keccak2560'), 2)
[(('0', '64', 'keccak2560'), 2), (('s(5)', 'sload1'), 1), (('8', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(10)', 'and'), 2)]
[(('0', '64', 'keccak2560'), 2)]
[{'id': 'SLOAD_0', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': [8], 'outpt_sk': ['s(10)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'SLOAD_1', 'opcode': '54', 'disasm': 'SLOAD', 'inpt_sk': ['s(5)'], 'outpt_sk': ['s(6)'], 'push': False, 'gas': 2100, 'commutative': False, 'storage': False, 'size': 1}, {'id': 'AND_0', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(10)'], 'outpt_sk': ['s(7)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}, {'id': 'SSTORE_0', 'opcode': '55', 'disasm': 'SSTORE', 'inpt_sk': [5, 's(0)'], 'sto_var': ['sto0'], 'push': False, 'outpt_sk': [], 'gas': 5000, 'commutative': False, 'storage': True, 'size': 1}, {'id': 'MSTORE_0', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [0, 's(7)'], 'mem_var': ['mem0'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}, {'id': 'MSTORE_1', 'opcode': '52', 'disasm': 'MSTORE', 'inpt_sk': [32, 1], 'mem_var': ['mem1'], 'push': False, 'outpt_sk': [], 'gas': 3, 'size': 1, 'commutative': False, 'storage': True}]
[{'id': 'KECCAK256_0', 'opcode': '20', 'disasm': 'KECCAK256', 'inpt_sk': [0, 64], 'outpt_sk': ['s(5)'], 'push': False, 'gas': 30, 'commutative': False, 'storage': False, 'size': 1}]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x05 SSTORE PUSH1 0x08 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x06bb SWAP1 DUP3 PUSH2 0x0ec2 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x8 PUSH1 0x1 PUSH1 0x20 MSTORE SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x0 MSTORE PUSH2 0x6bb PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP3 PUSH2 0xec2 JUMP

Optimized code stored in /tmp/0x00/PSYOP_1683_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_1683_statistics.csv

Estimated initial gas: 9302
Estimated gas optimized: 9281

Estimated initial size in bytes: 40
Estimated size optimized in bytes: 51

Initial number of instructions: 27
Final number of instructions: 20

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_1683;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;1683;2;True;True;False;JUMPDEST PUSH1 0x05 SSTORE PUSH1 0x08 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH1 0x00 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x06bb SWAP1 DUP3 PUSH2 0x0ec2 JUMP;JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x8 PUSH1 0x1 PUSH1 0x20 MSTORE SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND PUSH1 0x0 MSTORE PUSH2 0x6bb PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP3 PUSH2 0xec2 JUMP;9302;40;27;9281;51;20;21;-11;7;True;True;False;False;2.1231532969977707;2;2;9200;9200

Block: 3792
3792Instr:<<['PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'SWAP1', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x64', 'ADD', 'SWAP1', 'REVERT']>> 
3792-Stack size: 9 
3792-Equals Mem:<< [<2,24>]>> 
3792-NonEquals Mem: << [<12,24>, <7,2>, <17,24>, <22,24>, <12,2>, <17,2>, <22,2>, <7,24>]>> 
3792-Equals Sto:<< []>> 
3792-NonEquals Sto: << []>> 
3792-Useless: []
3792-Constancy: [(1, 0)]
3792-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<2,24>], 'memory_deps_noneqs': [<12,24>, <2,7>, <17,24>, <22,24>, <2,12>, <2,17>, <2,22>, <7,24>]}
{'memory_deps_eqs': [<2,24>], 'memory_deps_noneqs': [<12,24>, <2,7>, <17,24>, <22,24>, <2,12>, <2,17>, <2,22>, <7,24>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '27', 'mstore'), 2), 3), 22: ((('s(13)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2), 4), 24: ((('64', 'mload1'), 1), 5)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '27', 'mstore'), 2), (('s(13)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
{'memory_deps_eqs': [<2,24>], 'memory_deps_noneqs': [<12,24>, <2,7>, <17,24>, <22,24>, <2,12>, <2,17>, <2,22>, <7,24>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '27', 'mstore'), 2), 3), 22: ((('s(13)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2), 4), 24: ((('64', 'mload1'), 1), 5)}, 'sto_deps_int2ins': {}}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 1b)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 536166654d6174683a206164646974696f6e206f766572666c6f770000000000)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_2', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [100, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '27', 'mstore'), 2), (('s(13)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('64', 'mload0'), 1), 0), 7: ((('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), 1), 12: ((('s(9)', '32', 'mstore'), 2), 2), 17: ((('s(11)', '27', 'mstore'), 2), 3), 22: ((('s(13)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2), 4), 24: ((('64', 'mload1'), 1), 5)}
{}
['nop(PUSH 40)', 'nop(DUP1)', 'nop(MLOAD)', 'nop(PUSH 461bcd)', 'nop(PUSH e5)', 'nop(SHL)', 'nop(DUP2)', 'nop(MSTORE)', 'nop(PUSH 20)', 'nop(PUSH 04)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 1b)', 'nop(PUSH 24)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(PUSH 536166654d6174683a206164646974696f6e206f766572666c6f770000000000)', 'nop(PUSH 44)', 'nop(DUP3)', 'nop(ADD)', 'nop(MSTORE)', 'nop(SWAP1)', 'nop(MLOAD)', 'nop(SWAP1)', 'nop(DUP2)', 'nop(SWAP1)', 'nop(SUB)', 'nop(PUSH 64)', 'nop(ADD)', 'nop(SWAP1)']
[]
[(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '27', 'mstore'), 2), (('s(13)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2), (('64', 'mload1'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x44 PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x1b SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT

Optimized code stored in /tmp/0x00/PSYOP_3792_optimized.txt
Optimality results stored in /tmp/0x00/PSYOP_3792_statistics.csv

Estimated initial gas: 96
Estimated gas optimized: 78

Estimated initial size in bytes: 76
Estimated size optimized in bytes: 99

Initial number of instructions: 33
Final number of instructions: 27

GREENRES: 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_3792;0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol;PSYOP;3792;2;True;True;False;PUSH1 0x40 DUP1 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT;PUSH1 0x44 PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x40 MLOAD SWAP2 DUP3 ADD PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP4 MSTORE DUP3 PUSH1 0x4 ADD PUSH1 0x20 SWAP1 MSTORE PUSH1 0x24 PUSH1 0x40 MLOAD ADD PUSH1 0x1b SWAP1 MSTORE MSTORE PUSH1 0x64 SWAP1 REVERT;96;76;33;78;99;27;18;-23;6;True;False;False;False;2.1532437900314108;3;3;0;0

Block: 2757
2757Instr:<<['JUMPDEST', 'PUSH1 0x20', 'MUL', 'PUSH1 0x20', 'ADD', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP5', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'DUP5', 'DUP5', 'DUP2', 'MLOAD', 'DUP2', 'LT', 'PUSH2 0x0b0d', 'JUMPI']>> 
2757-Stack size: 8 
2757-Equals Mem:<< []>> 
2757-NonEquals Mem: << [<6,24>]>> 
2757-Equals Sto:<< []>> 
2757-NonEquals Sto: << []>> 
2757-Useless: []
2757-Constancy: []
2757-ContextAliasing: [(4, 6)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,23>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,23>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{5: ((('s(19)', 'mload0'), 1), 0), 23: ((('s(2)', 'mload1'), 1), 1)}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(19)', 'mload0'), 1), (('s(2)', 'mload1'), 1)]
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,23>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {5: ((('s(19)', 'mload0'), 1), 0), 23: ((('s(2)', 'mload1'), 1), 1)}, 'sto_deps_int2ins': {}}
['nop(PUSH 20)', 'nop(MUL)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(ADD)', 'nop(MLOAD)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(DUP5)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(PUSH ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)', 'nop(DUP5)', 'nop(DUP5)', 'nop(DUP2)', 'nop(MLOAD)', 'nop(DUP2)', 'nop(LT)', 'nop(PUSH 0b0d)']
********************IT*********************
[]
[(('s(19)', 'mload0'), 1), (('s(2)', 'mload1'), 1)]
SFS with rule: isolated_block_0_0_input.json
{5: ((('s(19)', 'mload0'), 1), 0), 23: ((('s(2)', 'mload1'), 1), 1)}
{}
['nop(PUSH 20)', 'nop(MUL)', 'nop(PUSH 20)', 'nop(ADD)', 'nop(ADD)', 'nop(MLOAD)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(DUP5)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(AND)', 'nop(PUSH ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef)', 'nop(DUP5)', 'nop(DUP5)', 'nop(DUP2)', 'nop(MLOAD)', 'nop(DUP2)', 'nop(LT)', 'nop(PUSH 0b0d)']
[]
[(('s(19)', 'mload0'), 1), (('s(2)', 'mload1'), 1)]
BLOCK 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2757 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 464
464Instr:<<['JUMPDEST', 'POP', 'SWAP3', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
464-Stack size: 6 
464-Equals Mem:<< []>> 
464-NonEquals Mem: << []>> 
464-Equals Sto:<< []>> 
464-NonEquals Sto: << []>> 
464-Useless: []
464-Constancy: []
464-ContextAliasing: [(3, 3)]

Block: 4304
4304Instr:<<['JUMPDEST', 'POP', 'SWAP3', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
4304-Stack size: 16 
4304-Equals Mem:<< []>> 
4304-NonEquals Mem: << []>> 
4304-Equals Sto:<< []>> 
4304-NonEquals Sto: << []>> 
4304-Useless: []
4304-Constancy: [(5, 0)]
4304-ContextAliasing: []

Block: 2055
2055Instr:<<['PUSH1 0x07', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH2 0x0877', 'JUMP']>> 
2055-Stack size: 6 
2055-Equals Mem:<< []>> 
2055-NonEquals Mem: << []>> 
2055-Equals Sto:<< [<2,19>]>> 
2055-NonEquals Sto: << []>> 
2055-Useless: []
2055-Constancy: [(0, 0)]
2055-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<2,19>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{}
Storage order: [(('7', 'sload0'), 1), (('7', 's(4)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<2,19>], 'storage_deps_noneqs': [], 'mem_deps_int2ins': {}, 'sto_deps_int2ins': {2: ((('7', 'sload0'), 1), 0), 19: ((('7', 's(4)', 'sstore'), 2), 1)}}
['nop(PUSH 07)', 'nop(DUP1)', 'nop(SLOAD)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(NOT)', 'nop(AND)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP6)', 'nop(AND)', 'nop(OR)', 'nop(SWAP1)', 'nop(SSTORE)', 'nop(PUSH 0877)']
********************IT*********************
[(('7', 'sload0'), 1), (('7', 's(4)', 'sstore'), 2)]
[]
SFS with rule: isolated_block_0_0_input.json
{}
{}
['nop(PUSH 07)', 'nop(DUP1)', 'nop(SLOAD)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(NOT)', 'nop(AND)', 'nop(PUSH 01)', 'nop(PUSH 01)', 'nop(PUSH a0)', 'nop(SHL)', 'nop(SUB)', 'nop(DUP6)', 'nop(AND)', 'nop(OR)', 'nop(SWAP1)', 'nop(SSTORE)', 'nop(PUSH 0877)']
[(('7', 'sload0'), 1), (('7', 's(4)', 'sstore'), 2)]
[]
BLOCK 0x00000b94b9245dcb5edfe15f5949f04a5d42a63d.sol_PSYOP_2055 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
