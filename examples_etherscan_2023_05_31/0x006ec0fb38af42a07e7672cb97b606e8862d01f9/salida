incomplete push instruction at 7080
incomplete push instruction at 306
Green Main
*************************************************************
Compilation time: 0.3364143749931827s
*************************************************************
File: MiladyDeWinter
Build CFG: 0.569288476021029s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis MiladyDeWinter
Memory accesess analysis finished!


MEMRES: NOT Found read (potential optimization) -> mem0 4759_0:2 --> 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol MiladyDeWinter--transfer(address,uint256)
MEMRES: NOT Found read (potential optimization) -> mem20 4759_0:5 --> 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol MiladyDeWinter--transfer(address,uint256)
MEMRES: NOT Found read (potential optimization) -> mem0 4810_0:4 --> 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol MiladyDeWinter--transfer(address,uint256)
MEMRES: NOT Found read (potential optimization) -> mem20 4810_0:7 --> 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol MiladyDeWinter--transfer(address,uint256)
MEMRES: NOT Found read (potential optimization) -> <slot61,0> 1250:6 --> 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol MiladyDeWinter--delBots(address[])
GASOL: Useless accesses found: {'4759_0': [2, 5], '4810_0': [4, 7], '1250': [6]}
Free memory analyss finished


SLOTS Contract MiladyDeWinter: 102
Memory read accesses ContractMiladyDeWinter: 376
Memory write accesses ContractMiladyDeWinter: 688
********************************** INIT
GASOL: Adding block useless 4759_0
GASOL: Adding block useless 4810_0
GASOL: Adding block useless 1250
CONTEXT: Detected context equality 2 <slot2,0> 7 <slot2,0>
CONTEXT: Detected context equality 2 <slot2,0> 7 <slot2,0>
CONTEXT: Detected context equality 18 <slot18,0> 20 <slot18,0>
CONTEXT: Detected context equality 18 <slot18,0> 21 <slot18,0>
CONTEXT: Detected context equality 18 <slot18,0> 21 <slot18,0>
CONTEXT: Detected context equality 18 <slot20,0> 20 <slot20,0>
CONTEXT: Detected context equality 18 <slot20,0> 21 <slot20,0>
CONTEXT: Detected context equality 18 <slot20,0> 21 <slot20,0>
CONTEXT: Detected context equality 18 <slot25,0> 20 <slot25,0>
CONTEXT: Detected context equality 18 <slot25,0> 21 <slot25,0>
CONTEXT: Detected context equality 18 <slot25,0> 21 <slot25,0>
CONTEXT: Detected context equality 14 <slot28,0> 16 <slot28,0>
CONTEXT: Detected context equality 14 <slot28,0> 16 <slot28,0>
CONTEXT: Detected context equality 14 <slot28,0> 20 <slot28,0>
CONTEXT: Detected context equality 14 <slot28,0> 20 <slot28,0>
CONTEXT: Detected context equality 18 <slot34,0> 20 <slot34,0>
CONTEXT: Detected context equality 18 <slot34,0> 21 <slot34,0>
CONTEXT: Detected context equality 18 <slot34,0> 21 <slot34,0>
CONTEXT: Detected context equality 21 <slot36,0> 23 <slot36,0>
CONTEXT: Detected context equality 21 <slot36,0> 24 <slot36,0>
CONTEXT: Detected context equality 21 <slot36,0> 24 <slot36,0>
CONTEXT: Detected context equality 19 <slot38,0> 21 <slot38,0>
CONTEXT: Detected context equality 19 <slot38,0> 22 <slot38,0>
CONTEXT: Detected context equality 19 <slot38,0> 22 <slot38,0>
CONTEXT: Detected context equality 23 <slot41,0> 25 <slot41,0>
CONTEXT: Detected context equality 23 <slot41,0> 26 <slot41,0>
CONTEXT: Detected context equality 23 <slot41,0> 26 <slot41,0>
CONTEXT: Detected context equality 21 <slot43,0> 23 <slot43,0>
CONTEXT: Detected context equality 21 <slot43,0> 24 <slot43,0>
CONTEXT: Detected context equality 21 <slot43,0> 24 <slot43,0>
CONTEXT: Detected context equality 5 <slot54,0> 7 <slot54,0>
CONTEXT: Detected context equality 5 <slot54,0> 7 <slot54,0>
CONTEXT: Detected context equality 5 <slot54,0> 11 <slot54,0>
CONTEXT: Detected context equality 5 <slot54,0> 11 <slot54,0>
CONTEXT: Detected context equality 2 <slot60,0> 7 <slot60,0>
CONTEXT: Detected context equality 2 <slot60,0> 7 <slot60,0>
CONTEXT: Detected context equality 19 <slot66,0> 21 <slot66,0>
CONTEXT: Detected context equality 19 <slot66,0> 22 <slot66,0>
CONTEXT: Detected context equality 19 <slot66,0> 22 <slot66,0>
CONTEXT: Detected context equality 19 <slot68,0> 21 <slot68,0>
CONTEXT: Detected context equality 19 <slot68,0> 22 <slot68,0>
CONTEXT: Detected context equality 19 <slot68,0> 22 <slot68,0>
CONTEXT: Detected context equality 19 <slot73,0> 21 <slot73,0>
CONTEXT: Detected context equality 19 <slot73,0> 22 <slot73,0>
CONTEXT: Detected context equality 19 <slot73,0> 22 <slot73,0>
CONTEXT: Detected context equality 15 <slot76,0> 17 <slot76,0>
CONTEXT: Detected context equality 15 <slot76,0> 17 <slot76,0>
CONTEXT: Detected context equality 15 <slot76,0> 21 <slot76,0>
CONTEXT: Detected context equality 15 <slot76,0> 21 <slot76,0>
CONTEXT: Detected context equality 19 <slot82,0> 21 <slot82,0>
CONTEXT: Detected context equality 19 <slot82,0> 22 <slot82,0>
CONTEXT: Detected context equality 19 <slot82,0> 22 <slot82,0>
CONTEXT: Detected context equality 22 <slot84,0> 24 <slot84,0>
CONTEXT: Detected context equality 22 <slot84,0> 25 <slot84,0>
CONTEXT: Detected context equality 22 <slot84,0> 25 <slot84,0>
CONTEXT: Detected context equality 20 <slot86,0> 22 <slot86,0>
CONTEXT: Detected context equality 20 <slot86,0> 23 <slot86,0>
CONTEXT: Detected context equality 20 <slot86,0> 23 <slot86,0>
CONTEXT: Detected context equality 24 <slot89,0> 26 <slot89,0>
CONTEXT: Detected context equality 24 <slot89,0> 27 <slot89,0>
CONTEXT: Detected context equality 24 <slot89,0> 27 <slot89,0>
CONTEXT: Detected context equality 22 <slot91,0> 24 <slot91,0>
CONTEXT: Detected context equality 22 <slot91,0> 25 <slot91,0>
CONTEXT: Detected context equality 22 <slot91,0> 25 <slot91,0>
CONTEXT: Detected context equality 12 <slot93,0> 14 <slot93,0>
CONTEXT: Detected context equality 12 <slot93,0> 15 <slot93,0>
CONTEXT: Detected context equality 12 <slot93,0> 15 <slot93,0>
COMPACT CLONES: True
CONTRACT: MiladyDeWinter
-----
Block: 1033
1033Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x02', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
1033-Stack size: 4 
1033-Equals Mem:<< [<12,27>, <17,31>]>> 
1033-NonEquals Mem: << [<12,17>, <12,31>, <17,27>, <27,31>]>> 
1033-Equals Sto:<< []>> 
1033-NonEquals Sto: << []>> 
1033-Useless: []
1033-Constancy: []
1033-ContextAliasing: []

.....
-----
Block: 461_0
461_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
461_0-Stack size: 2 
461_0-Equals Mem:<< []>> 
461_0-NonEquals Mem: << [<5,2>]>> 
461_0-Equals Sto:<< []>> 
461_0-NonEquals Sto: << []>> 
461_0-Useless: []
461_0-Constancy: []
461_0-ContextAliasing: []

.....
-----
Block: 6052_2
6052_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6052_2-Stack size: 11 
6052_2-Equals Mem:<< []>> 
6052_2-NonEquals Mem: << [<5,8>]>> 
6052_2-Equals Sto:<< []>> 
6052_2-NonEquals Sto: << []>> 
6052_2-Useless: []
6052_2-Constancy: [(5, 0), (4, 32)]
6052_2-ContextAliasing: []

.....
-----
Block: 6052_1
6052_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6052_1-Stack size: 14 
6052_1-Equals Mem:<< []>> 
6052_1-NonEquals Mem: << [<5,8>]>> 
6052_1-Equals Sto:<< []>> 
6052_1-NonEquals Sto: << []>> 
6052_1-Useless: []
6052_1-Constancy: [(8, 0), (7, 32)]
6052_1-ContextAliasing: []

.....
-----
Block: 6186_0
6186_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x1847', 'JUMPI']>> 
6186_0-Stack size: 13 
6186_0-Equals Mem:<< []>> 
6186_0-NonEquals Mem: << [<2,5>]>> 
6186_0-Equals Sto:<< []>> 
6186_0-NonEquals Sto: << []>> 
6186_0-Useless: []
6186_0-Constancy: [(7, 0), (6, 32)]
6186_0-ContextAliasing: []

.....
-----
Block: 2734
2734Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
2734-Stack size: 3 
2734-Equals Mem:<< []>> 
2734-NonEquals Mem: << [<6,1>]>> 
2734-Equals Sto:<< []>> 
2734-NonEquals Sto: << []>> 
2734-Useless: []
2734-Constancy: []
2734-ContextAliasing: []

.....
-----
Block: 6680_6
6680_6Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680_6-Stack size: 10 
6680_6-Equals Mem:<< []>> 
6680_6-NonEquals Mem: << [<5,8>]>> 
6680_6-Equals Sto:<< []>> 
6680_6-NonEquals Sto: << []>> 
6680_6-Useless: []
6680_6-Constancy: [(3, 0)]
6680_6-ContextAliasing: [(7, 7)]

.....
-----
Block: 2791
2791Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x0b22', 'DUP2', 'PUSH2 0x1a2c', 'JUMP']>> 
2791-Stack size: 9 
2791-Equals Mem:<< []>> 
2791-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
2791-Equals Sto:<< [<31,43>]>> 
2791-NonEquals Sto: << []>> 
2791-Useless: []
2791-Constancy: [(2, 0)]
2791-ContextAliasing: [(6, 7)]

.....
-----
Block: 6346_47
6346_47Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_47-Stack size: 9 
6346_47-Equals Mem:<< []>> 
6346_47-NonEquals Mem: << [<5,8>]>> 
6346_47-Equals Sto:<< []>> 
6346_47-NonEquals Sto: << []>> 
6346_47-Useless: []
6346_47-Constancy: [(1, 0)]
6346_47-ContextAliasing: []

.....
-----
Block: 1798
1798Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
1798-Stack size: 2 
1798-Equals Mem:<< []>> 
1798-NonEquals Mem: << [<6,1>]>> 
1798-Equals Sto:<< []>> 
1798-NonEquals Sto: << []>> 
1798-Useless: []
1798-Constancy: []
1798-ContextAliasing: []

.....
-----
Block: 1840
1840Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
1840-Stack size: 2 
1840-Equals Mem:<< []>> 
1840-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
1840-Equals Sto:<< []>> 
1840-NonEquals Sto: << []>> 
1840-Useless: []
1840-Constancy: []
1840-ContextAliasing: []

.....
-----
Block: 6346_43
6346_43Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_43-Stack size: 10 
6346_43-Equals Mem:<< []>> 
6346_43-NonEquals Mem: << [<5,8>]>> 
6346_43-Equals Sto:<< []>> 
6346_43-NonEquals Sto: << []>> 
6346_43-Useless: []
6346_43-Constancy: []
6346_43-ContextAliasing: []

.....
-----
Block: 2873_4
2873_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2873_4-Stack size: 6 
2873_4-Equals Mem:<< []>> 
2873_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2873_4-Equals Sto:<< []>> 
2873_4-NonEquals Sto: << []>> 
2873_4-Useless: []
2873_4-Constancy: []
2873_4-ContextAliasing: []

.....
-----
Block: 2971_4
2971_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2971_4-Stack size: 6 
2971_4-Equals Mem:<< []>> 
2971_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2971_4-Equals Sto:<< []>> 
2971_4-NonEquals Sto: << []>> 
2971_4-Useless: []
2971_4-Constancy: []
2971_4-ContextAliasing: []

.....
-----
Block: 2064
2064Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0834', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
2064-Stack size: 6 
2064-Equals Mem:<< [<18,6>]>> 
2064-NonEquals Mem: << []>> 
2064-Equals Sto:<< []>> 
2064-NonEquals Sto: << []>> 
2064-Useless: []
2064-Constancy: []
2064-ContextAliasing: []

.....
-----
Block: 2195
2195Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x08b7', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
2195-Stack size: 9 
2195-Equals Mem:<< [<18,6>]>> 
2195-NonEquals Mem: << []>> 
2195-Equals Sto:<< []>> 
2195-NonEquals Sto: << []>> 
2195-Useless: []
2195-Constancy: []
2195-ContextAliasing: []

.....
-----
Block: 2305
2305Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0925', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
2305-Stack size: 6 
2305-Equals Mem:<< [<18,6>]>> 
2305-NonEquals Mem: << []>> 
2305-Equals Sto:<< []>> 
2305-NonEquals Sto: << []>> 
2305-Useless: []
2305-Constancy: []
2305-ContextAliasing: []

.....
-----
Block: 2341
2341Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'SWAP1', 'SWAP2', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH1 0x13', 'SLOAD', 'AND', 'PUSH4 0xf305d719', 'SELFBALANCE', 'ADDRESS', 'PUSH2 0x096c', 'DUP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2341-Stack size: 3 
2341-Equals Mem:<< []>> 
2341-NonEquals Mem: << [<41,44>]>> 
2341-Equals Sto:<< [<3,23>]>> 
2341-NonEquals Sto: << [<3,25>, <3,48>, <23,25>, <23,48>, <25,48>]>> 
2341-Useless: []
2341-Constancy: []
2341-ContextAliasing: []

.....
-----
Block: 2533
2533Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0a0a', 'SWAP2', 'SWAP1', 'PUSH2 0x1a5f', 'JUMP']>> 
2533-Stack size: 7 
2533-Equals Mem:<< [<19,7>]>> 
2533-NonEquals Mem: << []>> 
2533-Equals Sto:<< []>> 
2533-NonEquals Sto: << []>> 
2533-Useless: []
2533-Constancy: []
2533-ContextAliasing: []

.....
-----
Block: 2677
2677Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0a99', 'SWAP2', 'SWAP1', 'PUSH2 0x1a8a', 'JUMP']>> 
2677-Stack size: 6 
2677-Equals Mem:<< [<18,6>]>> 
2677-NonEquals Mem: << []>> 
2677-Equals Sto:<< []>> 
2677-NonEquals Sto: << []>> 
2677-Useless: []
2677-Constancy: []
2677-ContextAliasing: []

.....
-----
Block: 6346_46
6346_46Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_46-Stack size: 20 
6346_46-Equals Mem:<< []>> 
6346_46-NonEquals Mem: << [<5,8>]>> 
6346_46-Equals Sto:<< []>> 
6346_46-NonEquals Sto: << []>> 
6346_46-Useless: []
6346_46-Constancy: [(11, 0), (7, 0)]
6346_46-ContextAliasing: []

.....
-----
Block: 6346_45
6346_45Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_45-Stack size: 16 
6346_45-Equals Mem:<< []>> 
6346_45-NonEquals Mem: << [<5,8>]>> 
6346_45-Equals Sto:<< []>> 
6346_45-NonEquals Sto: << []>> 
6346_45-Useless: []
6346_45-Constancy: [(7, 0), (3, 0)]
6346_45-ContextAliasing: []

.....
-----
Block: 6346_44
6346_44Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_44-Stack size: 15 
6346_44-Equals Mem:<< []>> 
6346_44-NonEquals Mem: << [<5,8>]>> 
6346_44-Equals Sto:<< []>> 
6346_44-NonEquals Sto: << []>> 
6346_44-Useless: []
6346_44-Constancy: [(6, 0), (2, 0)]
6346_44-ContextAliasing: []

.....
-----
Block: 424_0
424_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
424_0-Stack size: 3 
424_0-Equals Mem:<< []>> 
424_0-NonEquals Mem: << [<7,2>]>> 
424_0-Equals Sto:<< []>> 
424_0-NonEquals Sto: << []>> 
424_0-Useless: []
424_0-Constancy: []
424_0-ContextAliasing: []

.....
-----
Block: 461
461Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
461-Stack size: 3 
461-Equals Mem:<< []>> 
461-NonEquals Mem: << [<5,2>]>> 
461-Equals Sto:<< []>> 
461-NonEquals Sto: << []>> 
461-Useless: []
461-Constancy: []
461-ContextAliasing: []

.....
-----
Block: 3164_0
3164_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3164_0-Stack size: 9 
3164_0-Equals Mem:<< []>> 
3164_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3164_0-Equals Sto:<< []>> 
3164_0-NonEquals Sto: << []>> 
3164_0-Useless: []
3164_0-Constancy: [(4, 0)]
3164_0-ContextAliasing: []

.....
-----
Block: 3264_0
3264_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3264_0-Stack size: 9 
3264_0-Equals Mem:<< []>> 
3264_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3264_0-Equals Sto:<< []>> 
3264_0-NonEquals Sto: << []>> 
3264_0-Useless: []
3264_0-Constancy: [(4, 0)]
3264_0-ContextAliasing: []

.....
-----
Block: 3355_0
3355_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3355_0-Stack size: 9 
3355_0-Equals Mem:<< []>> 
3355_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3355_0-Equals Sto:<< []>> 
3355_0-NonEquals Sto: << []>> 
3355_0-Useless: []
3355_0-Constancy: [(4, 0)]
3355_0-ContextAliasing: []

.....
-----
Block: 5549_2
5549_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x16a1', 'JUMP']>> 
5549_2-Stack size: 14 
5549_2-Equals Mem:<< [<11,6>]>> 
5549_2-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5549_2-Equals Sto:<< []>> 
5549_2-NonEquals Sto: << []>> 
5549_2-Useless: []
5549_2-Constancy: [(9, 0), (4, 0), (3, 0)]
5549_2-ContextAliasing: []

.....
-----
Block: 5801_4
5801_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
5801_4-Stack size: 21 
5801_4-Equals Mem:<< []>> 
5801_4-NonEquals Mem: << [<6,1>]>> 
5801_4-Equals Sto:<< []>> 
5801_4-NonEquals Sto: << []>> 
5801_4-Useless: []
5801_4-Constancy: [(16, 0), (11, 0), (10, 0), (6, 0), (1, 0)]
5801_4-ContextAliasing: [(2, 20)]

.....
-----
Block: 5837_16
5837_16Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_16-Stack size: 23 
5837_16-Equals Mem:<< []>> 
5837_16-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_16-Equals Sto:<< []>> 
5837_16-NonEquals Sto: << []>> 
5837_16-Useless: []
5837_16-Constancy: [(18, 0), (13, 0), (12, 0), (8, 0), (3, 0)]
5837_16-ContextAliasing: [(4, 21)]

.....
-----
Block: 5861_16
5861_16Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_16-Stack size: 27 
5861_16-Equals Mem:<< []>> 
5861_16-NonEquals Mem: << [<11,5>]>> 
5861_16-Equals Sto:<< []>> 
5861_16-NonEquals Sto: << []>> 
5861_16-Useless: []
5861_16-Constancy: [(22, 0), (17, 0), (16, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_16-ContextAliasing: [(8, 21)]

.....
-----
Block: 6981_9
6981_9Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_9-Stack size: 25 
6981_9-Equals Mem:<< []>> 
6981_9-NonEquals Mem: << [<4,7>]>> 
6981_9-Equals Sto:<< []>> 
6981_9-NonEquals Sto: << []>> 
6981_9-Useless: []
6981_9-Constancy: [(20, 0), (15, 0), (14, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6981_9-ContextAliasing: []

.....
-----
Block: 3549_0
3549_0Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e1c', 'JUMPI']>> 
3549_0-Stack size: 11 
3549_0-Equals Mem:<< []>> 
3549_0-NonEquals Mem: << [<10,13>]>> 
3549_0-Equals Sto:<< []>> 
3549_0-NonEquals Sto: << []>> 
3549_0-Useless: []
3549_0-Constancy: [(6, 0), (1, 0)]
3549_0-ContextAliasing: []

.....
-----
Block: 3583_0
3583_0Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3583_0-Stack size: 12 
3583_0-Equals Mem:<< []>> 
3583_0-NonEquals Mem: << [<11,14>]>> 
3583_0-Equals Sto:<< []>> 
3583_0-NonEquals Sto: << []>> 
3583_0-Useless: []
3583_0-Constancy: [(7, 0), (2, 0)]
3583_0-ContextAliasing: []

.....
-----
Block: 5549_3
5549_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x16a1', 'JUMP']>> 
5549_3-Stack size: 14 
5549_3-Equals Mem:<< [<11,6>]>> 
5549_3-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5549_3-Equals Sto:<< []>> 
5549_3-NonEquals Sto: << []>> 
5549_3-Useless: []
5549_3-Constancy: [(9, 0), (4, 0)]
5549_3-ContextAliasing: []

.....
-----
Block: 5801_3
5801_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
5801_3-Stack size: 21 
5801_3-Equals Mem:<< []>> 
5801_3-NonEquals Mem: << [<6,1>]>> 
5801_3-Equals Sto:<< []>> 
5801_3-NonEquals Sto: << []>> 
5801_3-Useless: []
5801_3-Constancy: [(16, 0), (11, 0), (6, 0), (1, 0)]
5801_3-ContextAliasing: [(2, 20)]

.....
-----
Block: 5837_15
5837_15Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_15-Stack size: 23 
5837_15-Equals Mem:<< []>> 
5837_15-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_15-Equals Sto:<< []>> 
5837_15-NonEquals Sto: << []>> 
5837_15-Useless: []
5837_15-Constancy: [(18, 0), (13, 0), (8, 0), (3, 0)]
5837_15-ContextAliasing: [(4, 21)]

.....
-----
Block: 5861_15
5861_15Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_15-Stack size: 27 
5861_15-Equals Mem:<< []>> 
5861_15-NonEquals Mem: << [<11,5>]>> 
5861_15-Equals Sto:<< []>> 
5861_15-NonEquals Sto: << []>> 
5861_15-Useless: []
5861_15-Constancy: [(22, 0), (17, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_15-ContextAliasing: [(8, 21)]

.....
-----
Block: 6981_7
6981_7Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_7-Stack size: 25 
6981_7-Equals Mem:<< []>> 
6981_7-NonEquals Mem: << [<4,7>]>> 
6981_7-Equals Sto:<< []>> 
6981_7-NonEquals Sto: << []>> 
6981_7-Useless: []
6981_7-Constancy: [(20, 0), (15, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6981_7-ContextAliasing: []

.....
-----
Block: 3722_0
3722_0Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f1e', 'JUMPI']>> 
3722_0-Stack size: 11 
3722_0-Equals Mem:<< []>> 
3722_0-NonEquals Mem: << [<4,7>]>> 
3722_0-Equals Sto:<< []>> 
3722_0-NonEquals Sto: << []>> 
3722_0-Useless: []
3722_0-Constancy: [(6, 0)]
3722_0-ContextAliasing: []

.....
-----
Block: 3743_0
3743_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3743_0-Stack size: 11 
3743_0-Equals Mem:<< []>> 
3743_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <26,1>, <33,1>]>> 
3743_0-Equals Sto:<< []>> 
3743_0-NonEquals Sto: << []>> 
3743_0-Useless: []
3743_0-Constancy: [(6, 0)]
3743_0-ContextAliasing: []

.....
-----
Block: 3870_0
3870_0Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3870_0-Stack size: 11 
3870_0-Equals Mem:<< []>> 
3870_0-NonEquals Mem: << [<5,8>]>> 
3870_0-Equals Sto:<< []>> 
3870_0-NonEquals Sto: << []>> 
3870_0-Useless: []
3870_0-Constancy: [(6, 0)]
3870_0-ContextAliasing: []

.....
-----
Block: 3938_0
3938_0Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3938_0-Stack size: 12 
3938_0-Equals Mem:<< []>> 
3938_0-NonEquals Mem: << [<11,14>]>> 
3938_0-Equals Sto:<< []>> 
3938_0-NonEquals Sto: << []>> 
3938_0-Useless: []
3938_0-Constancy: [(7, 0)]
3938_0-ContextAliasing: []

.....
-----
Block: 3983_0
3983_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3983_0-Stack size: 11 
3983_0-Equals Mem:<< []>> 
3983_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
3983_0-Equals Sto:<< []>> 
3983_0-NonEquals Sto: << []>> 
3983_0-Useless: []
3983_0-Constancy: [(6, 0)]
3983_0-ContextAliasing: []

.....
-----
Block: 4054_0
4054_0Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP4', 'PUSH2 0x0ff8', 'DUP7', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4054_0-Stack size: 11 
4054_0-Equals Mem:<< []>> 
4054_0-NonEquals Mem: << [<15,18>]>> 
4054_0-Equals Sto:<< []>> 
4054_0-NonEquals Sto: << [<2,22>]>> 
4054_0-Useless: []
4054_0-Constancy: [(6, 0)]
4054_0-ContextAliasing: []

.....
-----
Block: 6346_40
6346_40Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_40-Stack size: 17 
6346_40-Equals Mem:<< []>> 
6346_40-NonEquals Mem: << [<5,8>]>> 
6346_40-Equals Sto:<< []>> 
6346_40-NonEquals Sto: << []>> 
6346_40-Useless: []
6346_40-Constancy: [(12, 0)]
6346_40-ContextAliasing: []

.....
-----
Block: 4105_0
4105_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
4105_0-Stack size: 11 
4105_0-Equals Mem:<< []>> 
4105_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4105_0-Equals Sto:<< []>> 
4105_0-NonEquals Sto: << []>> 
4105_0-Useless: []
4105_0-Constancy: [(6, 0)]
4105_0-ContextAliasing: []

.....
-----
Block: 6346_39
6346_39Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_39-Stack size: 18 
6346_39-Equals Mem:<< []>> 
6346_39-NonEquals Mem: << [<5,8>]>> 
6346_39-Equals Sto:<< []>> 
6346_39-NonEquals Sto: << []>> 
6346_39-Useless: []
6346_39-Constancy: [(13, 0), (4, 0), (1, 0)]
6346_39-ContextAliasing: []

.....
-----
Block: 5549_4
5549_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x16a1', 'JUMP']>> 
5549_4-Stack size: 14 
5549_4-Equals Mem:<< [<11,6>]>> 
5549_4-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5549_4-Equals Sto:<< []>> 
5549_4-NonEquals Sto: << []>> 
5549_4-Useless: []
5549_4-Constancy: [(9, 0)]
5549_4-ContextAliasing: []

.....
-----
Block: 5801_2
5801_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
5801_2-Stack size: 21 
5801_2-Equals Mem:<< []>> 
5801_2-NonEquals Mem: << [<6,1>]>> 
5801_2-Equals Sto:<< []>> 
5801_2-NonEquals Sto: << []>> 
5801_2-Useless: []
5801_2-Constancy: [(16, 0), (6, 0), (1, 0)]
5801_2-ContextAliasing: [(2, 20)]

.....
-----
Block: 5837_14
5837_14Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_14-Stack size: 23 
5837_14-Equals Mem:<< []>> 
5837_14-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_14-Equals Sto:<< []>> 
5837_14-NonEquals Sto: << []>> 
5837_14-Useless: []
5837_14-Constancy: [(18, 0), (8, 0), (3, 0)]
5837_14-ContextAliasing: [(4, 21)]

.....
-----
Block: 5861_14
5861_14Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_14-Stack size: 27 
5861_14-Equals Mem:<< []>> 
5861_14-NonEquals Mem: << [<11,5>]>> 
5861_14-Equals Sto:<< []>> 
5861_14-NonEquals Sto: << []>> 
5861_14-Useless: []
5861_14-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_14-ContextAliasing: [(8, 21)]

.....
-----
Block: 6981_5
6981_5Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_5-Stack size: 25 
6981_5-Equals Mem:<< []>> 
6981_5-NonEquals Mem: << [<4,7>]>> 
6981_5-Equals Sto:<< []>> 
6981_5-NonEquals Sto: << []>> 
6981_5-Useless: []
6981_5-Constancy: [(20, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6981_5-ContextAliasing: []

.....
-----
Block: 6346_38
6346_38Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_38-Stack size: 23 
6346_38-Equals Mem:<< []>> 
6346_38-NonEquals Mem: << [<5,8>]>> 
6346_38-Equals Sto:<< []>> 
6346_38-NonEquals Sto: << []>> 
6346_38-Useless: []
6346_38-Constancy: [(18, 0), (6, 0), (5, 0)]
6346_38-ContextAliasing: []

.....
-----
Block: 6981_6
6981_6Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_6-Stack size: 23 
6981_6-Equals Mem:<< []>> 
6981_6-NonEquals Mem: << [<4,7>]>> 
6981_6-Equals Sto:<< []>> 
6981_6-NonEquals Sto: << []>> 
6981_6-Useless: []
6981_6-Constancy: [(18, 0), (6, 0), (0, 0)]
6981_6-ContextAliasing: []

.....
-----
Block: 5461_2
5461_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5461_2-Stack size: 18 
5461_2-Equals Mem:<< []>> 
5461_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5461_2-Equals Sto:<< []>> 
5461_2-NonEquals Sto: << []>> 
5461_2-Useless: []
5461_2-Constancy: [(13, 0), (1, 0)]
5461_2-ContextAliasing: []

.....
-----
Block: 4270_0
4270_0Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x10e4', 'JUMPI']>> 
4270_0-Stack size: 11 
4270_0-Equals Mem:<< []>> 
4270_0-NonEquals Mem: << [<5,8>]>> 
4270_0-Equals Sto:<< []>> 
4270_0-NonEquals Sto: << [<12,14>]>> 
4270_0-Useless: []
4270_0-Constancy: [(6, 0)]
4270_0-ContextAliasing: []

.....
-----
Block: 6680_5
6680_5Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680_5-Stack size: 19 
6680_5-Equals Mem:<< []>> 
6680_5-NonEquals Mem: << [<5,8>]>> 
6680_5-Equals Sto:<< []>> 
6680_5-NonEquals Sto: << []>> 
6680_5-Useless: []
6680_5-Constancy: [(14, 0), (1, 0)]
6680_5-ContextAliasing: [(4, 16)]

.....
-----
Block: 5146_1
5146_1Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x143e', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
5146_1-Stack size: 19 
5146_1-Equals Mem:<< [<18,6>]>> 
5146_1-NonEquals Mem: << []>> 
5146_1-Equals Sto:<< []>> 
5146_1-NonEquals Sto: << []>> 
5146_1-Useless: []
5146_1-Constancy: [(14, 0)]
5146_1-ContextAliasing: []

.....
-----
Block: 6680_4
6680_4Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680_4-Stack size: 19 
6680_4-Equals Mem:<< []>> 
6680_4-NonEquals Mem: << [<5,8>]>> 
6680_4-Equals Sto:<< []>> 
6680_4-NonEquals Sto: << []>> 
6680_4-Useless: []
6680_4-Constancy: [(14, 0)]
6680_4-ContextAliasing: [(4, 16)]

.....
-----
Block: 2873_3
2873_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2873_3-Stack size: 19 
2873_3-Equals Mem:<< []>> 
2873_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2873_3-Equals Sto:<< []>> 
2873_3-NonEquals Sto: << []>> 
2873_3-Useless: []
2873_3-Constancy: [(14, 0)]
2873_3-ContextAliasing: []

.....
-----
Block: 2971_3
2971_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2971_3-Stack size: 19 
2971_3-Equals Mem:<< []>> 
2971_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2971_3-Equals Sto:<< []>> 
2971_3-NonEquals Sto: << []>> 
2971_3-Useless: []
2971_3-Constancy: [(14, 0)]
2971_3-ContextAliasing: []

.....
-----
Block: 5239_1
5239_1Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x14af', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1acf', 'JUMP']>> 
5239_1-Stack size: 15 
5239_1-Equals Mem:<< []>> 
5239_1-NonEquals Mem: << [<9,4>]>> 
5239_1-Equals Sto:<< []>> 
5239_1-NonEquals Sto: << []>> 
5239_1-Useless: []
5239_1-Constancy: [(10, 0)]
5239_1-ContextAliasing: []

.....
-----
Block: 6863_1
6863_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6863_1-Stack size: 24 
6863_1-Equals Mem:<< []>> 
6863_1-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6863_1-Equals Sto:<< []>> 
6863_1-NonEquals Sto: << []>> 
6863_1-Useless: []
6863_1-Constancy: [(19, 0), (4, 0)]
6863_1-ContextAliasing: [(9, 20)]

.....
-----
Block: 6913_1
6913_1Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1af8', 'JUMP']>> 
6913_1-Stack size: 30 
6913_1-Equals Mem:<< []>> 
6913_1-NonEquals Mem: << [<9,1>]>> 
6913_1-Equals Sto:<< []>> 
6913_1-NonEquals Sto: << []>> 
6913_1-Useless: []
6913_1-Constancy: [(25, 0), (10, 0), (5, 0), (3, 32)]
6913_1-ContextAliasing: [(15, 20)]

.....
-----
Block: 6346_41
6346_41Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_41-Stack size: 23 
6346_41-Equals Mem:<< []>> 
6346_41-NonEquals Mem: << [<5,8>]>> 
6346_41-Equals Sto:<< []>> 
6346_41-NonEquals Sto: << []>> 
6346_41-Useless: []
6346_41-Constancy: [(18, 0), (13, 0), (6, 0), (5, 0)]
6346_41-ContextAliasing: []

.....
-----
Block: 6981_8
6981_8Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_8-Stack size: 23 
6981_8-Equals Mem:<< []>> 
6981_8-NonEquals Mem: << [<4,7>]>> 
6981_8-Equals Sto:<< []>> 
6981_8-NonEquals Sto: << []>> 
6981_8-Useless: []
6981_8-Constancy: [(18, 0), (13, 0), (6, 0), (0, 0)]
6981_8-ContextAliasing: []

.....
-----
Block: 5461_3
5461_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5461_3-Stack size: 18 
5461_3-Equals Mem:<< []>> 
5461_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5461_3-Equals Sto:<< []>> 
5461_3-NonEquals Sto: << []>> 
5461_3-Useless: []
5461_3-Constancy: [(13, 0), (8, 0), (1, 0)]
5461_3-ContextAliasing: []

.....
-----
Block: 4427_0
4427_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x116d', 'SWAP1', 'DUP5', 'PUSH2 0x1602', 'JUMP']>> 
4427_0-Stack size: 11 
4427_0-Equals Mem:<< []>> 
4427_0-NonEquals Mem: << [<11,14>]>> 
4427_0-Equals Sto:<< []>> 
4427_0-NonEquals Sto: << []>> 
4427_0-Useless: []
4427_0-Constancy: [(6, 0)]
4427_0-ContextAliasing: []

.....
-----
Block: 5634_4
5634_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_4-Stack size: 14 
5634_4-Equals Mem:<< [<11,6>]>> 
5634_4-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_4-Equals Sto:<< []>> 
5634_4-NonEquals Sto: << []>> 
5634_4-Useless: []
5634_4-Constancy: [(9, 0)]
5634_4-ContextAliasing: []

.....
-----
Block: 4944_9
4944_9Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_9-Stack size: 21 
4944_9-Equals Mem:<< []>> 
4944_9-NonEquals Mem: << [<6,1>]>> 
4944_9-Equals Sto:<< []>> 
4944_9-NonEquals Sto: << []>> 
4944_9-Useless: []
4944_9-Constancy: [(16, 0), (6, 0), (1, 0)]
4944_9-ContextAliasing: [(2, 20)]

.....
-----
Block: 5837_13
5837_13Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_13-Stack size: 23 
5837_13-Equals Mem:<< []>> 
5837_13-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_13-Equals Sto:<< []>> 
5837_13-NonEquals Sto: << []>> 
5837_13-Useless: []
5837_13-Constancy: [(18, 0), (8, 0), (3, 0)]
5837_13-ContextAliasing: [(4, 21)]

.....
-----
Block: 5861_13
5861_13Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_13-Stack size: 27 
5861_13-Equals Mem:<< []>> 
5861_13-NonEquals Mem: << [<11,5>]>> 
5861_13-Equals Sto:<< []>> 
5861_13-NonEquals Sto: << []>> 
5861_13-Useless: []
5861_13-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_13-ContextAliasing: [(8, 21)]

.....
-----
Block: 6346_37
6346_37Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_37-Stack size: 26 
6346_37-Equals Mem:<< []>> 
6346_37-NonEquals Mem: << [<5,8>]>> 
6346_37-Equals Sto:<< []>> 
6346_37-NonEquals Sto: << []>> 
6346_37-Useless: []
6346_37-Constancy: [(21, 0), (11, 0), (6, 0), (5, 0)]
6346_37-ContextAliasing: []

.....
-----
Block: 4461_0
4461_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x11ba', 'PUSH2 0x119c', 'DUP3', 'PUSH2 0x1196', 'DUP7', 'DUP7', 'PUSH2 0x1602', 'JUMP']>> 
4461_0-Stack size: 12 
4461_0-Equals Mem:<< []>> 
4461_0-NonEquals Mem: << [<11,14>]>> 
4461_0-Equals Sto:<< []>> 
4461_0-NonEquals Sto: << []>> 
4461_0-Useless: []
4461_0-Constancy: [(7, 0)]
4461_0-ContextAliasing: []

.....
-----
Block: 5634_5
5634_5Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_5-Stack size: 17 
5634_5-Equals Mem:<< [<11,6>]>> 
5634_5-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_5-Equals Sto:<< []>> 
5634_5-NonEquals Sto: << []>> 
5634_5-Useless: []
5634_5-Constancy: [(12, 0)]
5634_5-ContextAliasing: []

.....
-----
Block: 4944_8
4944_8Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_8-Stack size: 24 
4944_8-Equals Mem:<< []>> 
4944_8-NonEquals Mem: << [<6,1>]>> 
4944_8-Equals Sto:<< []>> 
4944_8-NonEquals Sto: << []>> 
4944_8-Useless: []
4944_8-Constancy: [(19, 0), (6, 0), (1, 0)]
4944_8-ContextAliasing: [(2, 23)]

.....
-----
Block: 5837_12
5837_12Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_12-Stack size: 26 
5837_12-Equals Mem:<< []>> 
5837_12-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_12-Equals Sto:<< []>> 
5837_12-NonEquals Sto: << []>> 
5837_12-Useless: []
5837_12-Constancy: [(21, 0), (8, 0), (3, 0)]
5837_12-ContextAliasing: [(4, 24)]

.....
-----
Block: 5861_12
5861_12Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_12-Stack size: 30 
5861_12-Equals Mem:<< []>> 
5861_12-NonEquals Mem: << [<11,5>]>> 
5861_12-Equals Sto:<< []>> 
5861_12-NonEquals Sto: << []>> 
5861_12-Useless: []
5861_12-Constancy: [(25, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_12-ContextAliasing: [(8, 24)]

.....
-----
Block: 6346_36
6346_36Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_36-Stack size: 29 
6346_36-Equals Mem:<< []>> 
6346_36-NonEquals Mem: << [<5,8>]>> 
6346_36-Equals Sto:<< []>> 
6346_36-NonEquals Sto: << []>> 
6346_36-Useless: []
6346_36-Constancy: [(24, 0), (11, 0), (6, 0), (5, 0)]
6346_36-ContextAliasing: []

.....
-----
Block: 5634_6
5634_6Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_6-Stack size: 15 
5634_6-Equals Mem:<< [<11,6>]>> 
5634_6-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_6-Equals Sto:<< []>> 
5634_6-NonEquals Sto: << []>> 
5634_6-Useless: []
5634_6-Constancy: [(10, 0)]
5634_6-ContextAliasing: []

.....
-----
Block: 4944_7
4944_7Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_7-Stack size: 22 
4944_7-Equals Mem:<< []>> 
4944_7-NonEquals Mem: << [<6,1>]>> 
4944_7-Equals Sto:<< []>> 
4944_7-NonEquals Sto: << []>> 
4944_7-Useless: []
4944_7-Constancy: [(17, 0), (6, 0), (1, 0)]
4944_7-ContextAliasing: [(2, 21)]

.....
-----
Block: 5837_11
5837_11Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_11-Stack size: 24 
5837_11-Equals Mem:<< []>> 
5837_11-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_11-Equals Sto:<< []>> 
5837_11-NonEquals Sto: << []>> 
5837_11-Useless: []
5837_11-Constancy: [(19, 0), (8, 0), (3, 0)]
5837_11-ContextAliasing: [(4, 22)]

.....
-----
Block: 5861_11
5861_11Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_11-Stack size: 28 
5861_11-Equals Mem:<< []>> 
5861_11-NonEquals Mem: << [<11,5>]>> 
5861_11-Equals Sto:<< []>> 
5861_11-NonEquals Sto: << []>> 
5861_11-Useless: []
5861_11-Constancy: [(23, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_11-ContextAliasing: [(8, 22)]

.....
-----
Block: 6346_35
6346_35Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_35-Stack size: 27 
6346_35-Equals Mem:<< []>> 
6346_35-NonEquals Mem: << [<5,8>]>> 
6346_35-Equals Sto:<< []>> 
6346_35-NonEquals Sto: << []>> 
6346_35-Useless: []
6346_35-Constancy: [(22, 0), (11, 0), (6, 0), (5, 0)]
6346_35-ContextAliasing: []

.....
-----
Block: 4508_0
4508_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1643', 'JUMP']>> 
4508_0-Stack size: 13 
4508_0-Equals Mem:<< []>> 
4508_0-NonEquals Mem: << [<11,14>]>> 
4508_0-Equals Sto:<< []>> 
4508_0-NonEquals Sto: << []>> 
4508_0-Useless: []
4508_0-Constancy: [(8, 0)]
4508_0-ContextAliasing: []

.....
-----
Block: 6346_34
6346_34Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_34-Stack size: 21 
6346_34-Equals Mem:<< []>> 
6346_34-NonEquals Mem: << [<5,8>]>> 
6346_34-Equals Sto:<< []>> 
6346_34-NonEquals Sto: << []>> 
6346_34-Useless: []
6346_34-Constancy: [(16, 0), (6, 0), (5, 0)]
6346_34-ContextAliasing: []

.....
-----
Block: 5722_4
5722_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5722_4-Stack size: 16 
5722_4-Equals Mem:<< []>> 
5722_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5722_4-Equals Sto:<< []>> 
5722_4-NonEquals Sto: << []>> 
5722_4-Useless: []
5722_4-Constancy: [(11, 0), (1, 0)]
5722_4-ContextAliasing: []

.....
-----
Block: 4538_0
4538_0Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP7', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP7', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x1207', 'DUP5', 'PUSH2 0x1196', 'DUP9', 'DUP9', 'PUSH2 0x1602', 'JUMP']>> 
4538_0-Stack size: 12 
4538_0-Equals Mem:<< []>> 
4538_0-NonEquals Mem: << [<12,15>]>> 
4538_0-Equals Sto:<< []>> 
4538_0-NonEquals Sto: << []>> 
4538_0-Useless: []
4538_0-Constancy: [(7, 0)]
4538_0-ContextAliasing: []

.....
-----
Block: 5634_7
5634_7Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_7-Stack size: 19 
5634_7-Equals Mem:<< [<11,6>]>> 
5634_7-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_7-Equals Sto:<< []>> 
5634_7-NonEquals Sto: << []>> 
5634_7-Useless: []
5634_7-Constancy: [(14, 0)]
5634_7-ContextAliasing: []

.....
-----
Block: 4944_6
4944_6Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_6-Stack size: 26 
4944_6-Equals Mem:<< []>> 
4944_6-NonEquals Mem: << [<6,1>]>> 
4944_6-Equals Sto:<< []>> 
4944_6-NonEquals Sto: << []>> 
4944_6-Useless: []
4944_6-Constancy: [(21, 0), (6, 0), (1, 0)]
4944_6-ContextAliasing: [(2, 25)]

.....
-----
Block: 5837_10
5837_10Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_10-Stack size: 28 
5837_10-Equals Mem:<< []>> 
5837_10-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_10-Equals Sto:<< []>> 
5837_10-NonEquals Sto: << []>> 
5837_10-Useless: []
5837_10-Constancy: [(23, 0), (8, 0), (3, 0)]
5837_10-ContextAliasing: [(4, 26)]

.....
-----
Block: 5861_10
5861_10Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_10-Stack size: 32 
5861_10-Equals Mem:<< []>> 
5861_10-NonEquals Mem: << [<11,5>]>> 
5861_10-Equals Sto:<< []>> 
5861_10-NonEquals Sto: << []>> 
5861_10-Useless: []
5861_10-Constancy: [(27, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_10-ContextAliasing: [(8, 26)]

.....
-----
Block: 6346_33
6346_33Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_33-Stack size: 31 
6346_33-Equals Mem:<< []>> 
6346_33-NonEquals Mem: << [<5,8>]>> 
6346_33-Equals Sto:<< []>> 
6346_33-NonEquals Sto: << []>> 
6346_33-Useless: []
6346_33-Constancy: [(26, 0), (11, 0), (6, 0), (5, 0)]
6346_33-ContextAliasing: []

.....
-----
Block: 5634_8
5634_8Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_8-Stack size: 17 
5634_8-Equals Mem:<< [<11,6>]>> 
5634_8-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_8-Equals Sto:<< []>> 
5634_8-NonEquals Sto: << []>> 
5634_8-Useless: []
5634_8-Constancy: [(12, 0)]
5634_8-ContextAliasing: []

.....
-----
Block: 4944_5
4944_5Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_5-Stack size: 24 
4944_5-Equals Mem:<< []>> 
4944_5-NonEquals Mem: << [<6,1>]>> 
4944_5-Equals Sto:<< []>> 
4944_5-NonEquals Sto: << []>> 
4944_5-Useless: []
4944_5-Constancy: [(19, 0), (6, 0), (1, 0)]
4944_5-ContextAliasing: [(2, 23)]

.....
-----
Block: 5837_9
5837_9Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_9-Stack size: 26 
5837_9-Equals Mem:<< []>> 
5837_9-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_9-Equals Sto:<< []>> 
5837_9-NonEquals Sto: << []>> 
5837_9-Useless: []
5837_9-Constancy: [(21, 0), (8, 0), (3, 0)]
5837_9-ContextAliasing: [(4, 24)]

.....
-----
Block: 5861_9
5861_9Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_9-Stack size: 30 
5861_9-Equals Mem:<< []>> 
5861_9-NonEquals Mem: << [<11,5>]>> 
5861_9-Equals Sto:<< []>> 
5861_9-NonEquals Sto: << []>> 
5861_9-Useless: []
5861_9-Constancy: [(25, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_9-ContextAliasing: [(8, 24)]

.....
-----
Block: 6346_32
6346_32Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_32-Stack size: 29 
6346_32-Equals Mem:<< []>> 
6346_32-NonEquals Mem: << [<5,8>]>> 
6346_32-Equals Sto:<< []>> 
6346_32-NonEquals Sto: << []>> 
6346_32-Useless: []
6346_32-Constancy: [(24, 0), (11, 0), (6, 0), (5, 0)]
6346_32-ContextAliasing: []

.....
-----
Block: 4639_0
4639_0Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x1237', 'SWAP1', 'DUP4', 'PUSH2 0x1643', 'JUMP']>> 
4639_0-Stack size: 11 
4639_0-Equals Mem:<< []>> 
4639_0-NonEquals Mem: << [<4,7>]>> 
4639_0-Equals Sto:<< []>> 
4639_0-NonEquals Sto: << []>> 
4639_0-Useless: []
4639_0-Constancy: [(6, 0)]
4639_0-ContextAliasing: []

.....
-----
Block: 6346_31
6346_31Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_31-Stack size: 21 
6346_31-Equals Mem:<< []>> 
6346_31-NonEquals Mem: << [<5,8>]>> 
6346_31-Equals Sto:<< []>> 
6346_31-NonEquals Sto: << []>> 
6346_31-Useless: []
6346_31-Constancy: [(16, 0), (6, 0), (5, 0)]
6346_31-ContextAliasing: []

.....
-----
Block: 5722_3
5722_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5722_3-Stack size: 16 
5722_3-Equals Mem:<< []>> 
5722_3-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5722_3-Equals Sto:<< []>> 
5722_3-NonEquals Sto: << []>> 
5722_3-Useless: []
5722_3-Constancy: [(11, 0), (1, 0)]
5722_3-ContextAliasing: []

.....
-----
Block: 4663_0
4663_0Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP8', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1287', 'SWAP1', 'DUP7', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4663_0-Stack size: 12 
4663_0-Equals Mem:<< []>> 
4663_0-NonEquals Mem: << [<5,19>, <5,8>, <5,34>, <8,19>, <8,34>, <34,13>, <34,19>, <13,19>]>> 
4663_0-Equals Sto:<< []>> 
4663_0-NonEquals Sto: << []>> 
4663_0-Useless: []
4663_0-Constancy: [(7, 0)]
4663_0-ContextAliasing: []

.....
-----
Block: 4759_0
4759_0Instr:<<['PUSH0', 'DUP1', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49', 'SLOAD', 'PUSH2 0x12ca', 'SWAP1', 'DUP3', 'PUSH2 0x1643', 'JUMP']>> 
4759_0-Stack size: 11 
4759_0-Equals Mem:<< []>> 
4759_0-NonEquals Mem: << [<2,5>]>> 
4759_0-Equals Sto:<< []>> 
4759_0-NonEquals Sto: << []>> 
4759_0-Useless: [2, 5]
4759_0-Constancy: [(6, 0)]
4759_0-ContextAliasing: []

.....
-----
Block: 6346_30
6346_30Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_30-Stack size: 21 
6346_30-Equals Mem:<< []>> 
6346_30-NonEquals Mem: << [<5,8>]>> 
6346_30-Equals Sto:<< []>> 
6346_30-NonEquals Sto: << []>> 
6346_30-Useless: []
6346_30-Constancy: [(16, 0), (6, 0), (5, 0)]
6346_30-ContextAliasing: []

.....
-----
Block: 5722_2
5722_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5722_2-Stack size: 16 
5722_2-Equals Mem:<< []>> 
5722_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5722_2-Equals Sto:<< []>> 
5722_2-NonEquals Sto: << []>> 
5722_2-Useless: []
5722_2-Constancy: [(11, 0), (1, 0)]
5722_2-ContextAliasing: []

.....
-----
Block: 4810_0
4810_0Instr:<<['JUMPDEST', 'PUSH0', 'DUP1', 'DUP1', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49', 'SWAP2', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP8', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1335', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4810_0-Stack size: 12 
4810_0-Equals Mem:<< []>> 
4810_0-NonEquals Mem: << [<4,14>, <4,7>, <4,29>, <7,14>, <7,29>, <29,14>]>> 
4810_0-Equals Sto:<< []>> 
4810_0-NonEquals Sto: << []>> 
4810_0-Useless: [4, 7]
4810_0-Constancy: [(7, 0)]
4810_0-ContextAliasing: []

.....
-----
Block: 424
424Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
424-Stack size: 2 
424-Equals Mem:<< []>> 
424-NonEquals Mem: << [<7,2>]>> 
424-Equals Sto:<< []>> 
424-NonEquals Sto: << []>> 
424-Useless: []
424-Constancy: []
424-ContextAliasing: []

.....
-----
Block: 6346_42
6346_42Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_42-Stack size: 23 
6346_42-Equals Mem:<< []>> 
6346_42-NonEquals Mem: << [<5,8>]>> 
6346_42-Equals Sto:<< []>> 
6346_42-NonEquals Sto: << []>> 
6346_42-Useless: []
6346_42-Constancy: [(18, 0), (13, 0), (12, 0), (6, 0), (5, 0)]
6346_42-ContextAliasing: []

.....
-----
Block: 6981_10
6981_10Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_10-Stack size: 23 
6981_10-Equals Mem:<< []>> 
6981_10-NonEquals Mem: << [<4,7>]>> 
6981_10-Equals Sto:<< []>> 
6981_10-NonEquals Sto: << []>> 
6981_10-Useless: []
6981_10-Constancy: [(18, 0), (13, 0), (12, 0), (6, 0), (0, 0)]
6981_10-ContextAliasing: []

.....
-----
Block: 5461_4
5461_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5461_4-Stack size: 18 
5461_4-Equals Mem:<< []>> 
5461_4-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5461_4-Equals Sto:<< []>> 
5461_4-NonEquals Sto: << []>> 
5461_4-Useless: []
5461_4-Constancy: [(13, 0), (8, 0), (7, 0), (1, 0)]
5461_4-ContextAliasing: []

.....
-----
Block: 844
844Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x06', 'DUP2', 'MSTORE', 'PUSH6 0x4d494c414459', 'PUSH1 0xd0', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x0173', 'JUMP']>> 
844-Stack size: 2 
844-Equals Mem:<< [<10,4>]>> 
844-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
844-Equals Sto:<< []>> 
844-NonEquals Sto: << []>> 
844-Useless: []
844-Constancy: []
844-ContextAliasing: []

.....
-----
Block: 5837
5837Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837-Stack size: 4 
5837-Equals Mem:<< []>> 
5837-NonEquals Mem: << [<5,7>, <5,12>, <12,7>]>> 
5837-Equals Sto:<< []>> 
5837-NonEquals Sto: << []>> 
5837-Useless: []
5837-Constancy: []
5837-ContextAliasing: []

.....
-----
Block: 5861
5861Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861-Stack size: 8 
5861-Equals Mem:<< []>> 
5861-NonEquals Mem: << [<11,5>]>> 
5861-Equals Sto:<< []>> 
5861-NonEquals Sto: << []>> 
5861-Useless: []
5861-Constancy: [(3, 0), (2, 32)]
5861-ContextAliasing: []

.....
-----
Block: 785
785Instr:<<['JUMPDEST', 'POP', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
785-Stack size: 2 
785-Equals Mem:<< []>> 
785-NonEquals Mem: << [<15,5>]>> 
785-Equals Sto:<< []>> 
785-NonEquals Sto: << []>> 
785-Useless: []
785-Constancy: []
785-ContextAliasing: []

.....
-----
Block: 1599
1599Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
1599-Stack size: 2 
1599-Equals Mem:<< []>> 
1599-NonEquals Mem: << [<6,1>]>> 
1599-Equals Sto:<< []>> 
1599-NonEquals Sto: << []>> 
1599-Useless: []
1599-Constancy: []
1599-ContextAliasing: []

.....
-----
Block: 6346_26
6346_26Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_26-Stack size: 7 
6346_26-Equals Mem:<< []>> 
6346_26-NonEquals Mem: << [<5,8>]>> 
6346_26-Equals Sto:<< []>> 
6346_26-NonEquals Sto: << []>> 
6346_26-Useless: []
6346_26-Constancy: []
6346_26-ContextAliasing: []

.....
-----
Block: 6346_22
6346_22Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_22-Stack size: 7 
6346_22-Equals Mem:<< []>> 
6346_22-NonEquals Mem: << [<5,8>]>> 
6346_22-Equals Sto:<< []>> 
6346_22-NonEquals Sto: << []>> 
6346_22-Useless: []
6346_22-Constancy: []
6346_22-ContextAliasing: []

.....
-----
Block: 6346_18
6346_18Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_18-Stack size: 8 
6346_18-Equals Mem:<< []>> 
6346_18-NonEquals Mem: << [<5,8>]>> 
6346_18-Equals Sto:<< []>> 
6346_18-NonEquals Sto: << []>> 
6346_18-Useless: []
6346_18-Constancy: []
6346_18-ContextAliasing: []

.....
-----
Block: 6346_21
6346_21Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_21-Stack size: 18 
6346_21-Equals Mem:<< []>> 
6346_21-NonEquals Mem: << [<5,8>]>> 
6346_21-Equals Sto:<< []>> 
6346_21-NonEquals Sto: << []>> 
6346_21-Useless: []
6346_21-Constancy: [(11, 0), (7, 0)]
6346_21-ContextAliasing: []

.....
-----
Block: 6346_20
6346_20Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_20-Stack size: 14 
6346_20-Equals Mem:<< []>> 
6346_20-NonEquals Mem: << [<5,8>]>> 
6346_20-Equals Sto:<< []>> 
6346_20-NonEquals Sto: << []>> 
6346_20-Useless: []
6346_20-Constancy: [(7, 0), (3, 0)]
6346_20-ContextAliasing: []

.....
-----
Block: 6346_19
6346_19Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_19-Stack size: 13 
6346_19-Equals Mem:<< []>> 
6346_19-NonEquals Mem: << [<5,8>]>> 
6346_19-Equals Sto:<< []>> 
6346_19-NonEquals Sto: << []>> 
6346_19-Useless: []
6346_19-Constancy: [(6, 0), (2, 0)]
6346_19-ContextAliasing: []

.....
-----
Block: 6346_25
6346_25Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_25-Stack size: 17 
6346_25-Equals Mem:<< []>> 
6346_25-NonEquals Mem: << [<5,8>]>> 
6346_25-Equals Sto:<< []>> 
6346_25-NonEquals Sto: << []>> 
6346_25-Useless: []
6346_25-Constancy: [(11, 0), (7, 0)]
6346_25-ContextAliasing: []

.....
-----
Block: 6346_24
6346_24Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_24-Stack size: 13 
6346_24-Equals Mem:<< []>> 
6346_24-NonEquals Mem: << [<5,8>]>> 
6346_24-Equals Sto:<< []>> 
6346_24-NonEquals Sto: << []>> 
6346_24-Useless: []
6346_24-Constancy: [(7, 0), (3, 0)]
6346_24-ContextAliasing: []

.....
-----
Block: 6346_23
6346_23Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_23-Stack size: 12 
6346_23-Equals Mem:<< []>> 
6346_23-NonEquals Mem: << [<5,8>]>> 
6346_23-Equals Sto:<< []>> 
6346_23-NonEquals Sto: << []>> 
6346_23-Useless: []
6346_23-Constancy: [(6, 0), (2, 0)]
6346_23-ContextAliasing: []

.....
-----
Block: 6346_29
6346_29Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_29-Stack size: 17 
6346_29-Equals Mem:<< []>> 
6346_29-NonEquals Mem: << [<5,8>]>> 
6346_29-Equals Sto:<< []>> 
6346_29-NonEquals Sto: << []>> 
6346_29-Useless: []
6346_29-Constancy: [(11, 0), (7, 0)]
6346_29-ContextAliasing: []

.....
-----
Block: 6346_28
6346_28Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_28-Stack size: 13 
6346_28-Equals Mem:<< []>> 
6346_28-NonEquals Mem: << [<5,8>]>> 
6346_28-Equals Sto:<< []>> 
6346_28-NonEquals Sto: << []>> 
6346_28-Useless: []
6346_28-Constancy: [(7, 0), (3, 0)]
6346_28-ContextAliasing: []

.....
-----
Block: 6346_27
6346_27Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_27-Stack size: 12 
6346_27-Equals Mem:<< []>> 
6346_27-NonEquals Mem: << [<5,8>]>> 
6346_27-Equals Sto:<< []>> 
6346_27-NonEquals Sto: << []>> 
6346_27-Useless: []
6346_27-Constancy: [(6, 0), (2, 0)]
6346_27-ContextAliasing: []

.....
-----
Block: 1486
1486Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
1486-Stack size: 2 
1486-Equals Mem:<< []>> 
1486-NonEquals Mem: << [<6,1>]>> 
1486-Equals Sto:<< []>> 
1486-NonEquals Sto: << []>> 
1486-Useless: []
1486-Constancy: []
1486-ContextAliasing: []

.....
-----
Block: 687
687Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
687-Stack size: 3 
687-Equals Mem:<< []>> 
687-NonEquals Mem: << [<10,13>]>> 
687-Equals Sto:<< []>> 
687-NonEquals Sto: << []>> 
687-Useless: []
687-Constancy: []
687-ContextAliasing: []

.....
-----
Block: 1422
1422Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'DUP1', 'ISZERO', 'PUSH2 0x05ac', 'JUMPI']>> 
1422-Stack size: 2 
1422-Equals Mem:<< []>> 
1422-NonEquals Mem: << [<5,8>]>> 
1422-Equals Sto:<< []>> 
1422-NonEquals Sto: << []>> 
1422-Useless: []
1422-Constancy: []
1422-ContextAliasing: []

.....
-----
Block: 6680_3
6680_3Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680_3-Stack size: 10 
6680_3-Equals Mem:<< []>> 
6680_3-NonEquals Mem: << [<5,8>]>> 
6680_3-Equals Sto:<< []>> 
6680_3-NonEquals Sto: << []>> 
6680_3-Useless: []
6680_3-Constancy: [(1, 0)]
6680_3-ContextAliasing: [(4, 7)]

.....
-----
Block: 5146_0
5146_0Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x143e', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
5146_0-Stack size: 10 
5146_0-Equals Mem:<< [<18,6>]>> 
5146_0-NonEquals Mem: << []>> 
5146_0-Equals Sto:<< []>> 
5146_0-NonEquals Sto: << []>> 
5146_0-Useless: []
5146_0-Constancy: []
5146_0-ContextAliasing: []

.....
-----
Block: 6680_2
6680_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680_2-Stack size: 10 
6680_2-Equals Mem:<< []>> 
6680_2-NonEquals Mem: << [<5,8>]>> 
6680_2-Equals Sto:<< []>> 
6680_2-NonEquals Sto: << []>> 
6680_2-Useless: []
6680_2-Constancy: []
6680_2-ContextAliasing: [(4, 7)]

.....
-----
Block: 2873_2
2873_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2873_2-Stack size: 10 
2873_2-Equals Mem:<< []>> 
2873_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2873_2-Equals Sto:<< []>> 
2873_2-NonEquals Sto: << []>> 
2873_2-Useless: []
2873_2-Constancy: []
2873_2-ContextAliasing: []

.....
-----
Block: 2971_2
2971_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2971_2-Stack size: 10 
2971_2-Equals Mem:<< []>> 
2971_2-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2971_2-Equals Sto:<< []>> 
2971_2-NonEquals Sto: << []>> 
2971_2-Useless: []
2971_2-Constancy: []
2971_2-ContextAliasing: []

.....
-----
Block: 5239_0
5239_0Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x14af', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1acf', 'JUMP']>> 
5239_0-Stack size: 6 
5239_0-Equals Mem:<< []>> 
5239_0-NonEquals Mem: << [<9,4>]>> 
5239_0-Equals Sto:<< []>> 
5239_0-NonEquals Sto: << []>> 
5239_0-Useless: []
5239_0-Constancy: []
5239_0-ContextAliasing: []

.....
-----
Block: 6863_0
6863_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6863_0-Stack size: 15 
6863_0-Equals Mem:<< []>> 
6863_0-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6863_0-Equals Sto:<< []>> 
6863_0-NonEquals Sto: << []>> 
6863_0-Useless: []
6863_0-Constancy: [(4, 0)]
6863_0-ContextAliasing: [(9, 11)]

.....
-----
Block: 6913_0
6913_0Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1af8', 'JUMP']>> 
6913_0-Stack size: 21 
6913_0-Equals Mem:<< []>> 
6913_0-NonEquals Mem: << [<9,1>]>> 
6913_0-Equals Sto:<< []>> 
6913_0-NonEquals Sto: << []>> 
6913_0-Useless: []
6913_0-Constancy: [(10, 0), (5, 0), (3, 32)]
6913_0-ContextAliasing: [(15, 11)]

.....
-----
Block: 612
612Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'SWAP1', 'JUMP']>> 
612-Stack size: 3 
612-Equals Mem:<< []>> 
612-NonEquals Mem: << [<10,13>]>> 
612-Equals Sto:<< []>> 
612-NonEquals Sto: << []>> 
612-Useless: []
612-Constancy: []
612-ContextAliasing: []

.....
-----
Block: 6052_0
6052_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6052_0-Stack size: 11 
6052_0-Equals Mem:<< []>> 
6052_0-NonEquals Mem: << [<5,8>]>> 
6052_0-Equals Sto:<< []>> 
6052_0-NonEquals Sto: << []>> 
6052_0-Useless: []
6052_0-Constancy: [(5, 0), (4, 32)]
6052_0-ContextAliasing: []

.....
-----
Block: 6052
6052Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6052-Stack size: 14 
6052-Equals Mem:<< []>> 
6052-NonEquals Mem: << [<5,8>]>> 
6052-Equals Sto:<< []>> 
6052-NonEquals Sto: << []>> 
6052-Useless: []
6052-Constancy: [(8, 0), (7, 32)]
6052-ContextAliasing: []

.....
-----
Block: 6186
6186Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x1847', 'JUMPI']>> 
6186-Stack size: 13 
6186-Equals Mem:<< []>> 
6186-NonEquals Mem: << [<2,5>]>> 
6186-Equals Sto:<< []>> 
6186-NonEquals Sto: << []>> 
6186-Useless: []
6186-Constancy: [(7, 0), (6, 32)]
6186-ContextAliasing: []

.....
-----
Block: 1250
1250Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
1250-Stack size: 3 
1250-Equals Mem:<< []>> 
1250-NonEquals Mem: << [<6,1>]>> 
1250-Equals Sto:<< []>> 
1250-NonEquals Sto: << []>> 
1250-Useless: [6]
1250-Constancy: []
1250-ContextAliasing: []

.....
-----
Block: 6680_1
6680_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680_1-Stack size: 10 
6680_1-Equals Mem:<< []>> 
6680_1-NonEquals Mem: << [<5,8>]>> 
6680_1-Equals Sto:<< []>> 
6680_1-NonEquals Sto: << []>> 
6680_1-Useless: []
6680_1-Constancy: [(5, 0), (3, 0)]
6680_1-ContextAliasing: [(7, 7)]

.....
-----
Block: 1315
1315Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x055e', 'DUP2', 'PUSH2 0x1a2c', 'JUMP']>> 
1315-Stack size: 9 
1315-Equals Mem:<< []>> 
1315-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
1315-Equals Sto:<< [<31,43>]>> 
1315-NonEquals Sto: << []>> 
1315-Useless: []
1315-Constancy: [(4, 0), (2, 0)]
1315-ContextAliasing: [(6, 7)]

.....
-----
Block: 6346_17
6346_17Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_17-Stack size: 9 
6346_17-Equals Mem:<< []>> 
6346_17-NonEquals Mem: << [<5,8>]>> 
6346_17-Equals Sto:<< []>> 
6346_17-NonEquals Sto: << []>> 
6346_17-Useless: []
6346_17-Constancy: [(1, 0)]
6346_17-ContextAliasing: []

.....
-----
Block: 537
537Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
537-Stack size: 2 
537-Equals Mem:<< []>> 
537-NonEquals Mem: << [<6,3>]>> 
537-Equals Sto:<< []>> 
537-NonEquals Sto: << []>> 
537-Useless: []
537-Constancy: []
537-ContextAliasing: []

.....
-----
Block: 3164
3164Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3164-Stack size: 10 
3164-Equals Mem:<< []>> 
3164-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3164-Equals Sto:<< []>> 
3164-NonEquals Sto: << []>> 
3164-Useless: []
3164-Constancy: [(4, 0)]
3164-ContextAliasing: []

.....
-----
Block: 3264
3264Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3264-Stack size: 10 
3264-Equals Mem:<< []>> 
3264-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3264-Equals Sto:<< []>> 
3264-NonEquals Sto: << []>> 
3264-Useless: []
3264-Constancy: [(4, 0)]
3264-ContextAliasing: []

.....
-----
Block: 3355
3355Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3355-Stack size: 10 
3355-Equals Mem:<< []>> 
3355-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3355-Equals Sto:<< []>> 
3355-NonEquals Sto: << []>> 
3355-Useless: []
3355-Constancy: [(4, 0)]
3355-ContextAliasing: []

.....
-----
Block: 5549
5549Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x16a1', 'JUMP']>> 
5549-Stack size: 15 
5549-Equals Mem:<< [<11,6>]>> 
5549-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5549-Equals Sto:<< []>> 
5549-NonEquals Sto: << []>> 
5549-Useless: []
5549-Constancy: [(9, 0), (4, 0), (3, 0)]
5549-ContextAliasing: []

.....
-----
Block: 5801_1
5801_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
5801_1-Stack size: 22 
5801_1-Equals Mem:<< []>> 
5801_1-NonEquals Mem: << [<6,1>]>> 
5801_1-Equals Sto:<< []>> 
5801_1-NonEquals Sto: << []>> 
5801_1-Useless: []
5801_1-Constancy: [(16, 0), (11, 0), (10, 0), (6, 0), (1, 0)]
5801_1-ContextAliasing: [(2, 21)]

.....
-----
Block: 5837_8
5837_8Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_8-Stack size: 24 
5837_8-Equals Mem:<< []>> 
5837_8-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_8-Equals Sto:<< []>> 
5837_8-NonEquals Sto: << []>> 
5837_8-Useless: []
5837_8-Constancy: [(18, 0), (13, 0), (12, 0), (8, 0), (3, 0)]
5837_8-ContextAliasing: [(4, 22)]

.....
-----
Block: 5861_8
5861_8Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_8-Stack size: 28 
5861_8-Equals Mem:<< []>> 
5861_8-NonEquals Mem: << [<11,5>]>> 
5861_8-Equals Sto:<< []>> 
5861_8-NonEquals Sto: << []>> 
5861_8-Useless: []
5861_8-Constancy: [(22, 0), (17, 0), (16, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_8-ContextAliasing: [(8, 22)]

.....
-----
Block: 6981_3
6981_3Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_3-Stack size: 26 
6981_3-Equals Mem:<< []>> 
6981_3-NonEquals Mem: << [<4,7>]>> 
6981_3-Equals Sto:<< []>> 
6981_3-NonEquals Sto: << []>> 
6981_3-Useless: []
6981_3-Constancy: [(20, 0), (15, 0), (14, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6981_3-ContextAliasing: []

.....
-----
Block: 3549
3549Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e1c', 'JUMPI']>> 
3549-Stack size: 12 
3549-Equals Mem:<< []>> 
3549-NonEquals Mem: << [<10,13>]>> 
3549-Equals Sto:<< []>> 
3549-NonEquals Sto: << []>> 
3549-Useless: []
3549-Constancy: [(6, 0), (1, 0)]
3549-ContextAliasing: []

.....
-----
Block: 3583
3583Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3583-Stack size: 13 
3583-Equals Mem:<< []>> 
3583-NonEquals Mem: << [<11,14>]>> 
3583-Equals Sto:<< []>> 
3583-NonEquals Sto: << []>> 
3583-Useless: []
3583-Constancy: [(7, 0), (2, 0)]
3583-ContextAliasing: []

.....
-----
Block: 5549_0
5549_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x16a1', 'JUMP']>> 
5549_0-Stack size: 15 
5549_0-Equals Mem:<< [<11,6>]>> 
5549_0-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5549_0-Equals Sto:<< []>> 
5549_0-NonEquals Sto: << []>> 
5549_0-Useless: []
5549_0-Constancy: [(9, 0), (4, 0)]
5549_0-ContextAliasing: []

.....
-----
Block: 5801_0
5801_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
5801_0-Stack size: 22 
5801_0-Equals Mem:<< []>> 
5801_0-NonEquals Mem: << [<6,1>]>> 
5801_0-Equals Sto:<< []>> 
5801_0-NonEquals Sto: << []>> 
5801_0-Useless: []
5801_0-Constancy: [(16, 0), (11, 0), (6, 0), (1, 0)]
5801_0-ContextAliasing: [(2, 21)]

.....
-----
Block: 5837_7
5837_7Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_7-Stack size: 24 
5837_7-Equals Mem:<< []>> 
5837_7-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_7-Equals Sto:<< []>> 
5837_7-NonEquals Sto: << []>> 
5837_7-Useless: []
5837_7-Constancy: [(18, 0), (13, 0), (8, 0), (3, 0)]
5837_7-ContextAliasing: [(4, 22)]

.....
-----
Block: 5861_7
5861_7Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_7-Stack size: 28 
5861_7-Equals Mem:<< []>> 
5861_7-NonEquals Mem: << [<11,5>]>> 
5861_7-Equals Sto:<< []>> 
5861_7-NonEquals Sto: << []>> 
5861_7-Useless: []
5861_7-Constancy: [(22, 0), (17, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_7-ContextAliasing: [(8, 22)]

.....
-----
Block: 6981_1
6981_1Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_1-Stack size: 26 
6981_1-Equals Mem:<< []>> 
6981_1-NonEquals Mem: << [<4,7>]>> 
6981_1-Equals Sto:<< []>> 
6981_1-NonEquals Sto: << []>> 
6981_1-Useless: []
6981_1-Constancy: [(20, 0), (15, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6981_1-ContextAliasing: []

.....
-----
Block: 3722
3722Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f1e', 'JUMPI']>> 
3722-Stack size: 12 
3722-Equals Mem:<< []>> 
3722-NonEquals Mem: << [<4,7>]>> 
3722-Equals Sto:<< []>> 
3722-NonEquals Sto: << []>> 
3722-Useless: []
3722-Constancy: [(6, 0)]
3722-ContextAliasing: []

.....
-----
Block: 3743
3743Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3743-Stack size: 12 
3743-Equals Mem:<< []>> 
3743-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <26,1>, <33,1>]>> 
3743-Equals Sto:<< []>> 
3743-NonEquals Sto: << []>> 
3743-Useless: []
3743-Constancy: [(6, 0)]
3743-ContextAliasing: []

.....
-----
Block: 3870
3870Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3870-Stack size: 12 
3870-Equals Mem:<< []>> 
3870-NonEquals Mem: << [<5,8>]>> 
3870-Equals Sto:<< []>> 
3870-NonEquals Sto: << []>> 
3870-Useless: []
3870-Constancy: [(6, 0)]
3870-ContextAliasing: []

.....
-----
Block: 3938
3938Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3938-Stack size: 13 
3938-Equals Mem:<< []>> 
3938-NonEquals Mem: << [<11,14>]>> 
3938-Equals Sto:<< []>> 
3938-NonEquals Sto: << []>> 
3938-Useless: []
3938-Constancy: [(7, 0)]
3938-ContextAliasing: []

.....
-----
Block: 3983
3983Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3983-Stack size: 12 
3983-Equals Mem:<< []>> 
3983-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
3983-Equals Sto:<< []>> 
3983-NonEquals Sto: << []>> 
3983-Useless: []
3983-Constancy: [(6, 0)]
3983-ContextAliasing: []

.....
-----
Block: 4054
4054Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP4', 'PUSH2 0x0ff8', 'DUP7', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4054-Stack size: 12 
4054-Equals Mem:<< []>> 
4054-NonEquals Mem: << [<15,18>]>> 
4054-Equals Sto:<< []>> 
4054-NonEquals Sto: << [<2,22>]>> 
4054-Useless: []
4054-Constancy: [(6, 0)]
4054-ContextAliasing: []

.....
-----
Block: 6346_14
6346_14Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_14-Stack size: 18 
6346_14-Equals Mem:<< []>> 
6346_14-NonEquals Mem: << [<5,8>]>> 
6346_14-Equals Sto:<< []>> 
6346_14-NonEquals Sto: << []>> 
6346_14-Useless: []
6346_14-Constancy: [(12, 0)]
6346_14-ContextAliasing: []

.....
-----
Block: 4105
4105Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
4105-Stack size: 12 
4105-Equals Mem:<< []>> 
4105-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
4105-Equals Sto:<< []>> 
4105-NonEquals Sto: << []>> 
4105-Useless: []
4105-Constancy: [(6, 0)]
4105-ContextAliasing: []

.....
-----
Block: 6346_13
6346_13Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_13-Stack size: 19 
6346_13-Equals Mem:<< []>> 
6346_13-NonEquals Mem: << [<5,8>]>> 
6346_13-Equals Sto:<< []>> 
6346_13-NonEquals Sto: << []>> 
6346_13-Useless: []
6346_13-Constancy: [(13, 0), (4, 0), (1, 0)]
6346_13-ContextAliasing: []

.....
-----
Block: 5549_1
5549_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x16a1', 'JUMP']>> 
5549_1-Stack size: 15 
5549_1-Equals Mem:<< [<11,6>]>> 
5549_1-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5549_1-Equals Sto:<< []>> 
5549_1-NonEquals Sto: << []>> 
5549_1-Useless: []
5549_1-Constancy: [(9, 0)]
5549_1-ContextAliasing: []

.....
-----
Block: 5801
5801Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
5801-Stack size: 22 
5801-Equals Mem:<< []>> 
5801-NonEquals Mem: << [<6,1>]>> 
5801-Equals Sto:<< []>> 
5801-NonEquals Sto: << []>> 
5801-Useless: []
5801-Constancy: [(16, 0), (6, 0), (1, 0)]
5801-ContextAliasing: [(2, 21)]

.....
-----
Block: 5837_6
5837_6Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_6-Stack size: 24 
5837_6-Equals Mem:<< []>> 
5837_6-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_6-Equals Sto:<< []>> 
5837_6-NonEquals Sto: << []>> 
5837_6-Useless: []
5837_6-Constancy: [(18, 0), (8, 0), (3, 0)]
5837_6-ContextAliasing: [(4, 22)]

.....
-----
Block: 5861_6
5861_6Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_6-Stack size: 28 
5861_6-Equals Mem:<< []>> 
5861_6-NonEquals Mem: << [<11,5>]>> 
5861_6-Equals Sto:<< []>> 
5861_6-NonEquals Sto: << []>> 
5861_6-Useless: []
5861_6-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_6-ContextAliasing: [(8, 22)]

.....
-----
Block: 6981
6981Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981-Stack size: 26 
6981-Equals Mem:<< []>> 
6981-NonEquals Mem: << [<4,7>]>> 
6981-Equals Sto:<< []>> 
6981-NonEquals Sto: << []>> 
6981-Useless: []
6981-Constancy: [(20, 0), (10, 0), (5, 0), (4, 0), (0, 0)]
6981-ContextAliasing: []

.....
-----
Block: 6346_12
6346_12Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_12-Stack size: 24 
6346_12-Equals Mem:<< []>> 
6346_12-NonEquals Mem: << [<5,8>]>> 
6346_12-Equals Sto:<< []>> 
6346_12-NonEquals Sto: << []>> 
6346_12-Useless: []
6346_12-Constancy: [(18, 0), (6, 0), (5, 0)]
6346_12-ContextAliasing: []

.....
-----
Block: 6981_0
6981_0Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_0-Stack size: 24 
6981_0-Equals Mem:<< []>> 
6981_0-NonEquals Mem: << [<4,7>]>> 
6981_0-Equals Sto:<< []>> 
6981_0-NonEquals Sto: << []>> 
6981_0-Useless: []
6981_0-Constancy: [(18, 0), (6, 0), (0, 0)]
6981_0-ContextAliasing: []

.....
-----
Block: 5461
5461Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5461-Stack size: 19 
5461-Equals Mem:<< []>> 
5461-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5461-Equals Sto:<< []>> 
5461-NonEquals Sto: << []>> 
5461-Useless: []
5461-Constancy: [(13, 0), (1, 0)]
5461-ContextAliasing: []

.....
-----
Block: 4270
4270Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x10e4', 'JUMPI']>> 
4270-Stack size: 12 
4270-Equals Mem:<< []>> 
4270-NonEquals Mem: << [<5,8>]>> 
4270-Equals Sto:<< []>> 
4270-NonEquals Sto: << [<12,14>]>> 
4270-Useless: []
4270-Constancy: [(6, 0)]
4270-ContextAliasing: []

.....
-----
Block: 6680_0
6680_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680_0-Stack size: 20 
6680_0-Equals Mem:<< []>> 
6680_0-NonEquals Mem: << [<5,8>]>> 
6680_0-Equals Sto:<< []>> 
6680_0-NonEquals Sto: << []>> 
6680_0-Useless: []
6680_0-Constancy: [(14, 0), (1, 0)]
6680_0-ContextAliasing: [(4, 17)]

.....
-----
Block: 5146
5146Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x143e', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
5146-Stack size: 20 
5146-Equals Mem:<< [<18,6>]>> 
5146-NonEquals Mem: << []>> 
5146-Equals Sto:<< []>> 
5146-NonEquals Sto: << []>> 
5146-Useless: []
5146-Constancy: [(14, 0)]
5146-ContextAliasing: []

.....
-----
Block: 6680
6680Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680-Stack size: 20 
6680-Equals Mem:<< []>> 
6680-NonEquals Mem: << [<5,8>]>> 
6680-Equals Sto:<< []>> 
6680-NonEquals Sto: << []>> 
6680-Useless: []
6680-Constancy: [(14, 0)]
6680-ContextAliasing: [(4, 17)]

.....
-----
Block: 2873_1
2873_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2873_1-Stack size: 20 
2873_1-Equals Mem:<< []>> 
2873_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2873_1-Equals Sto:<< []>> 
2873_1-NonEquals Sto: << []>> 
2873_1-Useless: []
2873_1-Constancy: [(14, 0)]
2873_1-ContextAliasing: []

.....
-----
Block: 2971_1
2971_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2971_1-Stack size: 20 
2971_1-Equals Mem:<< []>> 
2971_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2971_1-Equals Sto:<< []>> 
2971_1-NonEquals Sto: << []>> 
2971_1-Useless: []
2971_1-Constancy: [(14, 0)]
2971_1-ContextAliasing: []

.....
-----
Block: 5239
5239Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x14af', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1acf', 'JUMP']>> 
5239-Stack size: 16 
5239-Equals Mem:<< []>> 
5239-NonEquals Mem: << [<9,4>]>> 
5239-Equals Sto:<< []>> 
5239-NonEquals Sto: << []>> 
5239-Useless: []
5239-Constancy: [(10, 0)]
5239-ContextAliasing: []

.....
-----
Block: 6863
6863Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6863-Stack size: 25 
6863-Equals Mem:<< []>> 
6863-NonEquals Mem: << [<7,21>, <13,21>, <18,21>, <24,21>]>> 
6863-Equals Sto:<< []>> 
6863-NonEquals Sto: << []>> 
6863-Useless: []
6863-Constancy: [(19, 0), (4, 0)]
6863-ContextAliasing: [(9, 21)]

.....
-----
Block: 6913
6913Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1af8', 'JUMP']>> 
6913-Stack size: 31 
6913-Equals Mem:<< []>> 
6913-NonEquals Mem: << [<9,1>]>> 
6913-Equals Sto:<< []>> 
6913-NonEquals Sto: << []>> 
6913-Useless: []
6913-Constancy: [(25, 0), (10, 0), (5, 0), (3, 32)]
6913-ContextAliasing: [(15, 21)]

.....
-----
Block: 6346_15
6346_15Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_15-Stack size: 24 
6346_15-Equals Mem:<< []>> 
6346_15-NonEquals Mem: << [<5,8>]>> 
6346_15-Equals Sto:<< []>> 
6346_15-NonEquals Sto: << []>> 
6346_15-Useless: []
6346_15-Constancy: [(18, 0), (13, 0), (6, 0), (5, 0)]
6346_15-ContextAliasing: []

.....
-----
Block: 6981_2
6981_2Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_2-Stack size: 24 
6981_2-Equals Mem:<< []>> 
6981_2-NonEquals Mem: << [<4,7>]>> 
6981_2-Equals Sto:<< []>> 
6981_2-NonEquals Sto: << []>> 
6981_2-Useless: []
6981_2-Constancy: [(18, 0), (13, 0), (6, 0), (0, 0)]
6981_2-ContextAliasing: []

.....
-----
Block: 5461_0
5461_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5461_0-Stack size: 19 
5461_0-Equals Mem:<< []>> 
5461_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5461_0-Equals Sto:<< []>> 
5461_0-NonEquals Sto: << []>> 
5461_0-Useless: []
5461_0-Constancy: [(13, 0), (8, 0), (1, 0)]
5461_0-ContextAliasing: []

.....
-----
Block: 4427
4427Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x116d', 'SWAP1', 'DUP5', 'PUSH2 0x1602', 'JUMP']>> 
4427-Stack size: 12 
4427-Equals Mem:<< []>> 
4427-NonEquals Mem: << [<11,14>]>> 
4427-Equals Sto:<< []>> 
4427-NonEquals Sto: << []>> 
4427-Useless: []
4427-Constancy: [(6, 0)]
4427-ContextAliasing: []

.....
-----
Block: 5634
5634Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634-Stack size: 15 
5634-Equals Mem:<< [<11,6>]>> 
5634-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634-Equals Sto:<< []>> 
5634-NonEquals Sto: << []>> 
5634-Useless: []
5634-Constancy: [(9, 0)]
5634-ContextAliasing: []

.....
-----
Block: 4944_4
4944_4Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_4-Stack size: 22 
4944_4-Equals Mem:<< []>> 
4944_4-NonEquals Mem: << [<6,1>]>> 
4944_4-Equals Sto:<< []>> 
4944_4-NonEquals Sto: << []>> 
4944_4-Useless: []
4944_4-Constancy: [(16, 0), (6, 0), (1, 0)]
4944_4-ContextAliasing: [(2, 21)]

.....
-----
Block: 5837_5
5837_5Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_5-Stack size: 24 
5837_5-Equals Mem:<< []>> 
5837_5-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_5-Equals Sto:<< []>> 
5837_5-NonEquals Sto: << []>> 
5837_5-Useless: []
5837_5-Constancy: [(18, 0), (8, 0), (3, 0)]
5837_5-ContextAliasing: [(4, 22)]

.....
-----
Block: 5861_5
5861_5Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_5-Stack size: 28 
5861_5-Equals Mem:<< []>> 
5861_5-NonEquals Mem: << [<11,5>]>> 
5861_5-Equals Sto:<< []>> 
5861_5-NonEquals Sto: << []>> 
5861_5-Useless: []
5861_5-Constancy: [(22, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_5-ContextAliasing: [(8, 22)]

.....
-----
Block: 6346_11
6346_11Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_11-Stack size: 27 
6346_11-Equals Mem:<< []>> 
6346_11-NonEquals Mem: << [<5,8>]>> 
6346_11-Equals Sto:<< []>> 
6346_11-NonEquals Sto: << []>> 
6346_11-Useless: []
6346_11-Constancy: [(21, 0), (11, 0), (6, 0), (5, 0)]
6346_11-ContextAliasing: []

.....
-----
Block: 4461
4461Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x11ba', 'PUSH2 0x119c', 'DUP3', 'PUSH2 0x1196', 'DUP7', 'DUP7', 'PUSH2 0x1602', 'JUMP']>> 
4461-Stack size: 13 
4461-Equals Mem:<< []>> 
4461-NonEquals Mem: << [<11,14>]>> 
4461-Equals Sto:<< []>> 
4461-NonEquals Sto: << []>> 
4461-Useless: []
4461-Constancy: [(7, 0)]
4461-ContextAliasing: []

.....
-----
Block: 5634_0
5634_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_0-Stack size: 18 
5634_0-Equals Mem:<< [<11,6>]>> 
5634_0-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_0-Equals Sto:<< []>> 
5634_0-NonEquals Sto: << []>> 
5634_0-Useless: []
5634_0-Constancy: [(12, 0)]
5634_0-ContextAliasing: []

.....
-----
Block: 4944_3
4944_3Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_3-Stack size: 25 
4944_3-Equals Mem:<< []>> 
4944_3-NonEquals Mem: << [<6,1>]>> 
4944_3-Equals Sto:<< []>> 
4944_3-NonEquals Sto: << []>> 
4944_3-Useless: []
4944_3-Constancy: [(19, 0), (6, 0), (1, 0)]
4944_3-ContextAliasing: [(2, 24)]

.....
-----
Block: 5837_4
5837_4Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_4-Stack size: 27 
5837_4-Equals Mem:<< []>> 
5837_4-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_4-Equals Sto:<< []>> 
5837_4-NonEquals Sto: << []>> 
5837_4-Useless: []
5837_4-Constancy: [(21, 0), (8, 0), (3, 0)]
5837_4-ContextAliasing: [(4, 25)]

.....
-----
Block: 5861_4
5861_4Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_4-Stack size: 31 
5861_4-Equals Mem:<< []>> 
5861_4-NonEquals Mem: << [<11,5>]>> 
5861_4-Equals Sto:<< []>> 
5861_4-NonEquals Sto: << []>> 
5861_4-Useless: []
5861_4-Constancy: [(25, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_4-ContextAliasing: [(8, 25)]

.....
-----
Block: 6346_10
6346_10Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_10-Stack size: 30 
6346_10-Equals Mem:<< []>> 
6346_10-NonEquals Mem: << [<5,8>]>> 
6346_10-Equals Sto:<< []>> 
6346_10-NonEquals Sto: << []>> 
6346_10-Useless: []
6346_10-Constancy: [(24, 0), (11, 0), (6, 0), (5, 0)]
6346_10-ContextAliasing: []

.....
-----
Block: 5634_1
5634_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_1-Stack size: 16 
5634_1-Equals Mem:<< [<11,6>]>> 
5634_1-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_1-Equals Sto:<< []>> 
5634_1-NonEquals Sto: << []>> 
5634_1-Useless: []
5634_1-Constancy: [(10, 0)]
5634_1-ContextAliasing: []

.....
-----
Block: 4944_2
4944_2Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_2-Stack size: 23 
4944_2-Equals Mem:<< []>> 
4944_2-NonEquals Mem: << [<6,1>]>> 
4944_2-Equals Sto:<< []>> 
4944_2-NonEquals Sto: << []>> 
4944_2-Useless: []
4944_2-Constancy: [(17, 0), (6, 0), (1, 0)]
4944_2-ContextAliasing: [(2, 22)]

.....
-----
Block: 5837_3
5837_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_3-Stack size: 25 
5837_3-Equals Mem:<< []>> 
5837_3-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_3-Equals Sto:<< []>> 
5837_3-NonEquals Sto: << []>> 
5837_3-Useless: []
5837_3-Constancy: [(19, 0), (8, 0), (3, 0)]
5837_3-ContextAliasing: [(4, 23)]

.....
-----
Block: 5861_3
5861_3Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_3-Stack size: 29 
5861_3-Equals Mem:<< []>> 
5861_3-NonEquals Mem: << [<11,5>]>> 
5861_3-Equals Sto:<< []>> 
5861_3-NonEquals Sto: << []>> 
5861_3-Useless: []
5861_3-Constancy: [(23, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_3-ContextAliasing: [(8, 23)]

.....
-----
Block: 6346_9
6346_9Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_9-Stack size: 28 
6346_9-Equals Mem:<< []>> 
6346_9-NonEquals Mem: << [<5,8>]>> 
6346_9-Equals Sto:<< []>> 
6346_9-NonEquals Sto: << []>> 
6346_9-Useless: []
6346_9-Constancy: [(22, 0), (11, 0), (6, 0), (5, 0)]
6346_9-ContextAliasing: []

.....
-----
Block: 4508
4508Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1643', 'JUMP']>> 
4508-Stack size: 14 
4508-Equals Mem:<< []>> 
4508-NonEquals Mem: << [<11,14>]>> 
4508-Equals Sto:<< []>> 
4508-NonEquals Sto: << []>> 
4508-Useless: []
4508-Constancy: [(8, 0)]
4508-ContextAliasing: []

.....
-----
Block: 6346_8
6346_8Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_8-Stack size: 22 
6346_8-Equals Mem:<< []>> 
6346_8-NonEquals Mem: << [<5,8>]>> 
6346_8-Equals Sto:<< []>> 
6346_8-NonEquals Sto: << []>> 
6346_8-Useless: []
6346_8-Constancy: [(16, 0), (6, 0), (5, 0)]
6346_8-ContextAliasing: []

.....
-----
Block: 5722_1
5722_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5722_1-Stack size: 17 
5722_1-Equals Mem:<< []>> 
5722_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5722_1-Equals Sto:<< []>> 
5722_1-NonEquals Sto: << []>> 
5722_1-Useless: []
5722_1-Constancy: [(11, 0), (1, 0)]
5722_1-ContextAliasing: []

.....
-----
Block: 4538
4538Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP7', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP7', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x1207', 'DUP5', 'PUSH2 0x1196', 'DUP9', 'DUP9', 'PUSH2 0x1602', 'JUMP']>> 
4538-Stack size: 13 
4538-Equals Mem:<< []>> 
4538-NonEquals Mem: << [<12,15>]>> 
4538-Equals Sto:<< []>> 
4538-NonEquals Sto: << []>> 
4538-Useless: []
4538-Constancy: [(7, 0)]
4538-ContextAliasing: []

.....
-----
Block: 5634_2
5634_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_2-Stack size: 20 
5634_2-Equals Mem:<< [<11,6>]>> 
5634_2-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_2-Equals Sto:<< []>> 
5634_2-NonEquals Sto: << []>> 
5634_2-Useless: []
5634_2-Constancy: [(14, 0)]
5634_2-ContextAliasing: []

.....
-----
Block: 4944_1
4944_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_1-Stack size: 27 
4944_1-Equals Mem:<< []>> 
4944_1-NonEquals Mem: << [<6,1>]>> 
4944_1-Equals Sto:<< []>> 
4944_1-NonEquals Sto: << []>> 
4944_1-Useless: []
4944_1-Constancy: [(21, 0), (6, 0), (1, 0)]
4944_1-ContextAliasing: [(2, 26)]

.....
-----
Block: 5837_2
5837_2Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_2-Stack size: 29 
5837_2-Equals Mem:<< []>> 
5837_2-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_2-Equals Sto:<< []>> 
5837_2-NonEquals Sto: << []>> 
5837_2-Useless: []
5837_2-Constancy: [(23, 0), (8, 0), (3, 0)]
5837_2-ContextAliasing: [(4, 27)]

.....
-----
Block: 5861_2
5861_2Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_2-Stack size: 33 
5861_2-Equals Mem:<< []>> 
5861_2-NonEquals Mem: << [<11,5>]>> 
5861_2-Equals Sto:<< []>> 
5861_2-NonEquals Sto: << []>> 
5861_2-Useless: []
5861_2-Constancy: [(27, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_2-ContextAliasing: [(8, 27)]

.....
-----
Block: 6346_7
6346_7Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_7-Stack size: 32 
6346_7-Equals Mem:<< []>> 
6346_7-NonEquals Mem: << [<5,8>]>> 
6346_7-Equals Sto:<< []>> 
6346_7-NonEquals Sto: << []>> 
6346_7-Useless: []
6346_7-Constancy: [(26, 0), (11, 0), (6, 0), (5, 0)]
6346_7-ContextAliasing: []

.....
-----
Block: 5634_3
5634_3Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634_3-Stack size: 18 
5634_3-Equals Mem:<< [<11,6>]>> 
5634_3-NonEquals Mem: << [<11,15>, <11,20>, <15,6>, <15,20>, <20,6>]>> 
5634_3-Equals Sto:<< []>> 
5634_3-NonEquals Sto: << []>> 
5634_3-Useless: []
5634_3-Constancy: [(12, 0)]
5634_3-ContextAliasing: []

.....
-----
Block: 4944_0
4944_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944_0-Stack size: 25 
4944_0-Equals Mem:<< []>> 
4944_0-NonEquals Mem: << [<6,1>]>> 
4944_0-Equals Sto:<< []>> 
4944_0-NonEquals Sto: << []>> 
4944_0-Useless: []
4944_0-Constancy: [(19, 0), (6, 0), (1, 0)]
4944_0-ContextAliasing: [(2, 24)]

.....
-----
Block: 5837_1
5837_1Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_1-Stack size: 27 
5837_1-Equals Mem:<< []>> 
5837_1-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_1-Equals Sto:<< []>> 
5837_1-NonEquals Sto: << []>> 
5837_1-Useless: []
5837_1-Constancy: [(21, 0), (8, 0), (3, 0)]
5837_1-ContextAliasing: [(4, 25)]

.....
-----
Block: 5861_1
5861_1Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_1-Stack size: 31 
5861_1-Equals Mem:<< []>> 
5861_1-NonEquals Mem: << [<11,5>]>> 
5861_1-Equals Sto:<< []>> 
5861_1-NonEquals Sto: << []>> 
5861_1-Useless: []
5861_1-Constancy: [(25, 0), (12, 0), (7, 0), (3, 0), (2, 32)]
5861_1-ContextAliasing: [(8, 25)]

.....
-----
Block: 6346_6
6346_6Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_6-Stack size: 30 
6346_6-Equals Mem:<< []>> 
6346_6-NonEquals Mem: << [<5,8>]>> 
6346_6-Equals Sto:<< []>> 
6346_6-NonEquals Sto: << []>> 
6346_6-Useless: []
6346_6-Constancy: [(24, 0), (11, 0), (6, 0), (5, 0)]
6346_6-ContextAliasing: []

.....
-----
Block: 4639
4639Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x1237', 'SWAP1', 'DUP4', 'PUSH2 0x1643', 'JUMP']>> 
4639-Stack size: 12 
4639-Equals Mem:<< []>> 
4639-NonEquals Mem: << [<4,7>]>> 
4639-Equals Sto:<< []>> 
4639-NonEquals Sto: << []>> 
4639-Useless: []
4639-Constancy: [(6, 0)]
4639-ContextAliasing: []

.....
-----
Block: 6346_5
6346_5Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_5-Stack size: 22 
6346_5-Equals Mem:<< []>> 
6346_5-NonEquals Mem: << [<5,8>]>> 
6346_5-Equals Sto:<< []>> 
6346_5-NonEquals Sto: << []>> 
6346_5-Useless: []
6346_5-Constancy: [(16, 0), (6, 0), (5, 0)]
6346_5-ContextAliasing: []

.....
-----
Block: 5722_0
5722_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5722_0-Stack size: 17 
5722_0-Equals Mem:<< []>> 
5722_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5722_0-Equals Sto:<< []>> 
5722_0-NonEquals Sto: << []>> 
5722_0-Useless: []
5722_0-Constancy: [(11, 0), (1, 0)]
5722_0-ContextAliasing: []

.....
-----
Block: 4663
4663Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP8', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1287', 'SWAP1', 'DUP7', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4663-Stack size: 13 
4663-Equals Mem:<< []>> 
4663-NonEquals Mem: << [<5,19>, <5,8>, <5,34>, <8,19>, <8,34>, <34,13>, <34,19>, <13,19>]>> 
4663-Equals Sto:<< []>> 
4663-NonEquals Sto: << []>> 
4663-Useless: []
4663-Constancy: [(7, 0)]
4663-ContextAliasing: []

.....
-----
Block: 4759
4759Instr:<<['PUSH0', 'DUP1', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49', 'SLOAD', 'PUSH2 0x12ca', 'SWAP1', 'DUP3', 'PUSH2 0x1643', 'JUMP']>> 
4759-Stack size: 12 
4759-Equals Mem:<< []>> 
4759-NonEquals Mem: << [<2,5>]>> 
4759-Equals Sto:<< []>> 
4759-NonEquals Sto: << []>> 
4759-Useless: []
4759-Constancy: [(6, 0)]
4759-ContextAliasing: []

.....
-----
Block: 6346_4
6346_4Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_4-Stack size: 22 
6346_4-Equals Mem:<< []>> 
6346_4-NonEquals Mem: << [<5,8>]>> 
6346_4-Equals Sto:<< []>> 
6346_4-NonEquals Sto: << []>> 
6346_4-Useless: []
6346_4-Constancy: [(16, 0), (6, 0), (5, 0)]
6346_4-ContextAliasing: []

.....
-----
Block: 5722
5722Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5722-Stack size: 17 
5722-Equals Mem:<< []>> 
5722-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
5722-Equals Sto:<< []>> 
5722-NonEquals Sto: << []>> 
5722-Useless: []
5722-Constancy: [(11, 0), (1, 0)]
5722-ContextAliasing: []

.....
-----
Block: 4810
4810Instr:<<['JUMPDEST', 'PUSH0', 'DUP1', 'DUP1', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49', 'SWAP2', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP8', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1335', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4810-Stack size: 13 
4810-Equals Mem:<< []>> 
4810-NonEquals Mem: << [<4,14>, <4,7>, <4,29>, <7,14>, <7,29>, <29,14>]>> 
4810-Equals Sto:<< []>> 
4810-NonEquals Sto: << []>> 
4810-Useless: []
4810-Constancy: [(7, 0)]
4810-ContextAliasing: []

.....
-----
Block: 4944
4944Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944-Stack size: 15 
4944-Equals Mem:<< []>> 
4944-NonEquals Mem: << [<6,1>]>> 
4944-Equals Sto:<< []>> 
4944-NonEquals Sto: << []>> 
4944-Useless: []
4944-Constancy: [(9, 0), (1, 0)]
4944-ContextAliasing: [(2, 14)]

.....
-----
Block: 5837_0
5837_0Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837_0-Stack size: 17 
5837_0-Equals Mem:<< []>> 
5837_0-NonEquals Mem: << [<5,7>, <12,7>]>> 
5837_0-Equals Sto:<< []>> 
5837_0-NonEquals Sto: << []>> 
5837_0-Useless: []
5837_0-Constancy: [(11, 0), (3, 0)]
5837_0-ContextAliasing: [(4, 15)]

.....
-----
Block: 5861_0
5861_0Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861_0-Stack size: 21 
5861_0-Equals Mem:<< []>> 
5861_0-NonEquals Mem: << [<11,5>]>> 
5861_0-Equals Sto:<< []>> 
5861_0-NonEquals Sto: << []>> 
5861_0-Useless: []
5861_0-Constancy: [(15, 0), (7, 0), (3, 0), (2, 32)]
5861_0-ContextAliasing: [(8, 15)]

.....
-----
Block: 6346_3
6346_3Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_3-Stack size: 20 
6346_3-Equals Mem:<< []>> 
6346_3-NonEquals Mem: << [<5,8>]>> 
6346_3-Equals Sto:<< []>> 
6346_3-NonEquals Sto: << []>> 
6346_3-Useless: []
6346_3-Constancy: [(14, 0), (6, 0), (5, 0)]
6346_3-ContextAliasing: []

.....
-----
Block: 2873_0
2873_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2873_0-Stack size: 10 
2873_0-Equals Mem:<< []>> 
2873_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2873_0-Equals Sto:<< []>> 
2873_0-NonEquals Sto: << []>> 
2873_0-Useless: []
2873_0-Constancy: [(4, 0)]
2873_0-ContextAliasing: []

.....
-----
Block: 2971_0
2971_0Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2971_0-Stack size: 10 
2971_0-Equals Mem:<< []>> 
2971_0-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2971_0-Equals Sto:<< []>> 
2971_0-NonEquals Sto: << []>> 
2971_0-Useless: []
2971_0-Constancy: [(4, 0)]
2971_0-ContextAliasing: []

.....
-----
Block: 6346_16
6346_16Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_16-Stack size: 24 
6346_16-Equals Mem:<< []>> 
6346_16-NonEquals Mem: << [<5,8>]>> 
6346_16-Equals Sto:<< []>> 
6346_16-NonEquals Sto: << []>> 
6346_16-Useless: []
6346_16-Constancy: [(18, 0), (13, 0), (12, 0), (6, 0), (5, 0)]
6346_16-ContextAliasing: []

.....
-----
Block: 6981_4
6981_4Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981_4-Stack size: 24 
6981_4-Equals Mem:<< []>> 
6981_4-NonEquals Mem: << [<4,7>]>> 
6981_4-Equals Sto:<< []>> 
6981_4-NonEquals Sto: << []>> 
6981_4-Useless: []
6981_4-Constancy: [(18, 0), (13, 0), (12, 0), (6, 0), (0, 0)]
6981_4-ContextAliasing: []

.....
-----
Block: 5461_1
5461_1Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5461_1-Stack size: 19 
5461_1-Equals Mem:<< []>> 
5461_1-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5461_1-Equals Sto:<< []>> 
5461_1-NonEquals Sto: << []>> 
5461_1-Useless: []
5461_1-Constancy: [(13, 0), (8, 0), (7, 0), (1, 0)]
5461_1-ContextAliasing: []

.....
-----
Block: 6346
6346Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346-Stack size: 8 
6346-Equals Mem:<< []>> 
6346-NonEquals Mem: << [<5,8>]>> 
6346-Equals Sto:<< []>> 
6346-NonEquals Sto: << []>> 
6346-Useless: []
6346-Constancy: [(5, 0)]
6346-ContextAliasing: []

.....
-----
Block: 6346_2
6346_2Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_2-Stack size: 18 
6346_2-Equals Mem:<< []>> 
6346_2-NonEquals Mem: << [<5,8>]>> 
6346_2-Equals Sto:<< []>> 
6346_2-NonEquals Sto: << []>> 
6346_2-Useless: []
6346_2-Constancy: [(15, 0), (11, 0), (7, 0)]
6346_2-ContextAliasing: []

.....
-----
Block: 6346_1
6346_1Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_1-Stack size: 14 
6346_1-Equals Mem:<< []>> 
6346_1-NonEquals Mem: << [<5,8>]>> 
6346_1-Equals Sto:<< []>> 
6346_1-NonEquals Sto: << []>> 
6346_1-Useless: []
6346_1-Constancy: [(11, 0), (7, 0), (3, 0)]
6346_1-ContextAliasing: []

.....
-----
Block: 6346_0
6346_0Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346_0-Stack size: 13 
6346_0-Equals Mem:<< []>> 
6346_0-NonEquals Mem: << [<5,8>]>> 
6346_0-Equals Sto:<< []>> 
6346_0-NonEquals Sto: << []>> 
6346_0-Useless: []
6346_0-Constancy: [(10, 0), (6, 0), (2, 0)]
6346_0-ContextAliasing: []

.....
-----
Block: 2873
2873Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2873-Stack size: 9 
2873-Equals Mem:<< []>> 
2873-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2873-Equals Sto:<< []>> 
2873-NonEquals Sto: << []>> 
2873-Useless: []
2873-Constancy: [(4, 0)]
2873-ContextAliasing: []

.....
-----
Block: 2971
2971Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2971-Stack size: 9 
2971-Equals Mem:<< []>> 
2971-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2971-Equals Sto:<< []>> 
2971-NonEquals Sto: << []>> 
2971-Useless: []
2971-Constancy: [(4, 0)]
2971-ContextAliasing: []

.....
-----
Block: 330
330Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x10', 'DUP2', 'MSTORE', 'PUSH16 0x26b4b630b23c902232902bb4b73a32b9', 'PUSH1 0x81', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE']>> 
330-Stack size: 2 
330-Equals Mem:<< [<10,4>]>> 
330-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
330-Equals Sto:<< []>> 
330-NonEquals Sto: << []>> 
330-Useless: []
330-Constancy: []
330-ContextAliasing: []

.....
-----
Block: 384
384Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
384-Stack size: 2 
384-Equals Mem:<< []>> 
384-NonEquals Mem: << []>> 
384-Equals Sto:<< []>> 
384-NonEquals Sto: << []>> 
384-Useless: []
384-Constancy: []
384-ContextAliasing: []

.....
-----
Block: 1273_19
1273_19Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_19-Stack size: 4 
1273_19-Equals Mem:<< []>> 
1273_19-NonEquals Mem: << []>> 
1273_19-Equals Sto:<< []>> 
1273_19-NonEquals Sto: << []>> 
1273_19-Useless: []
1273_19-Constancy: []
1273_19-ContextAliasing: []

.....
-----
Block: 1273_21
1273_21Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_21-Stack size: 3 
1273_21-Equals Mem:<< []>> 
1273_21-NonEquals Mem: << []>> 
1273_21-Equals Sto:<< []>> 
1273_21-NonEquals Sto: << []>> 
1273_21-Useless: []
1273_21-Constancy: []
1273_21-ContextAliasing: []

.....
-----
Block: 1273_38
1273_38Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_38-Stack size: 7 
1273_38-Equals Mem:<< []>> 
1273_38-NonEquals Mem: << []>> 
1273_38-Equals Sto:<< []>> 
1273_38-NonEquals Sto: << []>> 
1273_38-Useless: []
1273_38-Constancy: []
1273_38-ContextAliasing: []

.....
-----
Block: 6769
6769Instr:<<['JUMPDEST', 'DUP4', 'MLOAD', 'SWAP3', 'POP', 'PUSH1 0x20', 'DUP5', 'ADD', 'MLOAD', 'SWAP2', 'POP', 'PUSH1 0x40', 'DUP5', 'ADD', 'MLOAD', 'SWAP1', 'POP', 'SWAP3', 'POP', 'SWAP3', 'POP', 'SWAP3', 'JUMP']>> 
6769-Stack size: 8 
6769-Equals Mem:<< []>> 
6769-NonEquals Mem: << [<2,8>, <2,14>, <8,14>]>> 
6769-Equals Sto:<< []>> 
6769-NonEquals Sto: << []>> 
6769-Useless: []
6769-Constancy: [(2, 0), (1, 0), (0, 0)]
6769-ContextAliasing: []

.....
-----
Block: 384_1
384_1Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
384_1-Stack size: 3 
384_1-Equals Mem:<< []>> 
384_1-NonEquals Mem: << []>> 
384_1-Equals Sto:<< []>> 
384_1-NonEquals Sto: << []>> 
384_1-Useless: []
384_1-Constancy: []
384_1-ContextAliasing: []

.....
-----
Block: 384_0
384_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
384_0-Stack size: 3 
384_0-Equals Mem:<< []>> 
384_0-NonEquals Mem: << []>> 
384_0-Equals Sto:<< []>> 
384_0-NonEquals Sto: << []>> 
384_0-Useless: []
384_0-Constancy: []
384_0-ContextAliasing: []

.....
-----
Block: 1273
1273Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273-Stack size: 10 
1273-Equals Mem:<< []>> 
1273-NonEquals Mem: << []>> 
1273-Equals Sto:<< []>> 
1273-NonEquals Sto: << []>> 
1273-Useless: []
1273-Constancy: [(5, 0)]
1273-ContextAliasing: []

.....
-----
Block: 1273_36
1273_36Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_36-Stack size: 21 
1273_36-Equals Mem:<< []>> 
1273_36-NonEquals Mem: << []>> 
1273_36-Equals Sto:<< []>> 
1273_36-NonEquals Sto: << []>> 
1273_36-Useless: []
1273_36-Constancy: [(16, 0), (11, 0), (10, 0), (6, 0), (1, 0)]
1273_36-ContextAliasing: []

.....
-----
Block: 1273_34
1273_34Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_34-Stack size: 21 
1273_34-Equals Mem:<< []>> 
1273_34-NonEquals Mem: << []>> 
1273_34-Equals Sto:<< []>> 
1273_34-NonEquals Sto: << []>> 
1273_34-Useless: []
1273_34-Constancy: [(16, 0), (11, 0), (6, 0), (1, 0)]
1273_34-ContextAliasing: []

.....
-----
Block: 1273_33
1273_33Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_33-Stack size: 12 
1273_33-Equals Mem:<< []>> 
1273_33-NonEquals Mem: << []>> 
1273_33-Equals Sto:<< []>> 
1273_33-NonEquals Sto: << []>> 
1273_33-Useless: []
1273_33-Constancy: [(7, 0)]
1273_33-ContextAliasing: []

.....
-----
Block: 1273_31
1273_31Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_31-Stack size: 21 
1273_31-Equals Mem:<< []>> 
1273_31-NonEquals Mem: << []>> 
1273_31-Equals Sto:<< []>> 
1273_31-NonEquals Sto: << []>> 
1273_31-Useless: []
1273_31-Constancy: [(16, 0), (6, 0), (1, 0)]
1273_31-ContextAliasing: []

.....
-----
Block: 1273_32
1273_32Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_32-Stack size: 19 
1273_32-Equals Mem:<< []>> 
1273_32-NonEquals Mem: << []>> 
1273_32-Equals Sto:<< []>> 
1273_32-NonEquals Sto: << []>> 
1273_32-Useless: []
1273_32-Constancy: [(14, 0), (2, 0)]
1273_32-ContextAliasing: []

.....
-----
Block: 1273_30
1273_30Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_30-Stack size: 20 
1273_30-Equals Mem:<< []>> 
1273_30-NonEquals Mem: << []>> 
1273_30-Equals Sto:<< []>> 
1273_30-NonEquals Sto: << []>> 
1273_30-Useless: []
1273_30-Constancy: [(15, 0)]
1273_30-ContextAliasing: []

.....
-----
Block: 1273_35
1273_35Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_35-Stack size: 19 
1273_35-Equals Mem:<< []>> 
1273_35-NonEquals Mem: << []>> 
1273_35-Equals Sto:<< []>> 
1273_35-NonEquals Sto: << []>> 
1273_35-Useless: []
1273_35-Constancy: [(14, 0), (9, 0), (2, 0)]
1273_35-ContextAliasing: []

.....
-----
Block: 1273_29
1273_29Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_29-Stack size: 21 
1273_29-Equals Mem:<< []>> 
1273_29-NonEquals Mem: << []>> 
1273_29-Equals Sto:<< []>> 
1273_29-NonEquals Sto: << []>> 
1273_29-Useless: []
1273_29-Constancy: [(16, 0), (6, 0), (1, 0)]
1273_29-ContextAliasing: []

.....
-----
Block: 1273_28
1273_28Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_28-Stack size: 24 
1273_28-Equals Mem:<< []>> 
1273_28-NonEquals Mem: << []>> 
1273_28-Equals Sto:<< []>> 
1273_28-NonEquals Sto: << []>> 
1273_28-Useless: []
1273_28-Constancy: [(19, 0), (6, 0), (1, 0)]
1273_28-ContextAliasing: []

.....
-----
Block: 1273_27
1273_27Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_27-Stack size: 22 
1273_27-Equals Mem:<< []>> 
1273_27-NonEquals Mem: << []>> 
1273_27-Equals Sto:<< []>> 
1273_27-NonEquals Sto: << []>> 
1273_27-Useless: []
1273_27-Constancy: [(17, 0), (6, 0), (1, 0)]
1273_27-ContextAliasing: []

.....
-----
Block: 1273_26
1273_26Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_26-Stack size: 17 
1273_26-Equals Mem:<< []>> 
1273_26-NonEquals Mem: << []>> 
1273_26-Equals Sto:<< []>> 
1273_26-NonEquals Sto: << []>> 
1273_26-Useless: []
1273_26-Constancy: [(12, 0), (2, 0)]
1273_26-ContextAliasing: []

.....
-----
Block: 1273_25
1273_25Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_25-Stack size: 26 
1273_25-Equals Mem:<< []>> 
1273_25-NonEquals Mem: << []>> 
1273_25-Equals Sto:<< []>> 
1273_25-NonEquals Sto: << []>> 
1273_25-Useless: []
1273_25-Constancy: [(21, 0), (6, 0), (1, 0)]
1273_25-ContextAliasing: []

.....
-----
Block: 1273_24
1273_24Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_24-Stack size: 24 
1273_24-Equals Mem:<< []>> 
1273_24-NonEquals Mem: << []>> 
1273_24-Equals Sto:<< []>> 
1273_24-NonEquals Sto: << []>> 
1273_24-Useless: []
1273_24-Constancy: [(19, 0), (6, 0), (1, 0)]
1273_24-ContextAliasing: []

.....
-----
Block: 1273_23
1273_23Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_23-Stack size: 17 
1273_23-Equals Mem:<< []>> 
1273_23-NonEquals Mem: << []>> 
1273_23-Equals Sto:<< []>> 
1273_23-NonEquals Sto: << []>> 
1273_23-Useless: []
1273_23-Constancy: [(12, 0), (2, 0)]
1273_23-ContextAliasing: []

.....
-----
Block: 1273_22
1273_22Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_22-Stack size: 17 
1273_22-Equals Mem:<< []>> 
1273_22-NonEquals Mem: << []>> 
1273_22-Equals Sto:<< []>> 
1273_22-NonEquals Sto: << []>> 
1273_22-Useless: []
1273_22-Constancy: [(12, 0), (2, 0)]
1273_22-ContextAliasing: []

.....
-----
Block: 1273_37
1273_37Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_37-Stack size: 19 
1273_37-Equals Mem:<< []>> 
1273_37-NonEquals Mem: << []>> 
1273_37-Equals Sto:<< []>> 
1273_37-NonEquals Sto: << []>> 
1273_37-Useless: []
1273_37-Constancy: [(14, 0), (9, 0), (8, 0), (2, 0)]
1273_37-ContextAliasing: []

.....
-----
Block: 1273_20
1273_20Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_20-Stack size: 11 
1273_20-Equals Mem:<< []>> 
1273_20-NonEquals Mem: << []>> 
1273_20-Equals Sto:<< []>> 
1273_20-NonEquals Sto: << []>> 
1273_20-Useless: []
1273_20-Constancy: []
1273_20-ContextAliasing: []

.....
-----
Block: 1273_18
1273_18Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_18-Stack size: 11 
1273_18-Equals Mem:<< []>> 
1273_18-NonEquals Mem: << []>> 
1273_18-Equals Sto:<< []>> 
1273_18-NonEquals Sto: << []>> 
1273_18-Useless: []
1273_18-Constancy: [(5, 0)]
1273_18-ContextAliasing: []

.....
-----
Block: 1273_16
1273_16Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_16-Stack size: 22 
1273_16-Equals Mem:<< []>> 
1273_16-NonEquals Mem: << []>> 
1273_16-Equals Sto:<< []>> 
1273_16-NonEquals Sto: << []>> 
1273_16-Useless: []
1273_16-Constancy: [(16, 0), (11, 0), (10, 0), (6, 0), (1, 0)]
1273_16-ContextAliasing: []

.....
-----
Block: 1273_14
1273_14Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_14-Stack size: 22 
1273_14-Equals Mem:<< []>> 
1273_14-NonEquals Mem: << []>> 
1273_14-Equals Sto:<< []>> 
1273_14-NonEquals Sto: << []>> 
1273_14-Useless: []
1273_14-Constancy: [(16, 0), (11, 0), (6, 0), (1, 0)]
1273_14-ContextAliasing: []

.....
-----
Block: 1273_13
1273_13Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_13-Stack size: 13 
1273_13-Equals Mem:<< []>> 
1273_13-NonEquals Mem: << []>> 
1273_13-Equals Sto:<< []>> 
1273_13-NonEquals Sto: << []>> 
1273_13-Useless: []
1273_13-Constancy: [(7, 0)]
1273_13-ContextAliasing: []

.....
-----
Block: 1273_11
1273_11Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_11-Stack size: 22 
1273_11-Equals Mem:<< []>> 
1273_11-NonEquals Mem: << []>> 
1273_11-Equals Sto:<< []>> 
1273_11-NonEquals Sto: << []>> 
1273_11-Useless: []
1273_11-Constancy: [(16, 0), (6, 0), (1, 0)]
1273_11-ContextAliasing: []

.....
-----
Block: 1273_12
1273_12Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_12-Stack size: 20 
1273_12-Equals Mem:<< []>> 
1273_12-NonEquals Mem: << []>> 
1273_12-Equals Sto:<< []>> 
1273_12-NonEquals Sto: << []>> 
1273_12-Useless: []
1273_12-Constancy: [(14, 0), (2, 0)]
1273_12-ContextAliasing: []

.....
-----
Block: 1273_10
1273_10Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_10-Stack size: 21 
1273_10-Equals Mem:<< []>> 
1273_10-NonEquals Mem: << []>> 
1273_10-Equals Sto:<< []>> 
1273_10-NonEquals Sto: << []>> 
1273_10-Useless: []
1273_10-Constancy: [(15, 0)]
1273_10-ContextAliasing: []

.....
-----
Block: 1273_15
1273_15Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_15-Stack size: 20 
1273_15-Equals Mem:<< []>> 
1273_15-NonEquals Mem: << []>> 
1273_15-Equals Sto:<< []>> 
1273_15-NonEquals Sto: << []>> 
1273_15-Useless: []
1273_15-Constancy: [(14, 0), (9, 0), (2, 0)]
1273_15-ContextAliasing: []

.....
-----
Block: 1273_9
1273_9Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_9-Stack size: 22 
1273_9-Equals Mem:<< []>> 
1273_9-NonEquals Mem: << []>> 
1273_9-Equals Sto:<< []>> 
1273_9-NonEquals Sto: << []>> 
1273_9-Useless: []
1273_9-Constancy: [(16, 0), (6, 0), (1, 0)]
1273_9-ContextAliasing: []

.....
-----
Block: 1273_8
1273_8Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_8-Stack size: 25 
1273_8-Equals Mem:<< []>> 
1273_8-NonEquals Mem: << []>> 
1273_8-Equals Sto:<< []>> 
1273_8-NonEquals Sto: << []>> 
1273_8-Useless: []
1273_8-Constancy: [(19, 0), (6, 0), (1, 0)]
1273_8-ContextAliasing: []

.....
-----
Block: 1273_7
1273_7Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_7-Stack size: 23 
1273_7-Equals Mem:<< []>> 
1273_7-NonEquals Mem: << []>> 
1273_7-Equals Sto:<< []>> 
1273_7-NonEquals Sto: << []>> 
1273_7-Useless: []
1273_7-Constancy: [(17, 0), (6, 0), (1, 0)]
1273_7-ContextAliasing: []

.....
-----
Block: 1273_6
1273_6Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_6-Stack size: 18 
1273_6-Equals Mem:<< []>> 
1273_6-NonEquals Mem: << []>> 
1273_6-Equals Sto:<< []>> 
1273_6-NonEquals Sto: << []>> 
1273_6-Useless: []
1273_6-Constancy: [(12, 0), (2, 0)]
1273_6-ContextAliasing: []

.....
-----
Block: 1273_5
1273_5Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_5-Stack size: 27 
1273_5-Equals Mem:<< []>> 
1273_5-NonEquals Mem: << []>> 
1273_5-Equals Sto:<< []>> 
1273_5-NonEquals Sto: << []>> 
1273_5-Useless: []
1273_5-Constancy: [(21, 0), (6, 0), (1, 0)]
1273_5-ContextAliasing: []

.....
-----
Block: 1273_4
1273_4Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_4-Stack size: 25 
1273_4-Equals Mem:<< []>> 
1273_4-NonEquals Mem: << []>> 
1273_4-Equals Sto:<< []>> 
1273_4-NonEquals Sto: << []>> 
1273_4-Useless: []
1273_4-Constancy: [(19, 0), (6, 0), (1, 0)]
1273_4-ContextAliasing: []

.....
-----
Block: 1273_3
1273_3Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_3-Stack size: 18 
1273_3-Equals Mem:<< []>> 
1273_3-NonEquals Mem: << []>> 
1273_3-Equals Sto:<< []>> 
1273_3-NonEquals Sto: << []>> 
1273_3-Useless: []
1273_3-Constancy: [(12, 0), (2, 0)]
1273_3-ContextAliasing: []

.....
-----
Block: 1273_2
1273_2Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_2-Stack size: 18 
1273_2-Equals Mem:<< []>> 
1273_2-NonEquals Mem: << []>> 
1273_2-Equals Sto:<< []>> 
1273_2-NonEquals Sto: << []>> 
1273_2-Useless: []
1273_2-Constancy: [(12, 0), (2, 0)]
1273_2-ContextAliasing: []

.....
-----
Block: 1273_1
1273_1Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_1-Stack size: 15 
1273_1-Equals Mem:<< []>> 
1273_1-NonEquals Mem: << []>> 
1273_1-Equals Sto:<< []>> 
1273_1-NonEquals Sto: << []>> 
1273_1-Useless: []
1273_1-Constancy: [(9, 0), (1, 0)]
1273_1-ContextAliasing: []

.....
-----
Block: 1273_0
1273_0Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_0-Stack size: 11 
1273_0-Equals Mem:<< []>> 
1273_0-NonEquals Mem: << []>> 
1273_0-Equals Sto:<< []>> 
1273_0-NonEquals Sto: << []>> 
1273_0-Useless: []
1273_0-Constancy: [(5, 0)]
1273_0-ContextAliasing: []

.....
-----
Block: 1273_17
1273_17Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273_17-Stack size: 20 
1273_17-Equals Mem:<< []>> 
1273_17-NonEquals Mem: << []>> 
1273_17-Equals Sto:<< []>> 
1273_17-NonEquals Sto: << []>> 
1273_17-Useless: []
1273_17-Constancy: [(14, 0), (9, 0), (8, 0), (2, 0)]
1273_17-ContextAliasing: []

.....
-----
Block: 1677
1677Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SSTORE', 'PUSH1 0x06', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'PUSH32 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf', 'PUSH2 0x06c7', 'PUSH1 0x08', 'PUSH1 0x0a', 'PUSH2 0x19be', 'JUMP']>> 
1677-Stack size: 3 
1677-Equals Mem:<< []>> 
1677-NonEquals Mem: << []>> 
1677-Equals Sto:<< [<5,10>]>> 
1677-NonEquals Sto: << [<2,5>, <2,10>]>> 
1677-Useless: []
1677-Constancy: []
1677-ContextAliasing: []

.....
-----
Block: 1911
1911Instr:<<['JUMPDEST', 'PUSH1 0x13', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH20 0x7a250d5630b4cf539739df2c5dacb4c659f2488d', 'SWAP1', 'DUP2', 'OR', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH2 0x07c0', 'SWAP1', 'ADDRESS', 'SWAP1', 'PUSH2 0x07b2', 'PUSH1 0x08', 'PUSH1 0x0a', 'PUSH2 0x19be', 'JUMP']>> 
1911-Stack size: 2 
1911-Equals Mem:<< []>> 
1911-NonEquals Mem: << []>> 
1911-Equals Sto:<< [<3,17>]>> 
1911-NonEquals Sto: << []>> 
1911-Useless: []
1911-Constancy: []
1911-ContextAliasing: []

.....
-----
Block: 3620
3620Instr:<<['JUMPDEST', 'PUSH2 0x0e4a', 'PUSH1 0x64', 'PUSH2 0x0d90', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e3f', 'JUMPI']>> 
3620-Stack size: 12 
3620-Equals Mem:<< []>> 
3620-NonEquals Mem: << []>> 
3620-Equals Sto:<< []>> 
3620-NonEquals Sto: << [<5,7>]>> 
3620-Useless: []
3620-Constancy: [(6, 0), (1, 0)]
3620-ContextAliasing: []

.....
-----
Block: 4241
4241Instr:<<['PUSH2 0x10ab', 'PUSH1 0x64', 'PUSH2 0x0d90', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e3f', 'JUMPI']>> 
4241-Stack size: 12 
4241-Equals Mem:<< []>> 
4241-NonEquals Mem: << []>> 
4241-Equals Sto:<< []>> 
4241-NonEquals Sto: << [<4,6>]>> 
4241-Useless: []
4241-Constancy: [(6, 0)]
4241-ContextAliasing: []

.....
-----
Block: 4365
4365Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4365-Stack size: 14 
4365-Equals Mem:<< []>> 
4365-NonEquals Mem: << []>> 
4365-Equals Sto:<< []>> 
4365-NonEquals Sto: << [<2,4>]>> 
4365-Useless: []
4365-Constancy: [(8, 0)]
4365-ContextAliasing: []

.....
-----
Block: 5336
5336Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5336-Stack size: 20 
5336-Equals Mem:<< []>> 
5336-NonEquals Mem: << []>> 
5336-Equals Sto:<< [<5,12>]>> 
5336-NonEquals Sto: << []>> 
5336-Useless: []
5336-Constancy: [(14, 0)]
5336-ContextAliasing: []

.....
-----
Block: 5336_0
5336_0Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5336_0-Stack size: 10 
5336_0-Equals Mem:<< []>> 
5336_0-NonEquals Mem: << []>> 
5336_0-Equals Sto:<< [<5,12>]>> 
5336_0-NonEquals Sto: << []>> 
5336_0-Useless: []
5336_0-Constancy: []
5336_0-ContextAliasing: []

.....
-----
Block: 3620_0
3620_0Instr:<<['JUMPDEST', 'PUSH2 0x0e4a', 'PUSH1 0x64', 'PUSH2 0x0d90', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e3f', 'JUMPI']>> 
3620_0-Stack size: 11 
3620_0-Equals Mem:<< []>> 
3620_0-NonEquals Mem: << []>> 
3620_0-Equals Sto:<< []>> 
3620_0-NonEquals Sto: << [<5,7>]>> 
3620_0-Useless: []
3620_0-Constancy: [(6, 0), (1, 0)]
3620_0-ContextAliasing: []

.....
-----
Block: 5336_1
5336_1Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5336_1-Stack size: 19 
5336_1-Equals Mem:<< []>> 
5336_1-NonEquals Mem: << []>> 
5336_1-Equals Sto:<< [<5,12>]>> 
5336_1-NonEquals Sto: << []>> 
5336_1-Useless: []
5336_1-Constancy: [(14, 0)]
5336_1-ContextAliasing: []

.....
-----
Block: 4365_0
4365_0Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4365_0-Stack size: 13 
4365_0-Equals Mem:<< []>> 
4365_0-NonEquals Mem: << []>> 
4365_0-Equals Sto:<< []>> 
4365_0-NonEquals Sto: << [<2,4>]>> 
4365_0-Useless: []
4365_0-Constancy: [(8, 0)]
4365_0-ContextAliasing: []

.....
-----
Block: 4241_0
4241_0Instr:<<['PUSH2 0x10ab', 'PUSH1 0x64', 'PUSH2 0x0d90', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e3f', 'JUMPI']>> 
4241_0-Stack size: 11 
4241_0-Equals Mem:<< []>> 
4241_0-NonEquals Mem: << []>> 
4241_0-Equals Sto:<< []>> 
4241_0-NonEquals Sto: << [<4,6>]>> 
4241_0-Useless: []
4241_0-Constancy: [(6, 0)]
4241_0-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.6022192660020664s

*************************************************************
File: Ownable
Build CFG: 0.0032466769916936755s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis Ownable
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract Ownable: 3
Memory read accesses ContractOwnable: 8
Memory write accesses ContractOwnable: 6
********************************** INIT
COMPACT CLONES: True
CONTRACT: Ownable
-----
Block: 66
66Instr:<<['JUMPDEST', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
66-Stack size: 1 
66-Equals Mem:<< [<5,16>]>> 
66-NonEquals Mem: << [<15,5>, <15,16>]>> 
66-Equals Sto:<< []>> 
66-NonEquals Sto: << []>> 
66-Useless: []
66-Constancy: []
66-ContextAliasing: []

.....
-----
Block: 114
114Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'DUP2', 'SWAP1', 'MSTORE', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
114-Stack size: 2 
114-Equals Mem:<< [<1,26>]>> 
114-NonEquals Mem: << [<6,1>, <6,26>, <13,1>, <13,26>, <17,1>, <17,26>, <22,1>, <22,26>]>> 
114-Equals Sto:<< []>> 
114-NonEquals Sto: << []>> 
114-Useless: []
114-Constancy: [(0, 64)]
114-ContextAliasing: []

.....
********************************** END
Memory Analysis: 0.006974040006753057s

*************************************************************
File: SafeMath
Build CFG: 0.0005802290397696197s
Slots analysis started!
Slots analysis finished!
Constants analysis finished!
Starting offset memory analysis SafeMath
Memory accesess analysis finished!


GASOL: Useless accesses found: {}
Free memory analyss finished


SLOTS Contract SafeMath: 0
Memory read accesses ContractSafeMath: 0
Memory write accesses ContractSafeMath: 1
********************************** INIT
COMPACT CLONES: True
CONTRACT: SafeMath
********************************** END
Memory Analysis: 0.00017253798432648182s

*************************************************************
FILERES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter;400;1227;73;370;275;23;1.2419387680129148
FILERES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_Ownable;12;13;2;4;2;1;0.010259894013870507
FILERES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_SafeMath;1;1;0;1;0;0;0.0007664129952900112


Aux path: /tmp/0x00//ethir_03498fa92c6e4af89b0b4667de23592f
The files generated by EthIR are stored in the following directory: /tmp/0x00/costabs/
Block: 1033
1033Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP2', 'DUP3', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x02', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x40', 'DUP1', 'DUP4', 'KECCAK256', 'SWAP4', 'SWAP1', 'SWAP5', 'AND', 'DUP3', 'MSTORE', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
1033-Stack size: 4 
1033-Equals Mem:<< [<12,27>, <17,31>]>> 
1033-NonEquals Mem: << [<12,17>, <12,31>, <17,27>, <27,31>]>> 
1033-Equals Sto:<< []>> 
1033-NonEquals Sto: << []>> 
1033-Useless: []
1033-Constancy: []
1033-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<11,26>, <16,30>], 'memory_deps_noneqs': [<11,16>, <11,30>, <16,26>, <26,30>]}
{'memory_deps_eqs': [<11,26>, <16,30>], 'memory_deps_noneqs': [<11,16>, <11,30>, <16,26>, <26,30>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{32: ((('s(3)', 'sload0'), 1), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
[OPT]: Removed mstore mstore with KECCAK
[OPT]: Removed mstore mstore with KECCAK
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '2', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(11)', 'sload0'), 1)
sload0
[(('s(11)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
SFS with rule: isolated_block_0_0_input.json
{32: ((('s(3)', 'sload0'), 1), 2)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2561'), 2), (('s(3)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(2)', 'and'), 2), (('0', '64', 'keccak2560'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x02 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST POP PUSH20 0xffffffffffffffffffffffffffffffffffffffff SWAP1 AND DUP2 SWAP2 DUP2 DUP1 SWAP4 SWAP1 PUSH1 0x0 MSTORE SWAP1 PUSH1 0x20 SWAP3 PUSH1 0x2 DUP3 SWAP5 MSTORE POP PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP4 POP POP POP JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_1033_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_1033_statistics.csv

Estimated initial gas: 2261
Estimated gas optimized: 2212

Estimated initial size in bytes: 42
Estimated size optimized in bytes: 55

Initial number of instructions: 36
Final number of instructions: 30

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1033;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;1033;2;True;True;False;JUMPDEST PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x02 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP;JUMPDEST POP PUSH20 0xffffffffffffffffffffffffffffffffffffffff SWAP1 AND DUP2 SWAP2 DUP2 DUP1 SWAP4 SWAP1 PUSH1 0x0 MSTORE SWAP1 PUSH1 0x20 SWAP3 PUSH1 0x2 DUP3 SWAP5 MSTORE POP PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP4 POP POP POP JUMP;2261;42;36;2212;55;30;49;-13;6;True;False;False;False;2.1564760439796373;4;2;2100;2100

Block: 2734
2734Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
2734-Stack size: 3 
2734-Equals Mem:<< []>> 
2734-NonEquals Mem: << [<6,1>]>> 
2734-Equals Sto:<< []>> 
2734-NonEquals Sto: << []>> 
2734-Useless: []
2734-Constancy: []
2734-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_2734_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_2734_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2734;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;2734;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP;PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.02880167297553271;1;0;0;0

Block: 2791
2791Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x0b22', 'DUP2', 'PUSH2 0x1a2c', 'JUMP']>> 
2791-Stack size: 9 
2791-Equals Mem:<< []>> 
2791-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
2791-Equals Sto:<< [<31,43>]>> 
2791-NonEquals Sto: << []>> 
2791-Useless: []
2791-Constancy: [(2, 0)]
2791-ContextAliasing: [(6, 7)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>], 'storage_deps_eqs': [<30,42>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
Storage order: [(('0', 's(14)', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('s(15)', 's(17)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: [(('s(9)', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2), (('s(13)', 's(2)', 'mstore'), 2), (('0', 's(14)', 'keccak2560'), 2)]
Memory dep: [(2, 3), (1, 3)]
Memory dep simplified: [(2, 3), (1, 3)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b22 DUP2 PUSH2 0x1a2c JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b22 DUP2 PUSH2 0x1a2c JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_2791_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_2791_statistics.csv

Estimated initial gas: 5172
Estimated gas optimized: 5172

Estimated initial size in bytes: 59
Estimated size optimized in bytes: 59

Initial number of instructions: 49
Final number of instructions: 49

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2791;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;2791;2;True;False;False;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b22 DUP2 PUSH2 0x1a2c JUMP;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x0b22 DUP2 PUSH2 0x1a2c JUMP;5172;59;49;5172;59;49;0;0;0;True;True;False;False;2.585342373000458;3;2;5000;5000

Block: 1798
1798Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
1798-Stack size: 2 
1798-Equals Mem:<< []>> 
1798-NonEquals Mem: << [<6,1>]>> 
1798-Equals Sto:<< []>> 
1798-NonEquals Sto: << []>> 
1798-Useless: []
1798-Constancy: []
1798-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_1798_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_1798_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1798;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;1798;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP;PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.029206367034930736;1;0;0;0

Block: 1840
1840Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x17', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
1840-Stack size: 2 
1840-Equals Mem:<< []>> 
1840-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>]>> 
1840-Equals Sto:<< []>> 
1840-NonEquals Sto: << []>> 
1840-Useless: []
1840-Constancy: []
1840-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '23', 'mstore'), 2), (('s(10)', '52670383177537149983225730548340231168144935501260929414795948319927108108288', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_1840_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_1840_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1840;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;1840;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f9 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x74726164696e6720697320616c7265616479206f70656e000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f9 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.134203285968397;1;3;0;0

Block: 2064
2064Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0834', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
2064-Stack size: 6 
2064-Equals Mem:<< [<18,6>]>> 
2064-NonEquals Mem: << []>> 
2064-Equals Sto:<< []>> 
2064-NonEquals Sto: << []>> 
2064-Useless: []
2064-Constancy: []
2064-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2064 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2195
2195Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x08b7', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
2195-Stack size: 9 
2195-Equals Mem:<< [<18,6>]>> 
2195-NonEquals Mem: << []>> 
2195-Equals Sto:<< []>> 
2195-NonEquals Sto: << []>> 
2195-Useless: []
2195-Constancy: []
2195-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2195 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2305
2305Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0925', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
2305-Stack size: 6 
2305-Equals Mem:<< [<18,6>]>> 
2305-NonEquals Mem: << []>> 
2305-Equals Sto:<< []>> 
2305-NonEquals Sto: << []>> 
2305-Useless: []
2305-Constancy: []
2305-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2305 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2341
2341Instr:<<['JUMPDEST', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP3', 'DUP4', 'AND', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'SWAP1', 'SWAP2', 'AND', 'OR', 'SWAP1', 'SSTORE', 'PUSH1 0x13', 'SLOAD', 'AND', 'PUSH4 0xf305d719', 'SELFBALANCE', 'ADDRESS', 'PUSH2 0x096c', 'DUP2', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
2341-Stack size: 3 
2341-Equals Mem:<< []>> 
2341-NonEquals Mem: << [<41,44>]>> 
2341-Equals Sto:<< [<3,23>]>> 
2341-NonEquals Sto: << [<3,25>, <3,48>, <23,25>, <23,48>, <25,48>]>> 
2341-Useless: []
2341-Constancy: []
2341-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<40,43>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<40,43>], 'storage_deps_eqs': [<2,22>], 'storage_deps_noneqs': [<2,24>, <2,47>, <22,24>, <22,47>, <24,47>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('20', 'sload0'), 1), 0), 22: ((('20', 's(14)', 'sstore'), 2), 1), 24: ((('19', 'sload1'), 1), 2), 47: ((('s(6)', 'sload2'), 1), 4)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(14)', 'sstore'), 2), (('19', 'sload1'), 1), (('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: [(('0', 's(22)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
AND(ADDRESS,2^160)
[RULE]: Simplification rule type 2: {'id': 'ADDRESS_0', 'opcode': '30', 'disasm': 'ADDRESS', 'inpt_sk': [], 'outpt_sk': ['s(22)'], 'push': False, 'gas': 2, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Delete rules: [{'id': 'AND_3', 'opcode': '16', 'disasm': 'AND', 'inpt_sk': [1461501637330902918203684832716283019655932542975, 's(22)'], 'outpt_sk': ['s(22)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}]
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('19', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('s(6)', 'sload2'), 1)
sload2
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('20', 'sload0'), 1), 0), 22: ((('20', 's(14)', 'sstore'), 2), 1), 24: ((('19', 'sload1'), 1), 2), 47: ((('s(6)', 'sload2'), 1), 4)}
(('20', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('19', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
(('s(6)', 'sload2'), 1)
sload2
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload2'), 1), (('address', 'address'), 0), (('selfbalance', 'selfbalance'), 0), (('19', 'sload1'), 1), (('s(11)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('20', 'sload0'), 1), (('s(16)', 115792089237316195423570985007226406215939081747436879206741300988257197096960, 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2), (('s(15)', 's(19)', 'or'), 2), (('1461501637330902918203684832716283019655932542975', 's(8)', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x096c DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x096c DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_2341_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_2341_statistics.csv

Estimated initial gas: 9371
Estimated gas optimized: 9371

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 71

Initial number of instructions: 51
Final number of instructions: 51

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2341;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;2341;2;True;False;False;JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x096c DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP;JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP3 DUP4 AND PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x13 SLOAD AND PUSH4 0xf305d719 SELFBALANCE ADDRESS PUSH2 0x096c DUP2 PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP;9371;71;51;9371;71;51;0;0;0;True;True;False;False;2.3129144230042584;8;2;9200;9200

Block: 2533
2533Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0a0a', 'SWAP2', 'SWAP1', 'PUSH2 0x1a5f', 'JUMP']>> 
2533-Stack size: 7 
2533-Equals Mem:<< [<19,7>]>> 
2533-NonEquals Mem: << []>> 
2533-Equals Sto:<< []>> 
2533-NonEquals Sto: << []>> 
2533-Useless: []
2533-Constancy: []
2533-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<6,18>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<6,18>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(5)', 's(8)', '+'), 2), (('s(8)', '31', '+'), 2), (('s(12)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(5)', 's(11)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(5)', 's(8)', '+'), 2), (('s(8)', '31', '+'), 2), (('s(12)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(5)', 's(11)', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2533 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2677
2677Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x0a99', 'SWAP2', 'SWAP1', 'PUSH2 0x1a8a', 'JUMP']>> 
2677-Stack size: 6 
2677-Equals Mem:<< [<18,6>]>> 
2677-NonEquals Mem: << []>> 
2677-Equals Sto:<< []>> 
2677-NonEquals Sto: << []>> 
2677-Useless: []
2677-Constancy: []
2677-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2677 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 461
461Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
461-Stack size: 2 
461-Equals Mem:<< []>> 
461-NonEquals Mem: << [<5,2>]>> 
461-Equals Sto:<< []>> 
461-NonEquals Sto: << []>> 
461-Useless: []
461-Constancy: []
461-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(0)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0180 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0180 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_461_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_461_statistics.csv

Estimated initial gas: 33
Estimated gas optimized: 33

Estimated initial size in bytes: 14
Estimated size optimized in bytes: 14

Initial number of instructions: 10
Final number of instructions: 10

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_461;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;461;2;False;True;True;JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0180 JUMP;JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0180 JUMP;33;14;10;33;14;10;0;0;0;True;False;False;False;0.018182157014962286;0;0;0;0

Block: 424
424Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'SWAP1', 'ISZERO', 'ISZERO', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
424-Stack size: 2 
424-Equals Mem:<< []>> 
424-NonEquals Mem: << [<7,2>]>> 
424-Equals Sto:<< []>> 
424-NonEquals Sto: << []>> 
424-Useless: []
424-Constancy: []
424-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('s(0)', 'iszero'), 1), (('s(5)', 'iszero'), 1)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('s(0)', 'iszero'), 1), (('s(5)', 'iszero'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0180 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0180 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_424_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_424_statistics.csv

Estimated initial gas: 39
Estimated gas optimized: 39

Estimated initial size in bytes: 16
Estimated size optimized in bytes: 16

Initial number of instructions: 12
Final number of instructions: 12

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_424;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;424;2;False;True;True;JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0180 JUMP;JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x0180 JUMP;39;16;12;39;16;12;0;0;0;True;False;False;False;0.05122253100853413;0;0;0;0

Block: 844
844Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x06', 'DUP2', 'MSTORE', 'PUSH6 0x4d494c414459', 'PUSH1 0xd0', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x0173', 'JUMP']>> 
844-Stack size: 2 
844-Equals Mem:<< [<10,4>]>> 
844-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
844-Equals Sto:<< []>> 
844-NonEquals Sto: << []>> 
844-Useless: []
844-Constancy: []
844-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>]}
{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('208', '84977207297113', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(3)', 'mstore'), 2), (('s(2)', '6', 'mstore'), 2), (('s(6)', '34957595468957071718307258276896530492658639416801125861199069033402810236928', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3)]
Memory dep simplified: [(2, 3), (1, 2), (0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(2)', '+'), 2), (('s(2)', '32', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(2)', '+'), 2), (('s(2)', '32', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_844 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5837
5837Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0x20', 'DUP1', 'DUP4', 'MSTORE', 'DUP4', 'MLOAD', 'DUP1', 'DUP3', 'DUP6', 'ADD', 'MSTORE', 'PUSH0']>> 
5837-Stack size: 4 
5837-Equals Mem:<< []>> 
5837-NonEquals Mem: << [<12,7>, <5,7>]>> 
5837-Equals Sto:<< []>> 
5837-NonEquals Sto: << []>> 
5837-Useless: []
5837-Constancy: []
5837-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<6,11>, <4,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<6,11>, <4,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(1)', '32', 'mstore'), 2), (('s(0)', 'mload0'), 1), (('s(7)', 's(6)', 'mstore'), 2)]
Memory dep: [(0, 2)]
Memory dep simplified: [(0, 2)]
********************IT*********************
(('s(0)', 'mload0'), 1)
mload0
[(('s(0)', 'mload0'), 1), (('s(1)', '32', '+'), 2)]
{}
(('s(0)', 'mload0'), 1)
mload0
[(('s(0)', 'mload0'), 1), (('s(1)', '32', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0

Optimized code stored in /tmp/0x00/MiladyDeWinter_5837_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_5837_statistics.csv

Estimated initial gas: 38
Estimated gas optimized: 38

Estimated initial size in bytes: 15
Estimated size optimized in bytes: 15

Initial number of instructions: 14
Final number of instructions: 14

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5837;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;5837;2;False;True;True;JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0;JUMPDEST PUSH0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH0;38;15;14;38;15;14;0;0;0;True;False;False;False;0.14887875597923994;0;1;0;0

Block: 5861
5861Instr:<<['DUP6', 'DUP2', 'ADD', 'DUP4', 'ADD', 'MLOAD', 'DUP6', 'DUP3', 'ADD', 'PUSH1 0x40', 'ADD', 'MSTORE', 'DUP3', 'ADD', 'PUSH2 0x16dc', 'JUMP']>> 
5861-Stack size: 8 
5861-Equals Mem:<< []>> 
5861-NonEquals Mem: << [<11,5>]>> 
5861-Equals Sto:<< []>> 
5861-NonEquals Sto: << []>> 
5861-Useless: []
5861-Constancy: [(2, 32), (3, 0)]
5861-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,11>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<5,11>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(10)', 'mload0'), 1), (('s(8)', 's(12)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(10)', 'mload0'), 1)
mload0
[(('s(3)', 's(5)', '+'), 2), (('s(5)', 's(1)', '+'), 2), (('64', 's(9)', '+'), 2), (('s(5)', 's(0)', '+'), 2), (('s(3)', 's(11)', '+'), 2), (('s(10)', 'mload0'), 1)]
{}
(('s(10)', 'mload0'), 1)
mload0
[(('s(3)', 's(5)', '+'), 2), (('s(5)', 's(1)', '+'), 2), (('64', 's(9)', '+'), 2), (('s(5)', 's(0)', '+'), 2), (('s(3)', 's(11)', '+'), 2), (('s(10)', 'mload0'), 1)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x16dc JUMP

Optimized sequence (basic block per line):
DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x16dc JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_5861_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_5861_statistics.csv

Estimated initial gas: 53
Estimated gas optimized: 53

Estimated initial size in bytes: 19
Estimated size optimized in bytes: 19

Initial number of instructions: 16
Final number of instructions: 16

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5861;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;5861;2;False;True;True;DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x16dc JUMP;DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x16dc JUMP;53;19;16;53;19;16;0;0;0;True;False;False;False;0.6673442260362208;0;0;0;0

Block: 785
785Instr:<<['JUMPDEST', 'POP', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
785-Stack size: 2 
785-Equals Mem:<< []>> 
785-NonEquals Mem: << [<15,5>]>> 
785-Equals Sto:<< []>> 
785-NonEquals Sto: << []>> 
785-Useless: []
785-Constancy: []
785-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('0', 'sload0'), 1), 0)}
Storage order: [(('0', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', 's(5)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('0', 'sload0'), 1), 0)}
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2), (('0', 'sload0'), 1), (('s(6)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_785 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1599
1599Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
1599-Stack size: 2 
1599-Equals Mem:<< []>> 
1599-NonEquals Mem: << [<6,1>]>> 
1599-Equals Sto:<< []>> 
1599-NonEquals Sto: << []>> 
1599-Useless: []
1599-Constancy: []
1599-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_1599_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_1599_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1599;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;1599;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP;PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.027914782986044884;1;0;0;0

Block: 1486
1486Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
1486-Stack size: 2 
1486-Equals Mem:<< []>> 
1486-NonEquals Mem: << [<6,1>]>> 
1486-Equals Sto:<< []>> 
1486-NonEquals Sto: << []>> 
1486-Useless: []
1486-Constancy: []
1486-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_1486_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_1486_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1486;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;1486;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP;PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.02720722003141418;1;0;0;0

Block: 687
687Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
687-Stack size: 3 
687-Equals Mem:<< []>> 
687-NonEquals Mem: << [<10,13>]>> 
687-Equals Sto:<< []>> 
687-NonEquals Sto: << []>> 
687-Useless: []
687-Constancy: []
687-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(2)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(4)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(2)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(2)', 'sload0'), 1), 1)}
(('s(2)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(2)', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_687 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1422
1422Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'DUP1', 'ISZERO', 'PUSH2 0x05ac', 'JUMPI']>> 
1422-Stack size: 2 
1422-Equals Mem:<< []>> 
1422-NonEquals Mem: << [<5,8>]>> 
1422-Equals Sto:<< []>> 
1422-NonEquals Sto: << []>> 
1422-Useless: []
1422-Constancy: []
1422-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(3)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('s(4)', 'iszero'), 1), (('address', 'address'), 0)]
{11: ((('s(3)', 'sload0'), 1), 1)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('s(4)', 'iszero'), 1), (('address', 'address'), 0)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1422 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 612
612Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'SWAP1', 'JUMP']>> 
612-Stack size: 3 
612-Equals Mem:<< []>> 
612-NonEquals Mem: << [<10,13>]>> 
612-Equals Sto:<< []>> 
612-NonEquals Sto: << []>> 
612-Useless: []
612-Constancy: []
612-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<9,12>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(3)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(5)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('255', 's(4)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(3)', 'sload0'), 1), 1)}
(('s(3)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(3)', 'sload0'), 1), (('255', 's(4)', 'and'), 2), (('1461501637330902918203684832716283019655932542975', 's(1)', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_612 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 6052
6052Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x41', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6052-Stack size: 11 
6052-Equals Mem:<< []>> 
6052-NonEquals Mem: << [<5,8>]>> 
6052-Equals Sto:<< []>> 
6052-NonEquals Sto: << []>> 
6052-Useless: []
6052-Constancy: []
6052-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '65', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_6052 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 6186
6186Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MSTORE', 'SWAP2', 'DUP3', 'MSTORE', 'DUP5', 'DUP3', 'ADD', 'SWAP3', 'POP', 'DUP4', 'DUP2', 'ADD', 'DUP6', 'ADD', 'SWAP2', 'DUP9', 'DUP4', 'GT', 'ISZERO', 'PUSH2 0x1847', 'JUMPI']>> 
6186-Stack size: 13 
6186-Equals Mem:<< []>> 
6186-NonEquals Mem: << [<2,5>]>> 
6186-Equals Sto:<< []>> 
6186-NonEquals Sto: << []>> 
6186-Useless: []
6186-Constancy: [(7, 0), (6, 32)]
6186-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,4>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 's(9)', 'mstore'), 2), (('s(8)', 's(6)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
{}
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x1847 JUMPI

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x1847 JUMPI

Optimized code stored in /tmp/0x00/MiladyDeWinter_6186_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_6186_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 26
Estimated size optimized in bytes: 26

Initial number of instructions: 23
Final number of instructions: 23

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_6186;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;6186;2;True;False;False;JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x1847 JUMPI;JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x1847 JUMPI;73;26;23;73;26;23;0;0;0;True;False;False;False;2.1660082940361463;0;0;0;0

Block: 1250
1250Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP1', 'PUSH2 0x19e3', 'JUMP']>> 
1250-Stack size: 3 
1250-Equals Mem:<< []>> 
1250-NonEquals Mem: << [<6,1>]>> 
1250-Equals Sto:<< []>> 
1250-NonEquals Sto: << []>> 
1250-Useless: [6]
1250-Constancy: []
1250-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(4)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(4)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_1250_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_1250_statistics.csv

Estimated initial gas: 44
Estimated gas optimized: 38

Estimated initial size in bytes: 23
Estimated size optimized in bytes: 50

Initial number of instructions: 13
Final number of instructions: 11

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1250;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;1250;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP1 PUSH2 0x19e3 JUMP;PUSH2 0x4f9 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x4 PUSH1 0x40 MLOAD ADD PUSH2 0x19e3 JUMP;44;23;13;38;50;11;6;-27;2;True;False;False;False;0.02903298899764195;1;0;0;0

Block: 1315
1315Instr:<<['JUMPDEST', 'PUSH1 0x20', 'SWAP1', 'DUP2', 'MUL', 'SWAP2', 'SWAP1', 'SWAP2', 'ADD', 'DUP2', 'ADD', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP3', 'MSTORE', 'DUP2', 'ADD', 'SWAP2', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x40', 'ADD', 'PUSH0', 'KECCAK256', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP2', 'ISZERO', 'ISZERO', 'SWAP2', 'SWAP1', 'SWAP2', 'OR', 'SWAP1', 'SSTORE', 'DUP1', 'PUSH2 0x055e', 'DUP2', 'PUSH2 0x1a2c', 'JUMP']>> 
1315-Stack size: 9 
1315-Equals Mem:<< []>> 
1315-NonEquals Mem: << [<19,11>, <19,25>, <25,11>, <11,29>]>> 
1315-Equals Sto:<< [<31,43>]>> 
1315-NonEquals Sto: << []>> 
1315-Useless: []
1315-Constancy: [(4, 0), (2, 0)]
1315-ContextAliasing: [(6, 7)]


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,18>, <18,24>, <10,24>, <10,28>], 'storage_deps_eqs': [<30,42>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
Storage order: [(('0', 's(14)', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('s(15)', 's(17)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: [(('s(9)', 'mload0'), 1), (('s(3)', 's(6)', 'mstore'), 2), (('s(13)', 's(2)', 'mstore'), 2), (('0', 's(14)', 'keccak2560'), 2)]
Memory dep: [(2, 3), (1, 3)]
Memory dep simplified: [(2, 3), (1, 3)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{30: ((('s(15)', 'sload0'), 1), 1), 42: ((('s(15)', 's(17)', 'sstore'), 2), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
(('s(9)', 'mload0'), 1)
mload0
[(('32', 's(5)', '*'), 2), (('s(11)', 's(4)', '+'), 2), (('32', 's(10)', '+'), 2), (('s(9)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2), (('s(3)', '32', '+'), 2), (('64', 's(3)', '+'), 2), (('0', 's(14)', 'keccak2560'), 2), (('s(1)', 'iszero'), 1), (('s(18)', 'iszero'), 1), (('s(15)', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(23)', 'and'), 2), (('s(19)', 's(20)', 'or'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x055e DUP2 PUSH2 0x1a2c JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x055e DUP2 PUSH2 0x1a2c JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_1315_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_1315_statistics.csv

Estimated initial gas: 5172
Estimated gas optimized: 5172

Estimated initial size in bytes: 59
Estimated size optimized in bytes: 59

Initial number of instructions: 49
Final number of instructions: 49

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1315;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;1315;2;True;False;False;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x055e DUP2 PUSH2 0x1a2c JUMP;JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD PUSH1 0xff NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x055e DUP2 PUSH2 0x1a2c JUMP;5172;59;49;5172;59;49;0;0;0;True;True;False;False;2.6298465119907632;3;2;5000;5000

Block: 537
537Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x08', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH2 0x0180', 'JUMP']>> 
537-Stack size: 2 
537-Equals Mem:<< []>> 
537-NonEquals Mem: << [<6,3>]>> 
537-Equals Sto:<< []>> 
537-NonEquals Sto: << []>> 
537-Useless: []
537-Constancy: []
537-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '8', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(3)', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_537 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3164
3164Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x25', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH5 0x6472657373', 'PUSH1 0xd8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3164-Stack size: 9 
3164-Equals Mem:<< []>> 
3164-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3164-Equals Sto:<< []>> 
3164-NonEquals Sto: << []>> 
3164-Useless: []
3164-Constancy: [(4, 0)]
3164-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('216', '431415980915', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '37', 'mstore'), 2), (('s(10)', '31354931781638678607228669297131712859107492772550336241160036866987736981860', 'mstore'), 2), (('s(12)', '45433405612597180762055095701412804886438245671210399661410036396145969725440', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_3164_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_3164_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 85
Estimated size optimized in bytes: 85

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3164;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;3164;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xd8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;104;85;33;104;85;33;0;0;0;True;False;False;False;2.127112698974088;2;4;0;0

Block: 3264
3264Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x23', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH3 0x657373', 'PUSH1 0xe8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3264-Stack size: 9 
3264-Equals Mem:<< []>> 
3264-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3264-Equals Sto:<< []>> 
3264-NonEquals Sto: << []>> 
3264-Useless: []
3264-Constancy: [(4, 0)]
3264-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('232', '6648691', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '35', 'mstore'), 2), (('s(10)', '31354931781638678607228669297131712859126084785867252355217498662940140921970', 'mstore'), 2), (('s(12)', '45887578820189300338443374388718498632482616163288499555830078344056365121536', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_3264_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_3264_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3264;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;3264;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xe8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.1311707840068266;2;4;0;0

Block: 3355
3355Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x29', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x7468616e207a65726f', 'PUSH1 0xb8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3355-Stack size: 9 
3355-Equals Mem:<< []>> 
3355-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
3355-Equals Sto:<< []>> 
3355-NonEquals Sto: << []>> 
3355-Useless: []
3355-Constancy: [(4, 0)]
3355-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('184', '2147343726488764904047', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '41', 'mstore'), 2), (('s(10)', '38196372293521921433411288587964294122161893341433871906636551770442498929184', 'mstore'), 2), (('s(12)', '52652714968805969334285930938125631089128480032472023743979857642711366500352', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_3355_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_3355_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 89
Estimated size optimized in bytes: 89

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3355;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;3355;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5472616e7366657220616d6f756e74206d757374206265206772656174657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x7468616e207a65726f PUSH1 0xb8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;104;89;33;104;89;33;0;0;0;True;False;False;False;2.132442396017723;2;4;0;0

Block: 5549
5549Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1a', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x16a1', 'JUMP']>> 
5549-Stack size: 14 
5549-Equals Mem:<< [<11,6>]>> 
5549-NonEquals Mem: << [<11,15>, <15,20>, <15,6>, <20,6>, <11,20>]>> 
5549-Equals Sto:<< []>> 
5549-NonEquals Sto: << []>> 
5549-Useless: []
5549-Constancy: [(9, 0)]
5549-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2), (('s(8)', '26', 'mstore'), 2), (('s(12)', '37714057306925736537727338326753656978887423192446994710127794316522513498112', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x15a6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x16a1 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x15a6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x16a1 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_5549_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_5549_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 65
Estimated size optimized in bytes: 65

Initial number of instructions: 24
Final number of instructions: 24

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5549;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;5549;2;True;True;False;JUMPDEST PUSH0 PUSH2 0x15a6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x16a1 JUMP;JUMPDEST PUSH0 PUSH2 0x15a6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1a DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a206469766973696f6e206279207a65726f000000000000 DUP2 MSTORE POP PUSH2 0x16a1 JUMP;73;65;24;73;65;24;0;0;0;True;False;False;False;2.139769268978853;0;1;0;0

Block: 3549
3549Instr:<<['PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x0e1c', 'JUMPI']>> 
3549-Stack size: 11 
3549-Equals Mem:<< []>> 
3549-NonEquals Mem: << [<10,13>]>> 
3549-Equals Sto:<< []>> 
3549-NonEquals Sto: << []>> 
3549-Useless: []
3549-Constancy: [(1, 0), (6, 0)]
3549-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(9)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(9)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(17)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(9)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(9)', 'sload0'), 1), (('255', 's(10)', 'and'), 2), (('s(8)', 'iszero'), 1), (('s(11)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(9)', 'sload0'), 1), 1)}
(('s(9)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(9)', 'sload0'), 1), (('255', 's(10)', 'and'), 2), (('s(8)', 'iszero'), 1), (('s(11)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3549 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3583
3583Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3583-Stack size: 12 
3583-Equals Mem:<< []>> 
3583-NonEquals Mem: << [<11,14>]>> 
3583-Equals Sto:<< []>> 
3583-NonEquals Sto: << []>> 
3583-Useless: []
3583-Constancy: [(7, 0), (2, 0)]
3583-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(6)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '4', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(6)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1), (('255', 's(7)', 'and'), 2), (('s(5)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(6)', 'sload0'), 1), 1)}
(('s(6)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1), (('255', 's(7)', 'and'), 2), (('s(5)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3583 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3722
3722Instr:<<['ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'NUMBER', 'GT', 'PUSH2 0x0f1e', 'JUMPI']>> 
3722-Stack size: 11 
3722-Equals Mem:<< []>> 
3722-NonEquals Mem: << [<4,7>]>> 
3722-Equals Sto:<< []>> 
3722-NonEquals Sto: << []>> 
3722-Useless: []
3722-Constancy: [(6, 0)]
3722-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(4)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(6)', 'mstore'), 2), (('32', '5', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(4)', 'sload0'), 1)
sload0
[(('number', 'number'), 0), (('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1), (('s(3)', 's(5)', 'gt'), 2), (('origin', 'origin'), 0)]
{11: ((('s(4)', 'sload0'), 1), 1)}
(('s(4)', 'sload0'), 1)
sload0
[(('number', 'number'), 0), (('0', '64', 'keccak2560'), 2), (('s(4)', 'sload0'), 1), (('s(3)', 's(5)', 'gt'), 2), (('origin', 'origin'), 0)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3722 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3743
3743Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x49', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH9 0x1030b63637bbb2b217', 'PUSH1 0xb9', 'SHL', 'PUSH1 0x84', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0xa4', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3743-Stack size: 11 
3743-Equals Mem:<< []>> 
3743-NonEquals Mem: << [<33,1>, <6,1>, <11,1>, <16,1>, <21,1>, <26,1>]>> 
3743-Equals Sto:<< []>> 
3743-NonEquals Sto: << []>> 
3743-Useless: []
3743-Constancy: [(6, 0)]
3743-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,33>, <1,6>, <1,11>, <1,16>, <1,21>, <1,26>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,33>, <1,6>, <1,11>, <1,16>, <1,21>, <1,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('185', '298657957751934857751', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '73', 'mstore'), 2), (('s(10)', '43175464300754785199614199185070010317087193698741912792988322009422349034092', 'mstore'), 2), (('s(12)', '45860600759840658865901563111326240759021334497413467019838167414095995691883', 'mstore'), 2), (('s(14)', '14646143631966502206444807779315018622133502848875313473344638166890690117632', 'mstore'), 2)]
Memory dep: [(5, 6), (4, 6), (3, 6), (2, 6), (1, 6), (4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(5, 6), (4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('164', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2), (('s(3)', '132', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('164', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2), (('s(3)', '132', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x04f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_3743_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_3743_statistics.csv

Estimated initial gas: 119
Estimated gas optimized: 119

Estimated initial size in bytes: 127
Estimated size optimized in bytes: 127

Initial number of instructions: 38
Final number of instructions: 38

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3743;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;3743;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x04f9 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x49 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5f7472616e736665723a3a205472616e736665722044656c617920656e61626c PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b PUSH1 0x64 DUP3 ADD MSTORE PUSH9 0x1030b63637bbb2b217 PUSH1 0xb9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xa4 ADD PUSH2 0x04f9 JUMP;119;127;38;119;127;38;0;0;0;True;False;False;False;2.1927863539895043;2;5;0;0

Block: 3870
3870Instr:<<['JUMPDEST', 'ORIGIN', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x05', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'NUMBER', 'SWAP1', 'SSTORE']>> 
3870-Stack size: 11 
3870-Equals Mem:<< []>> 
3870-NonEquals Mem: << [<5,8>]>> 
3870-Equals Sto:<< []>> 
3870-NonEquals Sto: << []>> 
3870-Useless: []
3870-Constancy: [(6, 0)]
3870-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{13: ((('s(1)', 's(2)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(1)', 's(2)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(0)', 'mstore'), 2), (('32', '5', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
{13: ((('s(1)', 's(2)', 'sstore'), 2), 1)}
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3870 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3938
3938Instr:<<['POP', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP5', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x03', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0xff', 'AND', 'ISZERO']>> 
3938-Stack size: 12 
3938-Equals Mem:<< []>> 
3938-NonEquals Mem: << [<11,14>]>> 
3938-Equals Sto:<< []>> 
3938-NonEquals Sto: << []>> 
3938-Useless: []
3938-Constancy: [(7, 0)]
3938-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(6)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(9)', 'mstore'), 2), (('32', '3', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(6)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1), (('255', 's(7)', 'and'), 2), (('s(5)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(6)', 'sload0'), 1), 1)}
(('s(6)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1), (('255', 's(7)', 'and'), 2), (('s(5)', 'iszero'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3938 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3983
3983Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x19', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
3983-Stack size: 11 
3983-Equals Mem:<< []>> 
3983-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
3983-Equals Sto:<< []>> 
3983-NonEquals Sto: << []>> 
3983-Useless: []
3983-Constancy: [(6, 0)]
3983-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '25', 'mstore'), 2), (('s(10)', '31422294206539596639392900159971917510378963875690889976315079369673265905664', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_3983_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_3983_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3983;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;3983;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f9 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865205f6d61785478416d6f756e742e00000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f9 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.103380426997319;1;3;0;0

Block: 4054
4054Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SLOAD', 'DUP4', 'PUSH2 0x0ff8', 'DUP7', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'JUMP']>> 
4054-Stack size: 11 
4054-Equals Mem:<< []>> 
4054-NonEquals Mem: << [<15,18>]>> 
4054-Equals Sto:<< []>> 
4054-NonEquals Sto: << [<2,22>]>> 
4054-Useless: []
4054-Constancy: [(6, 0)]
4054-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<14,17>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<14,17>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<1,21>]}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('16', 'sload0'), 1), 0), 21: ((('s(8)', 'sload1'), 1), 2)}
Storage order: [(('16', 'sload0'), 1), (('0', '64', 'keccak2560'), 2), (('s(8)', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(11)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('16', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
(('s(8)', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('16', 'sload0'), 1), 0), 21: ((('s(8)', 'sload1'), 1), 2)}
(('16', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
(('s(8)', 'sload1'), 1)
sload1
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload1'), 1), (('16', 'sload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(0)', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4054 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4105
4105Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1a', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
4105-Stack size: 11 
4105-Equals Mem:<< []>> 
4105-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
4105-Equals Sto:<< []>> 
4105-NonEquals Sto: << []>> 
4105-Useless: []
4105-Constancy: [(6, 0)]
4105-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '26', 'mstore'), 2), (('s(10)', '31422294206539596639392900160051577764598592111541354583441290478353383424000', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_4105_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_4105_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4105;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;4105;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f9 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1a PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4578636565647320746865206d617857616c6c657453697a652e000000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f9 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.0969099029898643;1;3;0;0

Block: 5801
5801Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
5801-Stack size: 21 
5801-Equals Mem:<< []>> 
5801-NonEquals Mem: << [<6,1>]>> 
5801-Equals Sto:<< []>> 
5801-NonEquals Sto: << []>> 
5801-Useless: []
5801-Constancy: [(1, 0), (16, 0), (6, 0)]
5801-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP2 SWAP1 PUSH2 0x16cd JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f9 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x16cd JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_5801_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_5801_statistics.csv

Estimated initial gas: 47
Estimated gas optimized: 41

Estimated initial size in bytes: 24
Estimated size optimized in bytes: 51

Initial number of instructions: 14
Final number of instructions: 12

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5801;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;5801;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP2 SWAP1 PUSH2 0x16cd JUMP;PUSH2 0x4f9 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x16cd JUMP;47;24;14;41;51;12;6;-27;2;True;False;False;False;0.0734278800082393;1;0;0;0

Block: 6981
6981Instr:<<['PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x12', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6981-Stack size: 23 
6981-Equals Mem:<< []>> 
6981-NonEquals Mem: << [<4,7>]>> 
6981-Equals Sto:<< []>> 
6981-NonEquals Sto: << []>> 
6981-Useless: []
6981-Constancy: [(0, 0)]
6981-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '18', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_6981 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5461
5461Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x21', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x77', 'PUSH1 0xf8', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5461-Stack size: 18 
5461-Equals Mem:<< []>> 
5461-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
5461-Equals Sto:<< []>> 
5461-NonEquals Sto: << []>> 
5461-Useless: []
5461-Constancy: [(1, 0), (13, 0)]
5461-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('248', '119', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '33', 'mstore'), 2), (('s(10)', '37714057306925736537727341711534603569002632158006504148307520321239491439727', 'mstore'), 2), (('s(12)', '53825228981408700216425575062632269666168469434418855940216611316178368856064', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_5461_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_5461_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 81
Estimated size optimized in bytes: 81

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5461;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;5461;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x77 PUSH1 0xf8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;104;81;33;104;81;33;0;0;0;True;False;False;False;2.13215024699457;2;4;0;0

Block: 4270
4270Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH1 0x14', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0xa8', 'SHL', 'SWAP1', 'DIV', 'PUSH1 0xff', 'AND', 'ISZERO', 'DUP1', 'ISZERO', 'PUSH2 0x10e4', 'JUMPI']>> 
4270-Stack size: 11 
4270-Equals Mem:<< []>> 
4270-NonEquals Mem: << [<5,8>]>> 
4270-Equals Sto:<< []>> 
4270-NonEquals Sto: << [<12,14>]>> 
4270-Useless: []
4270-Constancy: [(6, 0)]
4270-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<11,13>]}
[RULE]: Evaluate expression ('168', '1', 'shl')
{11: ((('s(15)', 'sload0'), 1), 1), 13: ((('20', 'sload1'), 1), 2)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('20', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(17)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(15)', 'sload0'), 1)
sload0
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
(('20', 'sload1'), 1)
sload1
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
SFS with rule: isolated_block_0_0_input.json
{11: ((('s(15)', 'sload0'), 1), 1), 13: ((('20', 'sload1'), 1), 2)}
(('s(15)', 'sload0'), 1)
sload0
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
(('20', 'sload1'), 1)
sload1
[(('20', 'sload1'), 1), (('s(6)', '374144419156711147060143317175368453031918731001856', '/'), 2), (('255', 's(5)', 'and'), 2), (('s(4)', 'iszero'), 1), (('s(8)', 'iszero'), 1), (('0', '64', 'keccak2560'), 2), (('s(15)', 'sload0'), 1), (('address', 'address'), 0)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4270 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5146
5146Instr:<<['JUMPDEST', 'POP', 'POP', 'POP', 'POP', 'PUSH1 0x40', 'MLOAD', 'RETURNDATASIZE', 'PUSH1 0x1f', 'NOT', 'PUSH1 0x1f', 'DUP3', 'ADD', 'AND', 'DUP3', 'ADD', 'DUP1', 'PUSH1 0x40', 'MSTORE', 'POP', 'DUP2', 'ADD', 'SWAP1', 'PUSH2 0x143e', 'SWAP2', 'SWAP1', 'PUSH2 0x1a44', 'JUMP']>> 
5146-Stack size: 10 
5146-Equals Mem:<< [<18,6>]>> 
5146-NonEquals Mem: << []>> 
5146-Equals Sto:<< []>> 
5146-NonEquals Sto: << []>> 
5146-Useless: []
5146-Constancy: []
5146-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [<5,17>], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(8)', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('returndatasize', 'returndatasize'), 0), (('s(4)', 's(7)', '+'), 2), (('s(7)', '31', '+'), 2), (('s(11)', 115792089237316195423570985008687907853269984665640564039457584007913129639904, 'and'), 2), (('s(4)', 's(10)', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5146 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 6680
6680Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x32', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6680-Stack size: 10 
6680-Equals Mem:<< []>> 
6680-NonEquals Mem: << [<5,8>]>> 
6680-Equals Sto:<< []>> 
6680-NonEquals Sto: << []>> 
6680-Useless: []
6680-Constancy: []
6680-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '50', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_6680 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5239
5239Instr:<<['JUMPDEST', 'PUSH1 0x13', 'SLOAD', 'PUSH1 0x40', 'MLOAD', 'PUSH4 0x791ac947', 'PUSH1 0xe0', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP2', 'AND', 'SWAP1', 'PUSH4 0x791ac947', 'SWAP1', 'PUSH2 0x14af', 'SWAP1', 'DUP6', 'SWAP1', 'PUSH0', 'SWAP1', 'DUP7', 'SWAP1', 'ADDRESS', 'SWAP1', 'TIMESTAMP', 'SWAP1', 'PUSH1 0x04', 'ADD', 'PUSH2 0x1acf', 'JUMP']>> 
5239-Stack size: 6 
5239-Equals Mem:<< []>> 
5239-NonEquals Mem: << [<9,4>]>> 
5239-Equals Sto:<< []>> 
5239-NonEquals Sto: << []>> 
5239-Useless: []
5239-Constancy: []
5239-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,8>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,8>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
[RULE]: Evaluate expression ('224', '2031798599', 'shl')
{1: ((('19', 'sload0'), 1), 0)}
Storage order: [(('19', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(13)', '54777181867431389256758088925318348688193376272078599187764269278199109648384', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('19', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('19', 'sload0'), 1), 0)}
(('19', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(13)', '+'), 2), (('timestamp0', 'timestamp0'), 0), (('address', 'address'), 0), (('19', 'sload0'), 1), (('s(17)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x14af SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1acf JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x14af SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1acf JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_5239_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_5239_statistics.csv

Estimated initial gas: 2208
Estimated gas optimized: 2208

Estimated initial size in bytes: 56
Estimated size optimized in bytes: 56

Initial number of instructions: 37
Final number of instructions: 37

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5239;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;5239;2;True;False;False;JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x14af SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1acf JUMP;JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD PUSH4 0x791ac947 PUSH1 0xe0 SHL DUP2 MSTORE PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x791ac947 SWAP1 PUSH2 0x14af SWAP1 DUP6 SWAP1 PUSH0 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x04 ADD PUSH2 0x1acf JUMP;2208;56;37;2208;56;37;0;0;0;True;False;False;False;2.20473276701523;3;0;2100;2100

Block: 6863
6863Instr:<<['JUMPDEST', 'PUSH0', 'PUSH1 0xa0', 'DUP3', 'ADD', 'DUP8', 'DUP4', 'MSTORE', 'PUSH1 0x20', 'DUP8', 'DUP2', 'DUP6', 'ADD', 'MSTORE', 'PUSH1 0xa0', 'PUSH1 0x40', 'DUP6', 'ADD', 'MSTORE', 'DUP2', 'DUP8', 'MLOAD', 'DUP1', 'DUP5', 'MSTORE', 'PUSH1 0xc0', 'DUP7', 'ADD', 'SWAP2', 'POP', 'DUP3', 'DUP10', 'ADD', 'SWAP4', 'POP', 'PUSH0']>> 
6863-Stack size: 15 
6863-Equals Mem:<< []>> 
6863-NonEquals Mem: << [<13,21>, <7,21>, <24,21>, <18,21>]>> 
6863-Equals Sto:<< []>> 
6863-NonEquals Sto: << []>> 
6863-Useless: []
6863-Constancy: [(4, 0)]
6863-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,20>, <6,20>, <20,23>, <17,20>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,20>, <6,20>, <20,23>, <17,20>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(5)', 's(0)', 'mstore'), 2), (('s(15)', 's(1)', 'mstore'), 2), (('s(16)', '160', 'mstore'), 2), (('s(2)', 'mload0'), 1), (('s(17)', 's(12)', 'mstore'), 2)]
Memory dep: [(2, 4), (1, 4), (0, 4), (1, 2), (0, 2), (0, 1)]
Memory dep simplified: [(2, 4), (1, 2), (0, 1)]
********************IT*********************
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', 'mload0'), 1), (('s(5)', '192', '+'), 2), (('s(2)', '32', '+'), 2), (('s(5)', '32', '+'), 2), (('s(5)', '64', '+'), 2), (('s(5)', '160', '+'), 2)]
{}
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', 'mload0'), 1), (('s(5)', '192', '+'), 2), (('s(2)', '32', '+'), 2), (('s(5)', '32', '+'), 2), (('s(5)', '64', '+'), 2), (('s(5)', '160', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0

Optimized code stored in /tmp/0x00/MiladyDeWinter_6863_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_6863_statistics.csv

Estimated initial gas: 102
Estimated gas optimized: 102

Estimated initial size in bytes: 41
Estimated size optimized in bytes: 41

Initial number of instructions: 36
Final number of instructions: 36

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_6863;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;6863;2;True;False;False;JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0;JUMPDEST PUSH0 PUSH1 0xa0 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 0x20 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 0xa0 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 0xc0 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH0;102;41;36;102;41;36;0;0;0;True;False;False;False;2.2825376670225523;0;3;0;0

Block: 6913
6913Instr:<<['DUP5', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'AND', 'DUP4', 'MSTORE', 'SWAP4', 'DUP4', 'ADD', 'SWAP4', 'SWAP2', 'DUP4', 'ADD', 'SWAP2', 'PUSH1 0x01', 'ADD', 'PUSH2 0x1af8', 'JUMP']>> 
6913-Stack size: 21 
6913-Equals Mem:<< []>> 
6913-NonEquals Mem: << [<9,1>]>> 
6913-Equals Sto:<< []>> 
6913-NonEquals Sto: << []>> 
6913-Useless: []
6913-Constancy: [(5, 0), (10, 0), (3, 32)]
6913-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,9>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,9>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(0)', 'mload0'), 1), (('s(2)', 's(9)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(0)', 'mload0'), 1)
mload0
[(('1', 's(4)', '+'), 2), (('s(1)', 's(2)', '+'), 2), (('s(1)', 's(0)', '+'), 2), (('s(0)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('s(0)', 'mload0'), 1)
mload0
[(('1', 's(4)', '+'), 2), (('s(1)', 's(2)', '+'), 2), (('s(1)', 's(0)', '+'), 2), (('s(0)', 'mload0'), 1), (('1461501637330902918203684832716283019655932542975', 's(12)', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
DUP5 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x01 ADD PUSH2 0x1af8 JUMP

Optimized sequence (basic block per line):
PUSH1 0x1 ADD DUP4 DUP6 ADD SWAP5 MLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP4 DUP6 ADD SWAP4 MSTORE PUSH2 0x1af8 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_6913_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_6913_statistics.csv

Estimated initial gas: 71
Estimated gas optimized: 53

Estimated initial size in bytes: 28
Estimated size optimized in bytes: 39

Initial number of instructions: 22
Final number of instructions: 16

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_6913;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;6913;2;True;True;False;DUP5 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x01 ADD PUSH2 0x1af8 JUMP;PUSH1 0x1 ADD DUP4 DUP6 ADD SWAP5 MLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP4 DUP6 ADD SWAP4 MSTORE PUSH2 0x1af8 JUMP;71;28;22;53;39;16;18;-11;6;True;False;False;False;2.104906145017594;2;0;0;0

Block: 4427
4427Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP6', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x116d', 'SWAP1', 'DUP5', 'PUSH2 0x1602', 'JUMP']>> 
4427-Stack size: 11 
4427-Equals Mem:<< []>> 
4427-NonEquals Mem: << [<11,14>]>> 
4427-Equals Sto:<< []>> 
4427-NonEquals Sto: << []>> 
4427-Useless: []
4427-Constancy: [(6, 0)]
4427-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(9)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(9)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(11)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(9)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(9)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(9)', 'sload0'), 1), 1)}
(('s(9)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(9)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4427 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5634
5634Instr:<<['JUMPDEST', 'PUSH0', 'PUSH2 0x15a6', 'DUP4', 'DUP4', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'PUSH1 0x40', 'ADD', 'PUSH1 0x40', 'MSTORE', 'DUP1', 'PUSH1 0x1e', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000', 'DUP2', 'MSTORE', 'POP', 'PUSH2 0x1345', 'JUMP']>> 
5634-Stack size: 14 
5634-Equals Mem:<< [<11,6>]>> 
5634-NonEquals Mem: << [<11,15>, <15,20>, <15,6>, <20,6>, <11,20>]>> 
5634-Equals Sto:<< []>> 
5634-NonEquals Sto: << []>> 
5634-Useless: []
5634-Constancy: []
5634-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>]}
{'memory_deps_eqs': [<5,10>], 'memory_deps_noneqs': [<10,14>, <14,19>, <5,14>, <5,19>, <10,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(9)', 'mstore'), 2), (('s(8)', '30', 'mstore'), 2), (('s(12)', '37714057306925736537727343956344029380455708191757305005271024775623175766016', 'mstore'), 2)]
Memory dep: [(0, 1)]
Memory dep simplified: [(0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(8)', '+'), 2), (('32', 's(8)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x15a6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x1345 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 PUSH2 0x15a6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x1345 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_5634_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_5634_statistics.csv

Estimated initial gas: 73
Estimated gas optimized: 73

Estimated initial size in bytes: 65
Estimated size optimized in bytes: 65

Initial number of instructions: 24
Final number of instructions: 24

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5634;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;5634;2;True;True;False;JUMPDEST PUSH0 PUSH2 0x15a6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x1345 JUMP;JUMPDEST PUSH0 PUSH2 0x15a6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1e DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000 DUP2 MSTORE POP PUSH2 0x1345 JUMP;73;65;24;73;65;24;0;0;0;True;False;False;False;2.138054609997198;0;1;0;0

Block: 4461
4461Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SSTORE', 'PUSH2 0x11ba', 'PUSH2 0x119c', 'DUP3', 'PUSH2 0x1196', 'DUP7', 'DUP7', 'PUSH2 0x1602', 'JUMP']>> 
4461-Stack size: 12 
4461-Equals Mem:<< []>> 
4461-NonEquals Mem: << [<11,14>]>> 
4461-Equals Sto:<< []>> 
4461-NonEquals Sto: << []>> 
4461-Useless: []
4461-Constancy: [(7, 0)]
4461-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(15)', 's(5)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(15)', 's(5)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(12)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(15)', 's(5)', 'sstore'), 2), 1)}
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4461 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4508
4508Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP7', 'AND', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'SWAP1', 'PUSH2 0x1643', 'JUMP']>> 
4508-Stack size: 13 
4508-Equals Mem:<< []>> 
4508-NonEquals Mem: << [<11,14>]>> 
4508-Equals Sto:<< []>> 
4508-NonEquals Sto: << []>> 
4508-Useless: []
4508-Constancy: [(8, 0)]
4508-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<10,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{17: ((('s(8)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(10)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{17: ((('s(8)', 'sload0'), 1), 1)}
(('s(8)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(8)', 'sload0'), 1), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4508 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4538
4538Instr:<<['JUMPDEST', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP1', 'DUP7', 'AND', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'DUP7', 'AND', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'PUSH2 0x1207', 'DUP5', 'PUSH2 0x1196', 'DUP9', 'DUP9', 'PUSH2 0x1602', 'JUMP']>> 
4538-Stack size: 12 
4538-Equals Mem:<< []>> 
4538-NonEquals Mem: << [<12,15>]>> 
4538-Equals Sto:<< []>> 
4538-NonEquals Sto: << []>> 
4538-Useless: []
4538-Constancy: [(7, 0)]
4538-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<11,14>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{21: ((('s(23)', 's(5)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(23)', 's(5)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(17)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{21: ((('s(23)', 's(5)', 'sstore'), 2), 1)}
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4538 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4639
4639Instr:<<['ADDRESS', 'PUSH0', 'SWAP1', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'KECCAK256', 'SLOAD', 'PUSH2 0x1237', 'SWAP1', 'DUP4', 'PUSH2 0x1643', 'JUMP']>> 
4639-Stack size: 11 
4639-Equals Mem:<< []>> 
4639-NonEquals Mem: << [<4,7>]>> 
4639-Equals Sto:<< []>> 
4639-NonEquals Sto: << []>> 
4639-Useless: []
4639-Constancy: [(6, 0)]
4639-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{11: ((('s(6)', 'sload0'), 1), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(8)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('s(6)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1), (('address', 'address'), 0)]
{11: ((('s(6)', 'sload0'), 1), 1)}
(('s(6)', 'sload0'), 1)
sload0
[(('0', '64', 'keccak2560'), 2), (('s(6)', 'sload0'), 1), (('address', 'address'), 0)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4639 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4663
4663Instr:<<['JUMPDEST', 'ADDRESS', 'PUSH0', 'DUP2', 'DUP2', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH1 0x40', 'SWAP1', 'DUP2', 'SWAP1', 'KECCAK256', 'SWAP3', 'SWAP1', 'SWAP3', 'SSTORE', 'SWAP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP8', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1287', 'SWAP1', 'DUP7', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4663-Stack size: 12 
4663-Equals Mem:<< []>> 
4663-NonEquals Mem: << [<13,19>, <5,34>, <8,34>, <5,8>, <34,13>, <34,19>, <5,19>, <8,19>]>> 
4663-Equals Sto:<< []>> 
4663-NonEquals Sto: << []>> 
4663-Useless: []
4663-Constancy: [(7, 0)]
4663-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,18>, <4,33>, <7,33>, <4,7>, <12,33>, <18,33>, <4,18>, <7,18>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<12,18>, <4,33>, <7,33>, <4,7>, <12,33>, <18,33>, <4,18>, <7,18>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{16: ((('s(17)', 's(5)', 'sstore'), 2), 1)}
Storage order: [(('0', '64', 'keccak2560'), 2), (('s(17)', 's(5)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', 's(15)', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('0', '64', 'keccak2560'), 2), (('64', 'mload0'), 1), (('s(11)', 's(3)', 'mstore'), 2)]
Memory dep: [(1, 2), (0, 2)]
Memory dep simplified: [(1, 2), (0, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(11)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('address', 'address'), 0), (('0', '64', 'keccak2560'), 2)]
SFS with rule: isolated_block_0_0_input.json
{16: ((('s(17)', 's(5)', 'sstore'), 2), 1)}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(11)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2), (('address', 'address'), 0), (('0', '64', 'keccak2560'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP8 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1287 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP8 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1287 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_4663_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_4663_statistics.csv

Estimated initial gas: 5142
Estimated gas optimized: 5142

Estimated initial size in bytes: 80
Estimated size optimized in bytes: 80

Initial number of instructions: 39
Final number of instructions: 39

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4663;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;4663;2;True;False;False;JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP8 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1287 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;JUMPDEST ADDRESS PUSH0 DUP2 DUP2 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP8 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1287 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;5142;80;39;5142;80;39;0;0;0;True;False;False;False;2.258470709028188;2;2;5000;5000

Block: 4759
4759Instr:<<['PUSH0', 'DUP1', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49', 'SLOAD', 'PUSH2 0x12ca', 'SWAP1', 'DUP3', 'PUSH2 0x1643', 'JUMP']>> 
4759-Stack size: 11 
4759-Equals Mem:<< []>> 
4759-NonEquals Mem: << [<2,5>]>> 
4759-Equals Sto:<< []>> 
4759-NonEquals Sto: << []>> 
4759-Useless: []
4759-Constancy: [(6, 0)]
4759-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<2,5>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{7: ((('75506153327051474587906755573858019282972751592871715030499431892688993766217', 'sload0'), 1), 0)}
Storage order: [(('75506153327051474587906755573858019282972751592871715030499431892688993766217', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '0', 'mstore'), 2), (('32', '1', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('75506153327051474587906755573858019282972751592871715030499431892688993766217', 'sload0'), 1)
sload0
[(('75506153327051474587906755573858019282972751592871715030499431892688993766217', 'sload0'), 1)]
{7: ((('75506153327051474587906755573858019282972751592871715030499431892688993766217', 'sload0'), 1), 0)}
(('75506153327051474587906755573858019282972751592871715030499431892688993766217', 'sload0'), 1)
sload0
[(('75506153327051474587906755573858019282972751592871715030499431892688993766217', 'sload0'), 1)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4759 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5722
5722Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x1b', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
5722-Stack size: 16 
5722-Equals Mem:<< []>> 
5722-NonEquals Mem: << [<16,1>, <11,1>, <21,1>, <6,1>]>> 
5722-Equals Sto:<< []>> 
5722-NonEquals Sto: << []>> 
5722-Useless: []
5722-Constancy: [(1, 0), (11, 0)]
5722-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,16>, <1,11>, <1,21>, <1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '27', 'mstore'), 2), (('s(10)', '37714057306925736537727337196910129575336924242351790113041164404516917870592', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_5722_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_5722_statistics.csv

Estimated initial gas: 83
Estimated gas optimized: 77

Estimated initial size in bytes: 71
Estimated size optimized in bytes: 97

Initial number of instructions: 26
Final number of instructions: 24

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5722;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;5722;2;True;True;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x04f9 JUMP;PUSH1 0x64 PUSH1 0x40 MLOAD PUSH1 0x20 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 DUP3 MSTORE DUP2 PUSH1 0x4 ADD MSTORE PUSH1 0x1b PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000 PUSH1 0x44 DUP3 ADD MSTORE ADD PUSH2 0x4f9 JUMP;83;71;26;77;97;24;6;-26;2;True;False;False;False;2.099636561004445;1;3;0;0

Block: 4810
4810Instr:<<['JUMPDEST', 'PUSH0', 'DUP1', 'DUP1', 'MSTORE', 'PUSH1 0x01', 'PUSH1 0x20', 'MSTORE', 'PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49', 'SWAP2', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH1 0x40', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'DUP8', 'AND', 'SWAP1', 'PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', 'SWAP1', 'PUSH2 0x1335', 'SWAP1', 'DUP6', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'ADD', 'SWAP1', 'JUMP']>> 
4810-Stack size: 12 
4810-Equals Mem:<< []>> 
4810-NonEquals Mem: << [<4,29>, <7,29>, <4,7>, <29,14>, <4,14>, <7,14>]>> 
4810-Equals Sto:<< []>> 
4810-NonEquals Sto: << []>> 
4810-Useless: []
4810-Constancy: [(7, 0)]
4810-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,28>, <6,28>, <3,6>, <13,28>, <3,13>, <6,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<3,28>, <6,28>, <3,6>, <13,28>, <3,13>, <6,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{11: ((('75506153327051474587906755573858019282972751592871715030499431892688993766217', 's(5)', 'sstore'), 2), 0)}
Storage order: [(('75506153327051474587906755573858019282972751592871715030499431892688993766217', 's(5)', 'sstore'), 2)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '0', 'mstore'), 2), (('32', '1', 'mstore'), 2), (('64', 'mload0'), 1), (('s(11)', 's(4)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(11)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{11: ((('75506153327051474587906755573858019282972751592871715030499431892688993766217', 's(5)', 'sstore'), 2), 0)}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('32', 's(11)', '+'), 2), (('s(0)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 DUP1 DUP1 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP8 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1335 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized sequence (basic block per line):
JUMPDEST PUSH0 DUP1 DUP1 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP8 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1335 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_4810_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_4810_statistics.csv

Estimated initial gas: 5101
Estimated gas optimized: 5101

Estimated initial size in bytes: 107
Estimated size optimized in bytes: 107

Initial number of instructions: 34
Final number of instructions: 34

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4810;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;4810;2;True;False;False;JUMPDEST PUSH0 DUP1 DUP1 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP8 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1335 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;JUMPDEST PUSH0 DUP1 DUP1 MSTORE PUSH1 0x01 PUSH1 0x20 MSTORE PUSH32 0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB DUP8 AND SWAP1 PUSH32 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef SWAP1 PUSH2 0x1335 SWAP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP;5101;107;34;5101;107;34;0;0;0;True;False;False;False;2.208199108019471;2;0;5000;5000

Block: 4944
4944Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x04', 'ADD', 'PUSH2 0x04f9', 'SWAP2', 'SWAP1', 'PUSH2 0x16cd', 'JUMP']>> 
4944-Stack size: 15 
4944-Equals Mem:<< []>> 
4944-NonEquals Mem: << [<6,1>]>> 
4944-Equals Sto:<< []>> 
4944-NonEquals Sto: << []>> 
4944-Useless: []
4944-Constancy: [(1, 0)]
4944-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('4', 's(5)', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP2 SWAP1 PUSH2 0x16cd JUMP

Optimized sequence (basic block per line):
PUSH2 0x4f9 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x16cd JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_4944_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_4944_statistics.csv

Estimated initial gas: 47
Estimated gas optimized: 41

Estimated initial size in bytes: 24
Estimated size optimized in bytes: 51

Initial number of instructions: 14
Final number of instructions: 12

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4944;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;4944;2;False;True;True;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x04 ADD PUSH2 0x04f9 SWAP2 SWAP1 PUSH2 0x16cd JUMP;PUSH2 0x4f9 SWAP1 PUSH32 0x8c379a000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 MLOAD MSTORE PUSH1 0x40 MLOAD PUSH1 0x4 ADD PUSH2 0x16cd JUMP;47;24;14;41;51;12;6;-27;2;True;False;False;False;0.07271917798789218;1;0;0;0

Block: 6346
6346Instr:<<['JUMPDEST', 'PUSH4 0x4e487b71', 'PUSH1 0xe0', 'SHL', 'PUSH0', 'MSTORE', 'PUSH1 0x11', 'PUSH1 0x04', 'MSTORE', 'PUSH1 0x24', 'PUSH0', 'REVERT']>> 
6346-Stack size: 7 
6346-Equals Mem:<< []>> 
6346-NonEquals Mem: << [<5,8>]>> 
6346-Equals Sto:<< []>> 
6346-NonEquals Sto: << []>> 
6346-Useless: []
6346-Constancy: []
6346-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<4,7>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('224', '1313373041', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('0', '35408467139433450592217433187231851964531694900788300625387963629091585785856', 'mstore'), 2), (('4', '17', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
SFS with rule: isolated_block_0_0_input.json
{}
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_6346 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 2873
2873Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x24', 'DUP1', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH4 0x72657373', 'PUSH1 0xe0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2873-Stack size: 6 
2873-Equals Mem:<< []>> 
2873-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2873-Equals Sto:<< []>> 
2873-NonEquals Sto: << []>> 
2873-Useless: []
2873-Constancy: []
2873-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('224', '1919251315', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '36', 'mstore'), 2), (('s(10)', '31354931781638678487916134672869638484047149969764982831501014746446650500196', 'mstore'), 2), (('s(12)', '51742913093258732729005998692887265601192425265805909375210916622055285719040', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_2873_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_2873_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 83
Estimated size optimized in bytes: 83

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2873;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;2873;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xe0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;104;83;33;104;83;33;0;0;0;True;False;False;False;2.130825867992826;2;4;0;0

Block: 2971
2971Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x22', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH2 0x7373', 'PUSH1 0xf0', 'SHL', 'PUSH1 0x64', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x84', 'ADD', 'PUSH2 0x04f9', 'JUMP']>> 
2971-Stack size: 6 
2971-Equals Mem:<< []>> 
2971-NonEquals Mem: << [<6,1>, <11,1>, <16,1>, <21,1>, <28,1>]>> 
2971-Equals Sto:<< []>> 
2971-NonEquals Sto: << []>> 
2971-Useless: []
2971-Constancy: []
2971-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,6>, <1,11>, <1,16>, <1,21>, <1,28>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
[RULE]: Evaluate expression ('240', '29555', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(3)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(6)', '32', 'mstore'), 2), (('s(8)', '34', 'mstore'), 2), (('s(10)', '31354931781638678487916134672869638488806705378895508030211234510262059168357', 'mstore'), 2), (('s(12)', '52219164999525148860834357634456956735281286572158918307284071279203377479680', 'mstore'), 2)]
Memory dep: [(4, 5), (3, 5), (2, 5), (1, 5), (3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(4, 5), (3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('132', 's(3)', '+'), 2), (('s(3)', '4', '+'), 2), (('s(3)', '36', '+'), 2), (('s(3)', '68', '+'), 2), (('s(3)', '100', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP

Optimized code stored in /tmp/0x00/MiladyDeWinter_2971_optimized.txt
Optimality results stored in /tmp/0x00/MiladyDeWinter_2971_statistics.csv

Estimated initial gas: 104
Estimated gas optimized: 104

Estimated initial size in bytes: 82
Estimated size optimized in bytes: 82

Initial number of instructions: 33
Final number of instructions: 33

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_2971;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;MiladyDeWinter;2971;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303a20617070726f766520746f20746865207a65726f206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xf0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x04f9 JUMP;104;82;33;104;82;33;0;0;0;True;False;False;False;2.129961650003679;2;4;0;0

Block: 330
330Instr:<<['JUMPDEST', 'POP', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'DUP1', 'DUP3', 'ADD', 'SWAP1', 'SWAP2', 'MSTORE', 'PUSH1 0x10', 'DUP2', 'MSTORE', 'PUSH16 0x26b4b630b23c902232902bb4b73a32b9', 'PUSH1 0x81', 'SHL', 'PUSH1 0x20', 'DUP3', 'ADD', 'MSTORE']>> 
330-Stack size: 2 
330-Equals Mem:<< [<10,4>]>> 
330-NonEquals Mem: << [<10,13>, <10,20>, <13,4>, <13,20>, <20,4>]>> 
330-Equals Sto:<< []>> 
330-NonEquals Sto: << []>> 
330-Useless: []
330-Constancy: []
330-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>]}
{'memory_deps_eqs': [<3,9>], 'memory_deps_noneqs': [<9,12>, <9,19>, <3,12>, <12,19>, <3,19>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('129', '51448972531024285381168112391996191417', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('64', 's(2)', 'mstore'), 2), (('s(1)', '16', 'mstore'), 2), (('s(5)', '35014356297014579884907939544879836892371454197452640651801867313363816546304', 'mstore'), 2)]
Memory dep: [(2, 3), (1, 3), (1, 2), (0, 1), (0, 2), (0, 3)]
Memory dep simplified: [(2, 3), (1, 2), (0, 1)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(1)', '+'), 2), (('s(1)', '32', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('64', 's(1)', '+'), 2), (('s(1)', '32', '+'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_330 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 384
384Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'RETURN']>> 
384-Stack size: 2 
384-Equals Mem:<< []>> 
384-NonEquals Mem: << []>> 
384-Equals Sto:<< []>> 
384-NonEquals Sto: << []>> 
384-Useless: []
384-Constancy: []
384-ContextAliasing: []

Block: 6769
6769Instr:<<['JUMPDEST', 'DUP4', 'MLOAD', 'SWAP3', 'POP', 'PUSH1 0x20', 'DUP5', 'ADD', 'MLOAD', 'SWAP2', 'POP', 'PUSH1 0x40', 'DUP5', 'ADD', 'MLOAD', 'SWAP1', 'POP', 'SWAP3', 'POP', 'SWAP3', 'POP', 'SWAP3', 'JUMP']>> 
6769-Stack size: 8 
6769-Equals Mem:<< []>> 
6769-NonEquals Mem: << [<2,8>, <2,14>, <8,14>]>> 
6769-Equals Sto:<< []>> 
6769-NonEquals Sto: << []>> 
6769-Useless: []
6769-Constancy: [(2, 0), (1, 0), (0, 0)]
6769-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,7>, <1,13>, <7,13>]}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [<1,7>, <1,13>, <7,13>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('s(2)', 'mload0'), 1), (('s(8)', 'mload1'), 1), (('s(6)', 'mload2'), 1)]
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(8)', 'mload1'), 1)
mload1
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(6)', 'mload2'), 1)
mload2
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
{}
(('s(2)', 'mload0'), 1)
mload0
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(8)', 'mload1'), 1)
mload1
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
(('s(6)', 'mload2'), 1)
mload2
[(('s(2)', '64', '+'), 2), (('s(6)', 'mload2'), 1), (('s(2)', '32', '+'), 2), (('s(8)', 'mload1'), 1), (('s(2)', 'mload0'), 1)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_6769 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1273
1273Instr:<<['JUMPDEST', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
1273-Stack size: 3 
1273-Equals Mem:<< []>> 
1273-NonEquals Mem: << []>> 
1273-Equals Sto:<< []>> 
1273-NonEquals Sto: << []>> 
1273-Useless: []
1273-Constancy: []
1273-ContextAliasing: []

Block: 1677
1677Instr:<<['JUMPDEST', 'PUSH1 0x10', 'SSTORE', 'PUSH1 0x06', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'PUSH32 0x947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf', 'PUSH2 0x06c7', 'PUSH1 0x08', 'PUSH1 0x0a', 'PUSH2 0x19be', 'JUMP']>> 
1677-Stack size: 3 
1677-Equals Mem:<< []>> 
1677-NonEquals Mem: << []>> 
1677-Equals Sto:<< [<5,10>]>> 
1677-NonEquals Sto: << [<2,5>, <2,10>]>> 
1677-Useless: []
1677-Constancy: []
1677-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<4,9>], 'storage_deps_noneqs': [<1,4>, <1,9>]}
{1: ((('16', 's(0)', 'sstore'), 2), 0), 4: ((('6', 'sload0'), 1), 1), 9: ((('6', 's(5)', 'sstore'), 2), 2)}
Storage order: [(('16', 's(0)', 'sstore'), 2), (('6', 'sload0'), 1), (('6', 's(5)', 'sstore'), 2)]
Storage dep: [(1, 2)]
Storage dep simplified: [(1, 2)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('6', 'sload0'), 1)
sload0
[(('6', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(6)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{1: ((('16', 's(0)', 'sstore'), 2), 0), 4: ((('6', 'sload0'), 1), 1), 9: ((('6', 's(5)', 'sstore'), 2), 2)}
(('6', 'sload0'), 1)
sload0
[(('6', 'sload0'), 1), ((115792089237316195423570985008687907853269984665640564039457584007913129639680, 's(6)', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1677 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 1911
1911Instr:<<['JUMPDEST', 'PUSH1 0x13', 'DUP1', 'SLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'NOT', 'AND', 'PUSH20 0x7a250d5630b4cf539739df2c5dacb4c659f2488d', 'SWAP1', 'DUP2', 'OR', 'SWAP1', 'SWAP2', 'SSTORE', 'PUSH2 0x07c0', 'SWAP1', 'ADDRESS', 'SWAP1', 'PUSH2 0x07b2', 'PUSH1 0x08', 'PUSH1 0x0a', 'PUSH2 0x19be', 'JUMP']>> 
1911-Stack size: 2 
1911-Equals Mem:<< []>> 
1911-NonEquals Mem: << []>> 
1911-Equals Sto:<< [<3,17>]>> 
1911-NonEquals Sto: << []>> 
1911-Useless: []
1911-Constancy: []
1911-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<2,16>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{2: ((('19', 'sload0'), 1), 0), 16: ((('19', 's(8)', 'sstore'), 2), 1)}
Storage order: [(('19', 'sload0'), 1), (('19', 's(8)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('19', 'sload0'), 1)
sload0
[(('address', 'address'), 0), (('19', 'sload0'), 1), ((115792089237316195423570985007226406215939081747436879206741300988257197096960, 's(12)', 'and'), 2), (('697323163401596485410334513241460920685086001293', 's(9)', 'or'), 2)]
SFS with rule: isolated_block_0_0_input.json
{2: ((('19', 'sload0'), 1), 0), 16: ((('19', 's(8)', 'sstore'), 2), 1)}
(('19', 'sload0'), 1)
sload0
[(('address', 'address'), 0), (('19', 'sload0'), 1), ((115792089237316195423570985007226406215939081747436879206741300988257197096960, 's(12)', 'and'), 2), (('697323163401596485410334513241460920685086001293', 's(9)', 'or'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_1911 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 3620
3620Instr:<<['JUMPDEST', 'PUSH2 0x0e4a', 'PUSH1 0x64', 'PUSH2 0x0d90', 'PUSH1 0x0b', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e3f', 'JUMPI']>> 
3620-Stack size: 11 
3620-Equals Mem:<< []>> 
3620-NonEquals Mem: << []>> 
3620-Equals Sto:<< []>> 
3620-NonEquals Sto: << [<5,7>]>> 
3620-Useless: []
3620-Constancy: [(1, 0), (6, 0)]
3620-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<4,6>]}
{4: ((('11', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
Storage order: [(('11', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('11', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
{4: ((('11', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
(('11', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('11', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_3620 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4241
4241Instr:<<['PUSH2 0x10ab', 'PUSH1 0x64', 'PUSH2 0x0d90', 'PUSH1 0x0c', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT', 'PUSH2 0x0e3f', 'JUMPI']>> 
4241-Stack size: 11 
4241-Equals Mem:<< []>> 
4241-NonEquals Mem: << []>> 
4241-Equals Sto:<< []>> 
4241-NonEquals Sto: << [<4,6>]>> 
4241-Useless: []
4241-Constancy: [(6, 0)]
4241-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<4,6>]}
{4: ((('12', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
Storage order: [(('12', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('12', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
{4: ((('12', 'sload0'), 1), 0), 6: ((('14', 'sload1'), 1), 1)}
(('12', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('12', 'sload0'), 1), (('s(6)', 's(7)', 'gt'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4241 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 4365
4365Instr:<<['POP', 'PUSH1 0x0d', 'SLOAD', 'PUSH1 0x0e', 'SLOAD', 'GT']>> 
4365-Stack size: 13 
4365-Equals Mem:<< []>> 
4365-NonEquals Mem: << []>> 
4365-Equals Sto:<< []>> 
4365-NonEquals Sto: << [<2,4>]>> 
4365-Useless: []
4365-Constancy: [(8, 0)]
4365-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [], 'storage_deps_noneqs': [<2,4>]}
{1: ((('13', 'sload0'), 1), 0), 3: ((('14', 'sload1'), 1), 1)}
Storage order: [(('13', 'sload0'), 1), (('14', 'sload1'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('13', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
{1: ((('13', 'sload0'), 1), 0), 3: ((('14', 'sload1'), 1), 1)}
(('13', 'sload0'), 1)
sload0
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
(('14', 'sload1'), 1)
sload1
[(('14', 'sload1'), 1), (('13', 'sload0'), 1), (('s(2)', 's(3)', 'gt'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_4365 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 5336
5336Instr:<<['JUMPDEST', 'POP', 'POP', 'PUSH1 0x14', 'DUP1', 'SLOAD', 'PUSH1 0xff', 'PUSH1 0xa8', 'SHL', 'NOT', 'AND', 'SWAP1', 'SSTORE', 'POP', 'POP', 'POP', 'POP', 'JUMP']>> 
5336-Stack size: 10 
5336-Equals Mem:<< []>> 
5336-NonEquals Mem: << []>> 
5336-Equals Sto:<< [<5,12>]>> 
5336-NonEquals Sto: << []>> 
5336-Useless: []
5336-Constancy: []
5336-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [], 'memory_deps_noneqs': []}
{'memory_deps_eqs': [], 'memory_deps_noneqs': [], 'storage_deps_eqs': [<4,11>], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('168', '255', 'shl')
{3: ((('20', 'sload0'), 1), 0), 11: ((('20', 's(6)', 'sstore'), 2), 1)}
Storage order: [(('20', 'sload0'), 1), (('20', 's(6)', 'sstore'), 2)]
Storage dep: [(0, 1)]
Storage dep simplified: [(0, 1)]
Memory order: []
Memory dep: []
Memory dep simplified: []
********************IT*********************
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(8)', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
{3: ((('20', 'sload0'), 1), 0), 11: ((('20', 's(6)', 'sstore'), 2), 1)}
(('20', 'sload0'), 1)
sload0
[(('20', 'sload0'), 1), ((115792089237316195423570889601861022891927484329094684320502060868636724166655, 's(8)', 'and'), 2)]
BLOCK 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_MiladyDeWinter_5336 FILTERED WITH EQUAL SFS WITH AND WITHOUT HEAP ANALYSIS INFORMATION
Block: 66
66Instr:<<['JUMPDEST', 'PUSH0', 'SLOAD', 'PUSH1 0x40', 'DUP1', 'MLOAD', 'PUSH1 0x01', 'PUSH1 0x01', 'PUSH1 0xa0', 'SHL', 'SUB', 'SWAP1', 'SWAP3', 'AND', 'DUP3', 'MSTORE', 'MLOAD', 'SWAP1', 'DUP2', 'SWAP1', 'SUB', 'PUSH1 0x20', 'ADD', 'SWAP1', 'RETURN']>> 
66-Stack size: 1 
66-Equals Mem:<< [<5,16>]>> 
66-NonEquals Mem: << [<15,5>, <15,16>]>> 
66-Equals Sto:<< []>> 
66-NonEquals Sto: << []>> 
66-Useless: []
66-Constancy: []
66-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<4,15>], 'memory_deps_noneqs': [<4,14>, <14,15>]}
{'memory_deps_eqs': [<4,15>], 'memory_deps_noneqs': [<4,14>, <14,15>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('160', '1', 'shl')
[RULE]: Evaluate expression ('1461501637330902918203684832716283019655932542976', '1', '-')
{1: ((('0', 'sload0'), 1), 0)}
Storage order: [(('0', 'sload0'), 1)]
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', 's(8)', 'mstore'), 2)]
Memory dep: []
Memory dep simplified: []
[RULE]: Simplification rule type 1: {'id': 'SUB_0', 'opcode': '03', 'disasm': 'SUB', 'inpt_sk': ['s(5)', 's(5)'], 'outpt_sk': ['s(4)'], 'push': False, 'gas': 3, 'commutative': False, 'storage': False, 'size': 1}
[RULE]: Simplification rule type 1: {'id': 'ADD_0', 'opcode': '01', 'disasm': 'ADD', 'inpt_sk': [32, 0], 'outpt_sk': ['s(3)'], 'push': False, 'gas': 3, 'commutative': True, 'storage': False, 'size': 1}
********************IT*********************
(('0', 'sload0'), 1)
sload0
[(('64', 'mload0'), 1), (('s(5)', 's(5)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('s(5)', 's(5)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
SFS with rule: isolated_block_0_0_input.json
MEJORADO: /tmp/gasol_4f8faeddb5d24e728a871ba86de5c36d/jsons/isolated_block_0_0_input.json --- (6, 5)
{1: ((('0', 'sload0'), 1), 0)}
(('0', 'sload0'), 1)
sload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload0'), 1)
mload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
(('64', 'mload1'), 1)
mload1
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('s(5)', 's(2)', '-'), 2), (('32', 's(4)', '+'), 2), (('0', 'sload0'), 1), (('s(9)', '1461501637330902918203684832716283019655932542975', 'and'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN

Optimized sequence (basic block per line):
JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP2 MSTORE RETURN

Optimized code stored in /tmp/0x00/Ownable_66_optimized.txt
Optimality results stored in /tmp/0x00/Ownable_66_statistics.csv

Estimated initial gas: 2166
Estimated gas optimized: 2125

Estimated initial size in bytes: 30
Estimated size optimized in bytes: 34

Initial number of instructions: 25
Final number of instructions: 11

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_Ownable_66;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;Ownable;66;2;False;True;True;JUMPDEST PUSH0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x01 PUSH1 0x01 PUSH1 0xa0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN;JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 SLOAD PUSH20 0xffffffffffffffffffffffffffffffffffffffff AND DUP2 MSTORE RETURN;2166;30;25;2125;34;11;41;-4;14;True;False;False;False;0.13306999701308087;4;0;2100;2100

Block: 114
114Instr:<<['PUSH1 0x40', 'MLOAD', 'PUSH3 0x461bcd', 'PUSH1 0xe5', 'SHL', 'DUP2', 'MSTORE', 'PUSH1 0x20', 'PUSH1 0x04', 'DUP3', 'ADD', 'DUP2', 'SWAP1', 'MSTORE', 'PUSH1 0x24', 'DUP3', 'ADD', 'MSTORE', 'PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572', 'PUSH1 0x44', 'DUP3', 'ADD', 'MSTORE', 'PUSH1 0x64', 'ADD', 'PUSH1 0x40', 'MLOAD', 'DUP1', 'SWAP2', 'SUB', 'SWAP1', 'REVERT']>> 
114-Stack size: 2 
114-Equals Mem:<< [<1,26>]>> 
114-NonEquals Mem: << [<6,1>, <6,26>, <13,1>, <13,26>, <17,1>, <17,26>, <22,1>, <22,26>]>> 
114-Equals Sto:<< []>> 
114-NonEquals Sto: << []>> 
114-Useless: []
114-Constancy: [(0, 64)]
114-ContextAliasing: []


ADDITIONAL EXECUTION WITH ALIASING

{'memory_deps_eqs': [<1,26>], 'memory_deps_noneqs': [<1,6>, <6,26>, <1,13>, <13,26>, <1,17>, <17,26>, <1,22>, <22,26>]}
{'memory_deps_eqs': [<1,26>], 'memory_deps_noneqs': [<1,6>, <6,26>, <1,13>, <13,26>, <1,17>, <17,26>, <1,22>, <22,26>], 'storage_deps_eqs': [], 'storage_deps_noneqs': []}
[RULE]: Evaluate expression ('229', '4594637', 'shl')
{}
Storage order: []
Storage dep: []
Storage dep simplified: []
Memory order: [(('64', 'mload0'), 1), (('s(5)', '3963877391197344453575983046348115674221700746820753546331534351508065746944', 'mstore'), 2), (('s(9)', '32', 'mstore'), 2), (('s(11)', '32', 'mstore'), 2), (('s(13)', '35943731656364841964516503116990081338611484598491072354577564874054038349170', 'mstore'), 2)]
Memory dep: [(3, 4), (2, 4), (1, 4), (2, 3), (1, 3), (1, 2)]
Memory dep simplified: [(3, 4), (2, 3), (1, 2)]
********************IT*********************
(('64', 'mload0'), 1)
mload0
[(('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(5)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
SFS with rule: isolated_block_0_0_input.json
{}
(('64', 'mload0'), 1)
mload0
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(2)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
(('64', 'mload1'), 1)
mload1
[(('64', 'mload1'), 1), (('64', 'mload0'), 1), (('100', 's(5)', '+'), 2), (('s(4)', 's(2)', '-'), 2), (('s(5)', '4', '+'), 2), (('s(5)', '36', '+'), 2), (('s(5)', '68', '+'), 2)]
Optimizing isolated_block_0_0... Timeout:2

Initial sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT

Optimized sequence (basic block per line):
PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT

Optimized code stored in /tmp/0x00/Ownable_114_optimized.txt
Optimality results stored in /tmp/0x00/Ownable_114_statistics.csv

Estimated initial gas: 93
Estimated gas optimized: 93

Estimated initial size in bytes: 75
Estimated size optimized in bytes: 75

Initial number of instructions: 32
Final number of instructions: 32

GREENRES: 0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol_Ownable_114;0x006ec0fb38af42a07e7672cb97b606e8862d01f9.sol;Ownable;114;2;True;False;False;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT;PUSH1 0x40 MLOAD PUSH3 0x461bcd PUSH1 0xe5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x04 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT;93;75;32;93;75;32;0;0;0;True;False;False;False;2.135100390005391;1;3;0;0

